This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.github/workflows/main.yml
.gitignore
BusinessObjects/Base/ApiResponse.cs
BusinessObjects/Base/BaseEntity.cs
BusinessObjects/Base/BasePaginatedList.cs
BusinessObjects/Base/ColumnAttribute.cs
BusinessObjects/Base/DishRecommendationSettings.cs
BusinessObjects/Base/ExcelImportResult.cs
BusinessObjects/Base/MealRecommendationSettings.cs
BusinessObjects/BusinessObjects.csproj
BusinessObjects/Entity/Dish.cs
BusinessObjects/Entity/DishIngredient.cs
BusinessObjects/Entity/DishRating.cs
BusinessObjects/Entity/DishRecommendHistory.cs
BusinessObjects/Entity/FavoriteDish.cs
BusinessObjects/Entity/FavoriteMeal.cs
BusinessObjects/Entity/Food.cs
BusinessObjects/Entity/FoodAllergy.cs
BusinessObjects/Entity/Fridge.cs
BusinessObjects/Entity/FridgeItem.cs
BusinessObjects/Entity/Meal.cs
BusinessObjects/Entity/MealDish.cs
BusinessObjects/Entity/MealRating.cs
BusinessObjects/Entity/MealRecommendationHistory.cs
BusinessObjects/Entity/NutrientCategory.cs
BusinessObjects/Entity/SmartDietUser.cs
BusinessObjects/Entity/Subcription.cs
BusinessObjects/Entity/UserAllergy.cs
BusinessObjects/Entity/UserDishInteraction.cs
BusinessObjects/Entity/UserFeedback.cs
BusinessObjects/Entity/UserMealInteraction.cs
BusinessObjects/Entity/UserPayment.cs
BusinessObjects/Entity/UserPreference.cs
BusinessObjects/Entity/UserProfile.cs
BusinessObjects/Enum/DietType.cs
BusinessObjects/Enum/DifficultyLevel.cs
BusinessObjects/Enum/FoodCategory.cs
BusinessObjects/Enum/InteractionType.cs
BusinessObjects/Enum/MeasurementUnit.cs
BusinessObjects/Enum/NotificationType.cs
BusinessObjects/Enum/PreservationType.cs
BusinessObjects/Enum/RegionType.cs
BusinessObjects/Enum/StorageLocation.cs
BusinessObjects/Enum/SubcriptionType.cs
BusinessObjects/Exceptions/ErrorCode.cs
BusinessObjects/Exceptions/ErrorException.cs
BusinessObjects/Extensions/RegionTypeExtensions.cs
Controllers/ImportController.cs
Cores/Cores.csproj
Cores/Helpers/EnumExtensions.cs
DataAccessObjects/DataAccessObjects.csproj
DataAccessObjects/Migrations/20241120080201_init.cs
DataAccessObjects/Migrations/20241120080201_init.Designer.cs
DataAccessObjects/Migrations/20241123095001_v2.cs
DataAccessObjects/Migrations/20241123095001_v2.Designer.cs
DataAccessObjects/Migrations/20241125040247_FixNaming.cs
DataAccessObjects/Migrations/20241125040247_FixNaming.Designer.cs
DataAccessObjects/Migrations/20241127055213_fixImage.cs
DataAccessObjects/Migrations/20241127055213_fixImage.Designer.cs
DataAccessObjects/Migrations/20241127074611_fixId.cs
DataAccessObjects/Migrations/20241127074611_fixId.Designer.cs
DataAccessObjects/Migrations/20250103082959_add_meal_setting.cs
DataAccessObjects/Migrations/20250103082959_add_meal_setting.Designer.cs
DataAccessObjects/Migrations/20250108083512_fix1.cs
DataAccessObjects/Migrations/20250108083512_fix1.Designer.cs
DataAccessObjects/Migrations/20250307055722_payos.cs
DataAccessObjects/Migrations/20250307055722_payos.Designer.cs
DataAccessObjects/Migrations/20250307071022_dish-interaction.cs
DataAccessObjects/Migrations/20250307071022_dish-interaction.Designer.cs
DataAccessObjects/Migrations/20250311152527_update_payment.cs
DataAccessObjects/Migrations/20250311152527_update_payment.Designer.cs
DataAccessObjects/Migrations/SmartDietDbContextModelSnapshot.cs
DataAccessObjects/SmartDietDbContext.cs
DTOs/AuthDTOs/AuthResponse.cs
DTOs/AuthDTOs/ChangePasswordRequest.cs
DTOs/AuthDTOs/ConfirmOtpRequest.cs
DTOs/AuthDTOs/EmailRequest.cs
DTOs/AuthDTOs/LoginRequest.cs
DTOs/AuthDTOs/RefreshTokenRequest.cs
DTOs/AuthDTOs/RegisterRequest.cs
DTOs/AuthDTOs/ResetPasswordRequest.cs
DTOs/AuthDTOs/TokenGoogleRequest.cs
DTOs/DishDTOs/DishDTO.cs
DTOs/DishDTOs/DishIngredientDTO.cs
DTOs/DishDTOs/DishIngredientResponse.cs
DTOs/DishDTOs/DishResponse.cs
DTOs/DishDTOs/UserDishInteractionDTO.cs
DTOs/DishDTOs/UserDishInteractionResponse.cs
DTOs/DTOs.csproj
DTOs/ExcelDTOs/DishExcelDTO.cs
DTOs/ExcelDTOs/FoodExcelDTO.cs
DTOs/ExcelDTOs/MealExcelDTO.cs
DTOs/FavoriteDishDTOs/FavoriteDishDTO.cs
DTOs/FavoriteDishDTOs/FavoriteDishResponse.cs
DTOs/FavoriteMealDTOs/FavoriteMealDTO.cs
DTOs/FavoriteMealDTOs/FavoriteMealResponse.cs
DTOs/FoodDTOs/FoodAllergyResponse.cs
DTOs/FoodDTOs/FoodDTO.cs
DTOs/FoodDTOs/FoodResponse.cs
DTOs/FoodDTOs/NutrientCategoryResponse.cs
DTOs/FridgeDTOs/FridgeDTO.cs
DTOs/FridgeDTOs/FridgeItemDTO.cs
DTOs/FridgeDTOs/FridgeItemResponse.cs
DTOs/FridgeDTOs/FridgeRespose.cs
DTOs/MealDishDTOs/MealDishDTO.cs
DTOs/MealDishDTOs/MealDishResponse.cs
DTOs/MealDTOs/MealDishResponse.cs
DTOs/MealDTOs/MealDTO.cs
DTOs/MealDTOs/MealResponse.cs
DTOs/MealDTOs/UserMealInteractionDTO.cs
DTOs/MealDTOs/UserMealInteractionResponse.cs
DTOs/PaymentDTOs/CheckoutRequest.cs
DTOs/PaymentDTOs/ConfirmWebhookRequest.cs
DTOs/PaymentDTOs/CreatePaymentLinkRequest.cs
DTOs/PaymentDTOs/PaymentIsPaidResponse.cs
DTOs/PaymentDTOs/PaymentLinkInformationResponse.cs
DTOs/RoleDTOs/RoleResponse.cs
DTOs/SubcriptionDTOs/SubcriptionRequest.cs
DTOs/SubcriptionDTOs/SubcriptionResponse.cs
DTOs/UserAllergyDTOs/UserAllergyDTO.cs
DTOs/UserAllergyDTOs/UserAllergyResponse.cs
DTOs/UserFeedbackDTOs/UserFeedbackDTO.cs
DTOs/UserFeedbackDTOs/UserFeedbackResponse.cs
DTOs/UserPreferenceDTOs/UserPreferenceDTO.cs
DTOs/UserPreferenceDTOs/UserPreferenceResponse.cs
DTOs/UserProfileDTos/RegisterUserWithRoleRequest.cs
DTOs/UserProfileDTos/UpdateUserProfileRequest.cs
DTOs/UserProfileDTos/UserProfileDTO.cs
DTOs/UserProfileDTos/UserProfileResponse.cs
Repositories/GenericRepository.cs
Repositories/Interfaces/IGenericRepository.cs
Repositories/Interfaces/IUnitOfWork.cs
Repositories/Repositories.csproj
Repositories/UnitOfWork.cs
Services/AuthService.cs
Services/BackgroundServices/DataCleanUpService.cs
Services/CloudinaryService.cs
Services/Configs/MappingProfiles.cs
Services/Configs/SeedAccount.cs
Services/Configs/SeedData.cs
Services/Configs/ServiceConnfigure.cs
Services/DishRecommendationService.cs
Services/DishService.cs
Services/EmailSevice.cs
Services/ExcelImportService.cs
Services/FavoriteDishService.cs
Services/FavoriteMealService.cs
Services/FileHandlerService.cs
Services/FoodService.cs
Services/FridgeService.cs
Services/Interfaces/IAuthService.cs
Services/Interfaces/ICloudinaryService.cs
Services/Interfaces/IDishRecommendationService.cs
Services/Interfaces/IDishService.cs
Services/Interfaces/IEmailService.cs
Services/Interfaces/IFavoriteDishService.cs
Services/Interfaces/IFavoriteMealService.cs
Services/Interfaces/IFoodService.cs
Services/Interfaces/IFridgeService.cs
Services/Interfaces/IMealDishService.cs
Services/Interfaces/IMealRecommendationServiceV2.cs
Services/Interfaces/IMealService.cs
Services/Interfaces/IPaymentService.cs
Services/Interfaces/IRecommendationService.cs
Services/Interfaces/IRoleService.cs
Services/Interfaces/ISubcriptionService.cs
Services/Interfaces/ITokenService.cs
Services/Interfaces/IUserAllergyService.cs
Services/Interfaces/IUserDishInteractionService.cs
Services/Interfaces/IUserFeedbackService.cs
Services/Interfaces/IUserMealInteractionService.cs
Services/Interfaces/IUserPaymentService.cs
Services/Interfaces/IUserPreferenceService.cs
Services/Interfaces/IUserProfileService.cs
Services/Interfaces/IUserService.cs
Services/MealDishService.cs
Services/MealRecommendationServiceV2.cs
Services/MealService.cs
Services/PaymentService.cs
Services/RecommendationService.cs
Services/RoleService.cs
Services/Services.csproj
Services/SubcriptionService.cs
Services/TokenService.cs
Services/UserAllergyService.cs
Services/UserDishInteractionService.cs
Services/UserFeedbackService.cs
Services/UserMealInteractionService.cs
Services/UserPaymentService.cs
Services/UserPreferenceService.cs
Services/UserProfileService.cs
Services/UserService.cs
SmartDietAPI.sln
SmartDietAPI/appsettings.json
SmartDietAPI/appsettings.Production.json
SmartDietAPI/Controllers/AuthController.cs
SmartDietAPI/Controllers/DishController.cs
SmartDietAPI/Controllers/DishRecommendationController.cs
SmartDietAPI/Controllers/EnumController.cs
SmartDietAPI/Controllers/FavoriteDishController.cs
SmartDietAPI/Controllers/FavoriteMealController.cs
SmartDietAPI/Controllers/FoodController.cs
SmartDietAPI/Controllers/FridgeController.cs
SmartDietAPI/Controllers/ImportController.cs
SmartDietAPI/Controllers/MealController.cs
SmartDietAPI/Controllers/MealDishController.cs
SmartDietAPI/Controllers/MealRecommendationController.cs
SmartDietAPI/Controllers/MealRecommendationV2Controller.cs
SmartDietAPI/Controllers/PaymentController.cs
SmartDietAPI/Controllers/RoleController.cs
SmartDietAPI/Controllers/SubcriptionController.cs
SmartDietAPI/Controllers/TestDataController.cs
SmartDietAPI/Controllers/UserAllergyController.cs
SmartDietAPI/Controllers/UserDishInteractionController.cs
SmartDietAPI/Controllers/UserFeedbackController.cs
SmartDietAPI/Controllers/UserMealInteractionController.cs
SmartDietAPI/Controllers/UserPreferenceController.cs
SmartDietAPI/Controllers/UserProfileController.cs
SmartDietAPI/Controllers/UsersController.cs
SmartDietAPI/MiddleWare/ExceptionHandlingMiddleware.cs
SmartDietAPI/MiddleWare/ValidationMiddleware.cs
SmartDietAPI/Program.cs
SmartDietAPI/Properties/launchSettings.json
SmartDietAPI/SmartDietAPI.csproj
SmartDietAPI/SmartDietAPI.http
Test/Program.cs
Test/Test.csproj
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
###############################################################################
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
###############################################################################
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
# the diff markers are never inserted). Diff markers may cause the following 
# file extensions to fail to load in VS. An alternative would be to treat
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
###############################################################################
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain
</file>

<file path=".gitignore">
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd
</file>

<file path="BusinessObjects/Base/ApiResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Base
{
    public class ApiResponse<T>
    {
        public int StatusCode { get; set; }
        public string ErrorCode { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }

        // Success constructor
        public static ApiResponse<T> Success(T data, string message = "Success", int statusCode = 200)
        {
            return new ApiResponse<T>
            {
                StatusCode = statusCode,
                Message = message,
                Data = data
            };
        }

        // Error constructor
        public static ApiResponse<T> Error(string errorCode, string message, int statusCode = 500)
        {
            return new ApiResponse<T>
            {
                StatusCode = statusCode,
                ErrorCode = errorCode,
                Message = message,
            };
        }
    }
}
</file>

<file path="BusinessObjects/Base/BaseEntity.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Base
{
    public class BaseEntity
    {
        protected BaseEntity()
        {
            Id = Guid.NewGuid().ToString("N");
        }

        [Key]
        public string Id { get; set; }
        public string CreatedBy { get; set; }
        public string? LastUpdatedBy { get; set; }
        public string? DeletedBy { get; set; }

        public DateTime CreatedTime { get; set; }

        public DateTime? LastUpdatedTime { get; set; }

        public DateTime? DeletedTime { get; set; }
    }
}
</file>

<file path="BusinessObjects/Base/BasePaginatedList.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Base
{
    public class BasePaginatedList<T>
    {
        public IReadOnlyCollection<T> Items { get; private set; }

        // Total number of items
        public int TotalItems { get; private set; }

        // Current page number
        public int CurrentPage { get; private set; }

        // Total number of pages
        public int TotalPages { get; private set; }

        // Number of items per page
        public int PageSize { get; private set; }

        // Constructor to initialize the paginated list
        public BasePaginatedList(IReadOnlyCollection<T> items, int count, int pageNumber, int pageSize)
        {
            TotalItems = count;
            CurrentPage = pageNumber;
            PageSize = pageSize;
            TotalPages = (int)Math.Ceiling(count / (double)pageSize);
            Items = items;
        }

        // Check if there is a previous page
        public bool HasPreviousPage => CurrentPage > 1;

        // Check if there is a next page
        public bool HasNextPage => CurrentPage < TotalPages;
    }
}
</file>

<file path="BusinessObjects/Entity/DishIngredient.cs">
using BusinessObjects.Base;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class DishIngredient : BaseEntity
    {
        public string DishId { get; set; }
        public string FoodId { get; set; }
        public double Quantity { get; set; }
        public MeasurementUnit MeasurementUnit { get; set; }
        public Dish Dish { get; set; }
        public Food Food { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/FavoriteDish.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class FavoriteDish : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string DishId { get; set; }
        public Dish Dish { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/FavoriteMeal.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class FavoriteMeal : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string MealId { get; set; }
        public Meal Meal { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/Food.cs">
using BusinessObjects.Base;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class Food : BaseEntity
    {
        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [StringLength(500)]
        public string Description { get; set; }

        [StringLength(200)]
        public string StorageGuidelines { get; set; }

        public int? ShelfLifeRoomTemp { get; set; }

        // Average shelf life in days in refrigerator
        public int? ShelfLifeRefrigerated { get; set; }

        // Average shelf life in days in freezer
        public int? ShelfLifeFrozen { get; set; }

        public PreservationType? PreservationType { get; set; }

        public FoodCategory Category { get; set; }

        public string? Image { get; set; }

        // Navigation properties
        public ICollection<NutrientCategory> NutrientCategories { get; set; } = new List<NutrientCategory>();
        public ICollection<FoodAllergy> FoodAllergies { get; set; } = new List<FoodAllergy>();
    }
}
</file>

<file path="BusinessObjects/Entity/FoodAllergy.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class FoodAllergy : BaseEntity
    {
        public string FoodId { get; set; }
        public Food Food { get; set; }
        public string AllergenFoodId { get; set; }
        public Food AllergenFood { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/Fridge.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class Fridge : BaseEntity
    {
        [Required]
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string? FridgeModel { get; set; }
        public string? FridgeLocation { get; set; }
        public ICollection<FridgeItem>? FridgeItems { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/MealRating.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class MealRating : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string MealId { get; set; }
        public Meal Meal { get; set; }
        [Required]
        public int Rating { get; set; }
        public string FeedBack {  get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/NutrientCategory.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class NutrientCategory : BaseEntity
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public ICollection<Food> Foods { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/SmartDietUser.cs">
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class SmartDietUser : IdentityUser
    {
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public UserProfile UserProfile { get; set; }
        public UserPreference? UserPreference { get; set; }
        public ICollection<FavoriteDish>? FavoriteDishes { get; set; }
        public ICollection<FavoriteMeal>? FavoriteMeals { get; set; }
        public ICollection<UserAllergy>? UserAllergies { get; set; }
        public ICollection<Fridge>? Fridges { get; set; }
        public ICollection<MealRating>? MealRatings { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/UserAllergy.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class UserAllergy : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string FoodId { get; set; }
        public Food Food { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/UserProfile.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class UserProfile : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string FullName { get; set; }
        public string ProfilePicture { get; set; }

        [Required]
        public string TimeZone { get; set; } = "UTC";

        [StringLength(10)]
        public string PreferredLanguage { get; set; } = "en";

        public bool EnableNotifications { get; set; } = true;

        public bool EnableEmailNotifications { get; set; } = true;

        public bool EnablePushNotifications { get; set; } = false;


    }
}
</file>

<file path="BusinessObjects/Enum/DietType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum DietType
    {
        Regular,
        Vegetarian,
        Vegan,
        Pescatarian,
        Paleo,
        Keto,
        GlutenFree,
        DairyFree,
        LowCarb,
        LowFat,
        Mediterranean,
        Halal,
        Kosher
    }
}
</file>

<file path="BusinessObjects/Enum/DifficultyLevel.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum DifficultyLevel
    {
        Easy,
        Medium,
        Hard,
    }
}
</file>

<file path="BusinessObjects/Enum/FoodCategory.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum FoodCategory
    {
        Vegetables,
        Fruits,
        Meat,
        Poultry,
        Seafood,
        Dairy,
        Eggs,
        Grains,
        Bread,
        Beverages,
        Condiments,
        Snacks,
        PreparedMeals,
        Leftovers,
        Other
    }
}
</file>

<file path="BusinessObjects/Enum/NotificationType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum NotificationType
    {
        ExpirationWarning,
        LowInventory,
        MealPlanner,
        ShoppingList,
        NewRecipes,
        Tips,
        WeeklyReport
    }
}
</file>

<file path="BusinessObjects/Enum/PreservationType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum PreservationType
    {
        Refrigerated,
        Frozen,
        RoomTemperature,
        Canned
    }
}
</file>

<file path="BusinessObjects/Enum/StorageLocation.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum StorageLocation
    {
        RoomTemperature,
        Refrigerator,
        Freezer
    }
}
</file>

<file path="BusinessObjects/Exceptions/ErrorException.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace BusinessObjects.Exceptions
{
    public class ErrorException : Exception
    {
        public int StatusCode { get; }
        public ErrorDetail ErrorDetail { get; }

        public ErrorException(int statusCode, string errorCode, string message = null)
        {
            StatusCode = statusCode;
            ErrorDetail = new ErrorDetail
            {
                ErrorCode = errorCode,
                ErrorMessage = message
            };
        }
    }
    public class ErrorDetail
    {
        [JsonPropertyName("errorCode")] public string ErrorCode { get; set; }

        [JsonPropertyName("errorMessage")] public object ErrorMessage { get; set; }
    }
}
</file>

<file path="Cores/Cores.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="Cores/Helpers/EnumExtensions.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cores.Helpers
{
    public static class EnumExtensions
    {
        public static string GetStorageTemperature(this StorageLocation location)
        {
            return location switch
            {
                StorageLocation.RoomTemperature => "20-25°C / 68-77°F",
                StorageLocation.Refrigerator => "0-4°C / 32-39°F",
                StorageLocation.Freezer => "-18°C / 0°F or below",
                _ => "Unknown temperature range"
            };
        }

        public static string GetShelfLife(this StorageLocation location, FoodCategory category)
        {
            return (location, category) switch
            {
                (StorageLocation.Refrigerator, FoodCategory.Meat) => "3-5 days",
                (StorageLocation.Refrigerator, FoodCategory.Dairy) => "5-7 days",
                (StorageLocation.Freezer, FoodCategory.Meat) => "4-6 months",
                (StorageLocation.RoomTemperature, FoodCategory.Grains) => "6-12 months",
                // Add more combinations as needed
                _ => "Varies based on specific item"
            };
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241120080201_init.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ProfilePicture = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DateOfBirth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Foods",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    StorageGuidelines = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShelfLifeRoomTemp = table.Column<int>(type: "int", nullable: true),
                    ShelfLifeRefrigerated = table.Column<int>(type: "int", nullable: true),
                    ShelfLifeFrozen = table.Column<int>(type: "int", nullable: true),
                    Category = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Image = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Foods", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserProfiles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    TimeZone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredLanguage = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    EnableNotifications = table.Column<bool>(type: "bit", nullable: false),
                    EnableEmailNotifications = table.Column<bool>(type: "bit", nullable: false),
                    EnablePushNotifications = table.Column<bool>(type: "bit", nullable: false),
                    NotificationPreferredTime = table.Column<int>(type: "int", nullable: false),
                    PrimaryDietType = table.Column<int>(type: "int", nullable: false),
                    DailyMealCount = table.Column<int>(type: "int", nullable: false),
                    DailyCalorieTarget = table.Column<decimal>(type: "decimal(5,2)", nullable: true),
                    MaxCookingTime = table.Column<int>(type: "int", nullable: false),
                    MaxRecipeDifficulty = table.Column<int>(type: "int", nullable: false),
                    ShowNutritionInfo = table.Column<bool>(type: "bit", nullable: false),
                    ExpirationWarningDays = table.Column<int>(type: "int", nullable: false),
                    NotifyLowInventory = table.Column<bool>(type: "bit", nullable: false),
                    LowInventoryThreshold = table.Column<decimal>(type: "decimal(5,2)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserProfiles", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserProfiles_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FoodNutrients",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<int>(type: "int", nullable: false),
                    FoodId1 = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    NutrientCategory = table.Column<int>(type: "int", nullable: false),
                    Unit = table.Column<int>(type: "int", nullable: false),
                    ServingUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodNutrients", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodNutrients_Foods_FoodId1",
                        column: x => x.FoodId1,
                        principalTable: "Foods",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "FoodPreservation",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodPreservation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodPreservation_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserFridges",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    FoodId = table.Column<int>(type: "int", nullable: false),
                    FoodId1 = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    Unit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PurchaseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    StorageLocation = table.Column<int>(type: "int", nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserFridges", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserFridges_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_UserFridges_Foods_FoodId1",
                        column: x => x.FoodId1,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FoodNutrients_FoodId1",
                table: "FoodNutrients",
                column: "FoodId1");

            migrationBuilder.CreateIndex(
                name: "IX_FoodPreservation_FoodId",
                table: "FoodPreservation",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserFridges_FoodId1",
                table: "UserFridges",
                column: "FoodId1");

            migrationBuilder.CreateIndex(
                name: "IX_UserFridges_UserId",
                table: "UserFridges",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserProfiles_SmartDietUserId",
                table: "UserProfiles",
                column: "SmartDietUserId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "FoodNutrients");

            migrationBuilder.DropTable(
                name: "FoodPreservation");

            migrationBuilder.DropTable(
                name: "UserFridges");

            migrationBuilder.DropTable(
                name: "UserProfiles");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Foods");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241120080201_init.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20241120080201_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.FoodNutrient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NutrientCategory")
                        .HasColumnType("int");

                    b.Property<string>("ServingUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId1");

                    b.ToTable("FoodNutrients");
                });

            modelBuilder.Entity("BusinessObjects.FoodPreservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodPreservation");
                });

            modelBuilder.Entity("BusinessObjects.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.UserFridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SmartDietUserId")
                        .HasColumnType("int");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserFridges");
                });

            modelBuilder.Entity("BusinessObjects.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("DailyCalorieTarget")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("ExpirationWarningDays")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("NotificationPreferredTime")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<bool>("ShowNutritionInfo")
                        .HasColumnType("bit");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.FoodNutrient", b =>
                {
                    b.HasOne("BusinessObjects.Food", "Food")
                        .WithMany("Nutrients")
                        .HasForeignKey("FoodId1");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.FoodPreservation", b =>
                {
                    b.HasOne("BusinessObjects.Food", null)
                        .WithMany("PreservationMethods")
                        .HasForeignKey("FoodId");
                });

            modelBuilder.Entity("BusinessObjects.UserFridge", b =>
                {
                    b.HasOne("BusinessObjects.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.SmartDietUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.SmartDietUser", "SmartDietUser")
                        .WithOne("Profile")
                        .HasForeignKey("BusinessObjects.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Food", b =>
                {
                    b.Navigation("Nutrients");

                    b.Navigation("PreservationMethods");
                });

            modelBuilder.Entity("BusinessObjects.SmartDietUser", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241123095001_v2.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class v2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "FoodNutrients");

            migrationBuilder.DropTable(
                name: "FoodPreservation");

            migrationBuilder.DropTable(
                name: "UserFridges");

            migrationBuilder.DropColumn(
                name: "DailyCalorieTarget",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "DailyMealCount",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "ExpirationWarningDays",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "LowInventoryThreshold",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "MaxCookingTime",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "MaxRecipeDifficulty",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "NotificationPreferredTime",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "NotifyLowInventory",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "PrimaryDietType",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "ShowNutritionInfo",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "DateOfBirth",
                table: "AspNetUsers");

            migrationBuilder.DropColumn(
                name: "FullName",
                table: "AspNetUsers");

            migrationBuilder.DropColumn(
                name: "ProfilePicture",
                table: "AspNetUsers");

            migrationBuilder.AddColumn<string>(
                name: "FullName",
                table: "UserProfiles",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "ProfilePicture",
                table: "UserProfiles",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AlterColumn<int>(
                name: "Category",
                table: "Foods",
                type: "int",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(50)",
                oldMaxLength: 50);

            migrationBuilder.AddColumn<int>(
                name: "PreservationType",
                table: "Foods",
                type: "int",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "Dishes",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Image = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Video = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Instruction = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrepTimeMinutes = table.Column<int>(type: "int", nullable: false),
                    CookingTimeMinutes = table.Column<int>(type: "int", nullable: false),
                    RegionType = table.Column<int>(type: "int", nullable: false),
                    DietType = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dishes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FoodAllegies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    AllergenFoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodAllegies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodAllegies_Foods_AllergenFoodId",
                        column: x => x.AllergenFoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_FoodAllegies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Fridges",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<int>(type: "int", nullable: false),
                    SmartDietUserId1 = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    FridgeModel = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FridgeLocation = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fridges", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Fridges_AspNetUsers_SmartDietUserId1",
                        column: x => x.SmartDietUserId1,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Meals",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DietType = table.Column<int>(type: "int", nullable: false),
                    Image = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Meals", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NutrientCategories",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NutrientCategories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserAllegies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAllegies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAllegies_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserAllegies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserPreferences",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    PrimaryDietType = table.Column<int>(type: "int", nullable: false),
                    PrimaryRegionType = table.Column<int>(type: "int", nullable: false),
                    DailyMealCount = table.Column<int>(type: "int", nullable: false),
                    DishesPerMealCount = table.Column<int>(type: "int", nullable: false),
                    MaxCookingTime = table.Column<int>(type: "int", nullable: false),
                    MaxRecipeDifficulty = table.Column<int>(type: "int", nullable: false),
                    NotifyLowInventory = table.Column<bool>(type: "bit", nullable: false),
                    LowInventoryThreshold = table.Column<decimal>(type: "decimal(5,2)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserPreferences", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserPreferences_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DishIngredients",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DishId = table.Column<int>(type: "int", nullable: false),
                    FoodId = table.Column<int>(type: "int", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    MeasurementUnit = table.Column<int>(type: "int", nullable: false),
                    DishId1 = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId1 = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DishIngredients", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DishIngredients_Dishes_DishId1",
                        column: x => x.DishId1,
                        principalTable: "Dishes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DishIngredients_Foods_FoodId1",
                        column: x => x.FoodId1,
                        principalTable: "Foods",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "FavoriteDishes",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DishId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FavoriteDishes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FavoriteDishes_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FavoriteDishes_Dishes_DishId",
                        column: x => x.DishId,
                        principalTable: "Dishes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FridgeItems",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FridgeId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    Unit = table.Column<int>(type: "int", nullable: false),
                    PurchaseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    StorageLocation = table.Column<int>(type: "int", nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FridgeItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FridgeItems_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FridgeItems_Fridges_FridgeId",
                        column: x => x.FridgeId,
                        principalTable: "Fridges",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FavoriteMeals",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MealId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FavoriteMeals", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FavoriteMeals_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FavoriteMeals_Meals_MealId",
                        column: x => x.MealId,
                        principalTable: "Meals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MealDishes",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MealId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MealDishes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MealDishes_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MealDishes_Meals_MealId",
                        column: x => x.MealId,
                        principalTable: "Meals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MealRatings",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MealId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Rating = table.Column<int>(type: "int", nullable: false),
                    FeedBack = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MealRatings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MealRatings_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MealRatings_Meals_MealId",
                        column: x => x.MealId,
                        principalTable: "Meals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FoodNutrientCategory",
                columns: table => new
                {
                    FoodsId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    NutrientCategoriesId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodNutrientCategory", x => new { x.FoodsId, x.NutrientCategoriesId });
                    table.ForeignKey(
                        name: "FK_FoodNutrientCategory_Foods_FoodsId",
                        column: x => x.FoodsId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FoodNutrientCategory_NutrientCategories_NutrientCategoriesId",
                        column: x => x.NutrientCategoriesId,
                        principalTable: "NutrientCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_DishId1",
                table: "DishIngredients",
                column: "DishId1");

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_FoodId1",
                table: "DishIngredients",
                column: "FoodId1");

            migrationBuilder.CreateIndex(
                name: "IX_FavoriteDishes_DishId",
                table: "FavoriteDishes",
                column: "DishId");

            migrationBuilder.CreateIndex(
                name: "IX_FavoriteDishes_SmartDietUserId",
                table: "FavoriteDishes",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_FavoriteMeals_MealId",
                table: "FavoriteMeals",
                column: "MealId");

            migrationBuilder.CreateIndex(
                name: "IX_FavoriteMeals_SmartDietUserId",
                table: "FavoriteMeals",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllegies_AllergenFoodId",
                table: "FoodAllegies",
                column: "AllergenFoodId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllegies_FoodId",
                table: "FoodAllegies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodNutrientCategory_NutrientCategoriesId",
                table: "FoodNutrientCategory",
                column: "NutrientCategoriesId");

            migrationBuilder.CreateIndex(
                name: "IX_FridgeItems_FoodId",
                table: "FridgeItems",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_FridgeItems_FridgeId",
                table: "FridgeItems",
                column: "FridgeId");

            migrationBuilder.CreateIndex(
                name: "IX_Fridges_SmartDietUserId1",
                table: "Fridges",
                column: "SmartDietUserId1");

            migrationBuilder.CreateIndex(
                name: "IX_MealDishes_FoodId",
                table: "MealDishes",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_MealDishes_MealId",
                table: "MealDishes",
                column: "MealId");

            migrationBuilder.CreateIndex(
                name: "IX_MealRatings_MealId",
                table: "MealRatings",
                column: "MealId");

            migrationBuilder.CreateIndex(
                name: "IX_MealRatings_SmartDietUserId",
                table: "MealRatings",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllegies_FoodId",
                table: "UserAllegies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllegies_SmartDietUserId",
                table: "UserAllegies",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserPreferences_SmartDietUserId",
                table: "UserPreferences",
                column: "SmartDietUserId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "DishIngredients");

            migrationBuilder.DropTable(
                name: "FavoriteDishes");

            migrationBuilder.DropTable(
                name: "FavoriteMeals");

            migrationBuilder.DropTable(
                name: "FoodAllegies");

            migrationBuilder.DropTable(
                name: "FoodNutrientCategory");

            migrationBuilder.DropTable(
                name: "FridgeItems");

            migrationBuilder.DropTable(
                name: "MealDishes");

            migrationBuilder.DropTable(
                name: "MealRatings");

            migrationBuilder.DropTable(
                name: "UserAllegies");

            migrationBuilder.DropTable(
                name: "UserPreferences");

            migrationBuilder.DropTable(
                name: "Dishes");

            migrationBuilder.DropTable(
                name: "NutrientCategories");

            migrationBuilder.DropTable(
                name: "Fridges");

            migrationBuilder.DropTable(
                name: "Meals");

            migrationBuilder.DropColumn(
                name: "FullName",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "ProfilePicture",
                table: "UserProfiles");

            migrationBuilder.DropColumn(
                name: "PreservationType",
                table: "Foods");

            migrationBuilder.AddColumn<decimal>(
                name: "DailyCalorieTarget",
                table: "UserProfiles",
                type: "decimal(5,2)",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "DailyMealCount",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "ExpirationWarningDays",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<decimal>(
                name: "LowInventoryThreshold",
                table: "UserProfiles",
                type: "decimal(5,2)",
                nullable: false,
                defaultValue: 0m);

            migrationBuilder.AddColumn<int>(
                name: "MaxCookingTime",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "MaxRecipeDifficulty",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "NotificationPreferredTime",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<bool>(
                name: "NotifyLowInventory",
                table: "UserProfiles",
                type: "bit",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<int>(
                name: "PrimaryDietType",
                table: "UserProfiles",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<bool>(
                name: "ShowNutritionInfo",
                table: "UserProfiles",
                type: "bit",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AlterColumn<string>(
                name: "Category",
                table: "Foods",
                type: "nvarchar(50)",
                maxLength: 50,
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.AddColumn<DateTime>(
                name: "DateOfBirth",
                table: "AspNetUsers",
                type: "datetime2",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            migrationBuilder.AddColumn<string>(
                name: "FullName",
                table: "AspNetUsers",
                type: "nvarchar(100)",
                maxLength: 100,
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "ProfilePicture",
                table: "AspNetUsers",
                type: "nvarchar(200)",
                maxLength: 200,
                nullable: false,
                defaultValue: "");

            migrationBuilder.CreateTable(
                name: "FoodNutrients",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId1 = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    FoodId = table.Column<int>(type: "int", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    NutrientCategory = table.Column<int>(type: "int", nullable: false),
                    ServingUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Unit = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodNutrients", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodNutrients_Foods_FoodId1",
                        column: x => x.FoodId1,
                        principalTable: "Foods",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "FoodPreservation",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodPreservation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodPreservation_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserFridges",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId1 = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    FoodId = table.Column<int>(type: "int", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    Notes = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PurchaseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    SmartDietUserId = table.Column<int>(type: "int", nullable: false),
                    StorageLocation = table.Column<int>(type: "int", nullable: false),
                    Unit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserFridges", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserFridges_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_UserFridges_Foods_FoodId1",
                        column: x => x.FoodId1,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_FoodNutrients_FoodId1",
                table: "FoodNutrients",
                column: "FoodId1");

            migrationBuilder.CreateIndex(
                name: "IX_FoodPreservation_FoodId",
                table: "FoodPreservation",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserFridges_FoodId1",
                table: "UserFridges",
                column: "FoodId1");

            migrationBuilder.CreateIndex(
                name: "IX_UserFridges_UserId",
                table: "UserFridges",
                column: "UserId");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241123095001_v2.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20241123095001_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("DishId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId1");

                    b.HasIndex("FoodId1");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllegy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllegies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SmartDietUserId")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId1");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllegy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllegies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId1");

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllegy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllegies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId1");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllegy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllegies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllegies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllegies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241125040247_FixNaming.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class FixNaming : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_MealDishes_Foods_FoodId",
                table: "MealDishes");

            migrationBuilder.DropTable(
                name: "FoodAllegies");

            migrationBuilder.DropTable(
                name: "UserAllegies");

            migrationBuilder.RenameColumn(
                name: "FoodId",
                table: "MealDishes",
                newName: "DishId");

            migrationBuilder.RenameIndex(
                name: "IX_MealDishes_FoodId",
                table: "MealDishes",
                newName: "IX_MealDishes_DishId");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "UserProfiles",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "UserProfiles",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "UserProfiles",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "UserPreferences",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "UserPreferences",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "UserPreferences",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "NutrientCategories",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "NutrientCategories",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "NutrientCategories",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "Meals",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "Meals",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "Meals",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "MealRatings",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "MealRatings",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "MealRatings",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "MealDishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "MealDishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "MealDishes",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "Fridges",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "Fridges",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "Fridges",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "FridgeItems",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "FridgeItems",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "FridgeItems",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "Foods",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "Foods",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "Foods",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "FavoriteMeals",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "FavoriteMeals",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "FavoriteMeals",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "FavoriteDishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "FavoriteDishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "FavoriteDishes",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "DishIngredients",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "DishIngredients",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "DishIngredients",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.AlterColumn<DateTime>(
                name: "LastUpdatedTime",
                table: "Dishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "DeletedTime",
                table: "Dishes",
                type: "datetime2",
                nullable: true,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTime>(
                name: "CreatedTime",
                table: "Dishes",
                type: "datetime2",
                nullable: false,
                oldClrType: typeof(DateTimeOffset),
                oldType: "datetimeoffset");

            migrationBuilder.CreateTable(
                name: "FoodAllergies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    AllergenFoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodAllergies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodAllergies_Foods_AllergenFoodId",
                        column: x => x.AllergenFoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_FoodAllergies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "UserAllergies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAllergies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAllergies_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserAllergies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllergies_AllergenFoodId",
                table: "FoodAllergies",
                column: "AllergenFoodId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllergies_FoodId",
                table: "FoodAllergies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllergies_FoodId",
                table: "UserAllergies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllergies_SmartDietUserId",
                table: "UserAllergies",
                column: "SmartDietUserId");

            migrationBuilder.AddForeignKey(
                name: "FK_MealDishes_Dishes_DishId",
                table: "MealDishes",
                column: "DishId",
                principalTable: "Dishes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_MealDishes_Dishes_DishId",
                table: "MealDishes");

            migrationBuilder.DropTable(
                name: "FoodAllergies");

            migrationBuilder.DropTable(
                name: "UserAllergies");

            migrationBuilder.RenameColumn(
                name: "DishId",
                table: "MealDishes",
                newName: "FoodId");

            migrationBuilder.RenameIndex(
                name: "IX_MealDishes_DishId",
                table: "MealDishes",
                newName: "IX_MealDishes_FoodId");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "UserProfiles",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "UserProfiles",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "UserProfiles",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "UserPreferences",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "UserPreferences",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "UserPreferences",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "NutrientCategories",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "NutrientCategories",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "NutrientCategories",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "Meals",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "Meals",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "Meals",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "MealRatings",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "MealRatings",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "MealRatings",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "MealDishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "MealDishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "MealDishes",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "Fridges",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "Fridges",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "Fridges",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "FridgeItems",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "FridgeItems",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "FridgeItems",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "Foods",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "Foods",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "Foods",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "FavoriteMeals",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "FavoriteMeals",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "FavoriteMeals",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "FavoriteDishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "FavoriteDishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "FavoriteDishes",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "DishIngredients",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "DishIngredients",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "DishIngredients",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "LastUpdatedTime",
                table: "Dishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "DeletedTime",
                table: "Dishes",
                type: "datetimeoffset",
                nullable: true,
                oldClrType: typeof(DateTime),
                oldType: "datetime2",
                oldNullable: true);

            migrationBuilder.AlterColumn<DateTimeOffset>(
                name: "CreatedTime",
                table: "Dishes",
                type: "datetimeoffset",
                nullable: false,
                oldClrType: typeof(DateTime),
                oldType: "datetime2");

            migrationBuilder.CreateTable(
                name: "FoodAllegies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    AllergenFoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodAllegies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodAllegies_Foods_AllergenFoodId",
                        column: x => x.AllergenFoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FoodAllegies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserAllegies",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FoodId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastUpdatedTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAllegies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAllegies_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserAllegies_Foods_FoodId",
                        column: x => x.FoodId,
                        principalTable: "Foods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllegies_AllergenFoodId",
                table: "FoodAllegies",
                column: "AllergenFoodId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodAllegies_FoodId",
                table: "FoodAllegies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllegies_FoodId",
                table: "UserAllegies",
                column: "FoodId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAllegies_SmartDietUserId",
                table: "UserAllegies",
                column: "SmartDietUserId");

            migrationBuilder.AddForeignKey(
                name: "FK_MealDishes_Foods_FoodId",
                table: "MealDishes",
                column: "FoodId",
                principalTable: "Foods",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241125040247_FixNaming.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20241125040247_FixNaming")]
    partial class FixNaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("DishId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId1");

                    b.HasIndex("FoodId1");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SmartDietUserId")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId1");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId1");

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId1");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241127055213_fixImage.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class fixImage : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Image",
                table: "Foods",
                type: "nvarchar(max)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Image",
                table: "Foods",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(max)",
                oldNullable: true);
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241127055213_fixImage.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20241127055213_fixImage")]
    partial class fixImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("DishId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId1");

                    b.HasIndex("FoodId1");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SmartDietUserId")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId1");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId1");

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId1");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241127074611_fixId.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class fixId : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_DishIngredients_Dishes_DishId1",
                table: "DishIngredients");

            migrationBuilder.DropForeignKey(
                name: "FK_DishIngredients_Foods_FoodId1",
                table: "DishIngredients");

            migrationBuilder.DropForeignKey(
                name: "FK_Fridges_AspNetUsers_SmartDietUserId1",
                table: "Fridges");

            migrationBuilder.DropIndex(
                name: "IX_Fridges_SmartDietUserId1",
                table: "Fridges");

            migrationBuilder.DropIndex(
                name: "IX_DishIngredients_DishId1",
                table: "DishIngredients");

            migrationBuilder.DropIndex(
                name: "IX_DishIngredients_FoodId1",
                table: "DishIngredients");

            migrationBuilder.DropColumn(
                name: "SmartDietUserId1",
                table: "Fridges");

            migrationBuilder.DropColumn(
                name: "DishId1",
                table: "DishIngredients");

            migrationBuilder.DropColumn(
                name: "FoodId1",
                table: "DishIngredients");

            migrationBuilder.AlterColumn<string>(
                name: "SmartDietUserId",
                table: "Fridges",
                type: "nvarchar(450)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.AlterColumn<string>(
                name: "FoodId",
                table: "DishIngredients",
                type: "nvarchar(450)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.AlterColumn<string>(
                name: "DishId",
                table: "DishIngredients",
                type: "nvarchar(450)",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.CreateIndex(
                name: "IX_Fridges_SmartDietUserId",
                table: "Fridges",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_DishId",
                table: "DishIngredients",
                column: "DishId");

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_FoodId",
                table: "DishIngredients",
                column: "FoodId");

            migrationBuilder.AddForeignKey(
                name: "FK_DishIngredients_Dishes_DishId",
                table: "DishIngredients",
                column: "DishId",
                principalTable: "Dishes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_DishIngredients_Foods_FoodId",
                table: "DishIngredients",
                column: "FoodId",
                principalTable: "Foods",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Fridges_AspNetUsers_SmartDietUserId",
                table: "Fridges",
                column: "SmartDietUserId",
                principalTable: "AspNetUsers",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_DishIngredients_Dishes_DishId",
                table: "DishIngredients");

            migrationBuilder.DropForeignKey(
                name: "FK_DishIngredients_Foods_FoodId",
                table: "DishIngredients");

            migrationBuilder.DropForeignKey(
                name: "FK_Fridges_AspNetUsers_SmartDietUserId",
                table: "Fridges");

            migrationBuilder.DropIndex(
                name: "IX_Fridges_SmartDietUserId",
                table: "Fridges");

            migrationBuilder.DropIndex(
                name: "IX_DishIngredients_DishId",
                table: "DishIngredients");

            migrationBuilder.DropIndex(
                name: "IX_DishIngredients_FoodId",
                table: "DishIngredients");

            migrationBuilder.AlterColumn<int>(
                name: "SmartDietUserId",
                table: "Fridges",
                type: "int",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AddColumn<string>(
                name: "SmartDietUserId1",
                table: "Fridges",
                type: "nvarchar(450)",
                nullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "FoodId",
                table: "DishIngredients",
                type: "int",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AlterColumn<int>(
                name: "DishId",
                table: "DishIngredients",
                type: "int",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AddColumn<string>(
                name: "DishId1",
                table: "DishIngredients",
                type: "nvarchar(450)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "FoodId1",
                table: "DishIngredients",
                type: "nvarchar(450)",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_Fridges_SmartDietUserId1",
                table: "Fridges",
                column: "SmartDietUserId1");

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_DishId1",
                table: "DishIngredients",
                column: "DishId1");

            migrationBuilder.CreateIndex(
                name: "IX_DishIngredients_FoodId1",
                table: "DishIngredients",
                column: "FoodId1");

            migrationBuilder.AddForeignKey(
                name: "FK_DishIngredients_Dishes_DishId1",
                table: "DishIngredients",
                column: "DishId1",
                principalTable: "Dishes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_DishIngredients_Foods_FoodId1",
                table: "DishIngredients",
                column: "FoodId1",
                principalTable: "Foods",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Fridges_AspNetUsers_SmartDietUserId1",
                table: "Fridges",
                column: "SmartDietUserId1",
                principalTable: "AspNetUsers",
                principalColumn: "Id");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20241127074611_fixId.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20241127074611_fixId")]
    partial class fixId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DTOs/DishDTOs/DishIngredientDTO.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class DishIngredientDTO
    {
        public string FoodId { get; set; }
        public double Quantity { get; set; }
    }
}
</file>

<file path="DTOs/DishDTOs/DishIngredientResponse.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class DishIngredientResponse
    {
        public string FoodId { get; set; }
        public string FoodName { get; set; }
        public double Quantity { get; set; }
        public MeasurementUnit MeasurementUnit { get; set; }
    }
}
</file>

<file path="DTOs/DTOs.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="DTOs/FoodDTOs/FoodAllergyResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FoodDTOs
{
    public class FoodAllergyResponse
    {
        public string AllergenFoodId { get; set; }
        public string AllergenFoodName { get; set; }
    }
}
</file>

<file path="DTOs/FoodDTOs/FoodDTO.cs">
using BusinessObjects.FixedData;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FoodDTOs
{
    public class FoodDTO
    {
        public string Name { get; set; }

        [StringLength(500)]
        public string Description { get; set; }

        [StringLength(200)]
        public string StorageGuidelines { get; set; }

        public int? ShelfLifeRoomTemp { get; set; }

        // Average shelf life in days in refrigerator
        public int? ShelfLifeRefrigerated { get; set; }

        // Average shelf life in days in freezer
        public int? ShelfLifeFrozen { get; set; }

        public PreservationType? PreservationType { get; set; }

        public FoodCategory Category { get; set; }

        public IFormFile? Image { get; set; }

        public List<string>? AllergenFoodIds { get; set; }
    }
}
</file>

<file path="DTOs/FoodDTOs/FoodResponse.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FoodDTOs
{
    public class FoodResponse
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public string StorageGuidelines { get; set; }

        public int? ShelfLifeRoomTemp { get; set; }

        // Average shelf life in days in refrigerator
        public int? ShelfLifeRefrigerated { get; set; }

        // Average shelf life in days in freezer
        public int? ShelfLifeFrozen { get; set; }

        public PreservationType? PreservationType { get; set; }

        public FoodCategory Category { get; set; }

        public string? Image { get; set; }

        // Navigation properties
        public ICollection<NutrientCategoryResponse> NutrientCategories { get; set; } = new List<NutrientCategoryResponse>();
        public ICollection<FoodAllergyResponse> FoodAllergies { get; set; } = new List<FoodAllergyResponse>();

        public DateTime CreatedTime { get; set; }

        public DateTime? LastUpdatedTime { get; set; }

        public DateTime? DeletedTime { get; set; }
    }
}
</file>

<file path="DTOs/FoodDTOs/NutrientCategoryResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FoodDTOs
{
    public class NutrientCategoryResponse
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }
}
</file>

<file path="DTOs/FridgeDTOs/FridgeRespose.cs">
using BusinessObjects.Entity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FridgeDTOs
{
    public class FridgeRespose
    {
        public string Id { get; set; }
        public string? FridgeModel { get; set; }
        public string? FridgeLocation { get; set; }
    }
}
</file>

<file path="DTOs/MealDTOs/MealDishResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.MealDTOs
{
    public class MealDishResponse
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Image {  get; set; }
    }
}
</file>

<file path="DTOs/MealDTOs/MealDTO.cs">
using BusinessObjects.FixedData;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.MealDTOs
{
    public class MealDTO
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public DietType DietType { get; set; }
        public IFormFile? Image { get; set; }
        public List<string> DishIds { get; set; }
    }
}
</file>

<file path="Repositories/Interfaces/IUnitOfWork.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Interfaces
{
    public interface IUnitOfWork : IDisposable
    {
        IGenericRepository<T> Repository<T>() where T : BaseEntity;
        Task<int> SaveChangeAsync();
    }
}
</file>

<file path="Repositories/Repositories.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
    <ProjectReference Include="..\DataAccessObjects\DataAccessObjects.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="Repositories/UnitOfWork.cs">
using BusinessObjects.Base;
using DataAccessObjects;
using Repositories.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly SmartDietDbContext _context;
        private readonly Dictionary<Type, object> _repositories;

        public UnitOfWork(SmartDietDbContext context)
        {
            _context = context;
            _repositories = new Dictionary<Type, object>();
        }

        public void Dispose()
        {
            _context.Dispose();
        }

        public IGenericRepository<T> Repository<T>() where T : BaseEntity
        {
            if (_repositories.ContainsKey(typeof(T)))
            {
                return (IGenericRepository<T>)_repositories[typeof(T)];
            }
            var repository = new GenericRepository<T>(_context);
            _repositories.Add(typeof(T), repository);
            return repository;
        }

        public async Task<int> SaveChangeAsync()
        {
            return await _context.SaveChangesAsync();
        }
    }
}
</file>

<file path="Services/BackgroundServices/DataCleanUpService.cs">
//using BusinessObjects.Base;
//using BusinessObjects.Entity;
//using DataAccessObjects;
//using Microsoft.Extensions.Configuration;
//using Microsoft.Extensions.DependencyInjection;
//using Microsoft.Extensions.Hosting;
//using Microsoft.Extensions.Logging;
//using Repositories.Interfaces;
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;


//namespace Services.BackgroundServices
//{
//    public class DataCleanUpService : BackgroundService
//    {
//        private readonly IServiceProvider _serviceProvider;
//        private readonly IConfiguration _configuration;
//        private readonly ILogger<BackgroundService> _logger;
//        public DataCleanUpService(IServiceProvider serviceProvider, IConfiguration configuration, ILogger<BackgroundService> logger)
//        {
//            _serviceProvider = serviceProvider;
//            _configuration = configuration;
//            _logger = logger;
//        }

//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
//        {
//            while (!stoppingToken.IsCancellationRequested)
//            {
//                try
//                {
//                    _logger.LogInformation("Data cleanup service is starting");
//                    await CleanupOldDataAsync();
//                }
//                catch (Exception ex)
//                {
//                    // Log exception (replace with your logging framework)
//                    _logger.LogError($"Data cleanup failed: {ex.Message}");
//                }

//                // Run daily
//                await Task.Delay(TimeSpan.FromDays(1), stoppingToken);
//            }
//        }

//        private async Task CleanupOldDataAsync()
//        {
//            using (var scope = _serviceProvider.CreateScope())
//            {
//                var unitOfWork = scope.ServiceProvider.GetRequiredService<IUnitOfWork>();

//                // Get cleanup threshold
//                int daysThreshold = _configuration.GetValue<int>("DataCleanup:DaysThreshold");
//                var cutoffDate = DateTime.UtcNow.AddDays(-daysThreshold);

//                // List of entity types to clean up
//                var entityTypes = new[]
//                {
//                    typeof(Food),
//                    typeof(Meal),
//                    typeof(Dish)
//                };

//                foreach (var entityType in entityTypes)
//                {
//                    var repositoryType = typeof(IGenericRepository<BaseEntity>).MakeGenericType(entityType);
//                    dynamic repository = scope.ServiceProvider.GetRequiredService(repositoryType);
//                    // Find item to delete
//                    var itemsToDelete = await repository.FindAsync(x => x.DeletedTime <= cutoffDate);
//                    // Delete Items
//                    if (itemsToDelete.Any())
//                    {
//                        _logger.LogInformation($"{itemsToDelete.Count()} items deleted from database");
//                        repository.DeleteRangeAsync(itemsToDelete);
//                    }
//                }
//                await unitOfWork.SaveChangeAsync();
//            }
//        }
//    }
//}
</file>

<file path="Services/EmailSevice.cs">
using MailKit.Net.Smtp;
using Microsoft.Extensions.Configuration;
using MimeKit;
using Org.BouncyCastle.Utilities;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class EmailSevice : IEmailService
    {
        private readonly IConfiguration _configuration;
        public EmailSevice(IConfiguration configuration)
        {
            _configuration = configuration;
        }
        public async Task SendEmailAsync(string sendTo, string subject, string body)
        {
            var email = new MimeMessage();
            email.From.Add(new MailboxAddress("Smart Diet", _configuration["MailSettings:Mail"]));
            email.To.Add(new MailboxAddress("Member", sendTo));
            email.Subject = subject;
            var bodybuilder = new BodyBuilder()
            {
                HtmlBody = body
            };
            email.Body = bodybuilder.ToMessageBody();
            var smtp = new SmtpClient();
            try
            {
                await smtp.ConnectAsync(
                    _configuration["MailSettings:Host"],
                    int.Parse( _configuration["MailSettings:Port"]!),
                    MailKit.Security.SecureSocketOptions.StartTls);

                await smtp.AuthenticateAsync(
                    _configuration["MailSettings:Mail"], 
                    _configuration["MailSettings:Password"]);
                
                await smtp.SendAsync(email);
            }
            finally
            {
                await smtp.DisconnectAsync(true);
                 smtp.Dispose();
            }
        }
    }
}
</file>

<file path="Services/Interfaces/IAuthService.cs">
using DTOs.AuthDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IAuthService
    {
        Task<AuthResponse> Login(LoginRequest request);
        Task<AuthResponse> RefreshToken(RefreshTokenRequest request);
        Task Register(RegisterRequest request);
        Task ChangePassword(ChangePasswordRequest request);
        Task ResetPassword(ResetPasswordRequest request);
        Task ForgotPassword(EmailRequest request);
        Task<AuthResponse> LoginGoogle(TokenGoogleRequest request);
        Task VerifyOtp(ConfirmOtpRequest request, bool isResetPassword);
        Task ResendConfirmationEmail(EmailRequest request);


    }
}
</file>

<file path="Services/Interfaces/IEmailService.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IEmailService
    {
        Task SendEmailAsync(string sendTo, string subject, string body);
    }
}
</file>

<file path="Services/Interfaces/IFavoriteDishService.cs">
using BusinessObjects.Base;
using DTOs.FavoriteDishDTOs;

namespace Services.Interfaces
{
    public interface IFavoriteDishService
    {
        Task<FavoriteDishResponse> GetFavoriteDishByIdAsync(string id);
        Task<IEnumerable<FavoriteDishResponse>> GetAllFavoriteDishesAsync();
        Task<BasePaginatedList<FavoriteDishResponse>> GetAllFavoriteDishesAsync(int pageIndex, int pageSize, string? searchTerm);
        Task CreateFavoriteDishAsync(FavoriteDishDTO favoriteDishDTO);
        Task UpdateFavoriteDishAsync(string favoriteDishId, FavoriteDishDTO favoriteDishDTO);
        Task DeleteFavoriteDishAsync(string favoriteDishId);
    }

}
</file>

<file path="Services/Interfaces/IFavoriteMealService.cs">
using BusinessObjects.Base;
using DTOs.FavoriteMealDTOs;

namespace Services.Interfaces
{
    public interface IFavoriteMealService
    {
        Task<FavoriteMealResponse> GetFavoriteMealByIdAsync(string id);
        Task<IEnumerable<FavoriteMealResponse>> GetAllFavoriteMealsAsync();
        Task<BasePaginatedList<FavoriteMealResponse>> GetAllFavoriteMealsAsync(int pageIndex, int pageSize, string? searchTerm);
        Task CreateFavoriteMealAsync(FavoriteMealDTO favoriteMeal);
        Task UpdateFavoriteMealAsync(string favoriteMealId, FavoriteMealDTO favoriteMealDTO);
        Task DeleteFavoriteMealAsync(string favoriteMealId);
    }

}
</file>

<file path="Services/Services.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="9.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
    <ProjectReference Include="..\DTOs\DTOs.csproj" />
    <ProjectReference Include="..\Repositories\Repositories.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="SmartDietAPI/MiddleWare/ExceptionHandlingMiddleware.cs">
using BusinessObjects.Exceptions;

namespace SmartDietAPI.MiddleWare
{
    public class ExceptionHandlingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }
        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (ErrorException ex)
            {
                _logger.LogError(ex, ex.Message);
                await HandleExceptionAsync(context, ex);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                await HandleGeneralExceptionAsync(context, ex);
            }
        }
        private static Task HandleExceptionAsync(HttpContext context, ErrorException ex
            )
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = ex.StatusCode;
            var result = System.Text.Json.JsonSerializer.Serialize(ex.ErrorDetail);
            return context.Response.WriteAsync(result);
        }
        private static Task HandleGeneralExceptionAsync(HttpContext context, Exception ex)
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = StatusCodes.Status500InternalServerError;
            var result = System.Text.Json.JsonSerializer.Serialize(new { error = ex.Message });
            return context.Response.WriteAsync(result);
        }
    }
}
</file>

<file path="SmartDietAPI/Properties/launchSettings.json">
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:13822",
      "sslPort": 44301
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7095;http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
</file>

<file path="SmartDietAPI/SmartDietAPI.http">
@SmartDietAPI_HostAddress = http://localhost:5282

GET {{SmartDietAPI_HostAddress}}/weatherforecast/
Accept: application/json

###
</file>

<file path="BusinessObjects/Base/ColumnAttribute.cs">
namespace BusinessObjects.Base
{
    [AttributeUsage(AttributeTargets.Property)]
    public class ColumnAttribute : Attribute
    {
        public int Index { get; }

        public ColumnAttribute(int index)
        {
            Index = index;
        }
    }
}
</file>

<file path="BusinessObjects/Base/DishRecommendationSettings.cs">
public class DishRecommendationSettings
{
    public PointsConfig Points { get; set; }
    public int MaxDishesToRecommend { get; set; } = 5;
    public int DaysToExcludeRecentlyRecommended { get; set; }

    public class PointsConfig
    {
        public int DishRatingPerStar { get; set; }
        public int LikedDish { get; set; }
        public int DislikedDish { get; set; }
        public int NewDish { get; set; }
        public double SeasonalBonus { get; set; } // Điểm cộng thêm cho món theo mùa
    }
}
</file>

<file path="BusinessObjects/Base/ExcelImportResult.cs">
namespace BusinessObjects.Base
{
    public class ExcelImportResult<T>
    {
        public int TotalProcessed { get; set; }
        public int SuccessCount { get; set; }
        public List<ExcelImportError> Errors { get; set; } = new();
    }

    public class ExcelImportError
    {
        public int RowNumber { get; set; }
        public string RowData { get; set; }
        public string ErrorMessage { get; set; }
    }
}
</file>

<file path="BusinessObjects/Base/MealRecommendationSettings.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Base
{
    public class MealRecommendationSettings
    {
        public PointsConfig Points { get; set; }
        public int MaxMealsPerCategory { get; set; }
        public int DaysToExcludeRecentlyRecommended { get; set; }

        public class PointsConfig
        {
            public int MealRatingPerStar { get; set; }
            public int LikedMeal { get; set; }
            public int DislikedMeal { get; set; }
            public double FavoriteDishPerDish { get; set; }
            public int NewMeal { get; set; }
        }
    }
}
</file>

<file path="BusinessObjects/Entity/Dish.cs">
using BusinessObjects.Base;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class Dish : BaseEntity
    {
        public string Name { get; set; }
        public string? Description { get; set; }
        public string? Image { get; set; }
        public string? Video { get; set; }
        public string Instruction { get; set; }
        public int PrepTimeMinutes { get; set; }
        public int CookingTimeMinutes { get; set; }
        public DifficultyLevel Difficulty { get; set; }
        public RegionType RegionType { get; set; }
        public DietType? DietType { get; set; }

        public ICollection<FavoriteDish>? FavoriteDishes { get; set; }
        public ICollection<DishIngredient> DishIngredients { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/DishRating.cs">
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class DishRating : BaseEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public string Id { get; set; }

        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string DishId { get; set; }
        public Dish Dish { get; set; }
        public int Rating { get; set; } // 1-5 stars
        public string? Comment { get; set; }
        public DateTime RatingDate { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/DishRecommendHistory.cs">
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class DishRecommendHistory : BaseEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public string Id { get; set; }

        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }

        public string DishId { get; set; }
        public Dish Dish { get; set; }

        public DateTime RecommendationDate { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/FridgeItem.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.FixedData;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class FridgeItem : BaseEntity
    {
        [Required]
        public string FridgeId { get; set; }
        public Fridge Fridge { get; set; }


        [Required]
        public string FoodId { get; set; }
        public Food Food { get; set; }

        [Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "decimal(10,2)")]
        public decimal Quantity { get; set; }

        public MeasurementUnit Unit { get; set; }  // e.g., grams, pieces, packages

        [Required]
        public DateTime? PurchaseDate { get; set; }

        [Required]
        public DateTime? ExpirationDate { get; set; }

        [Required]
        public StorageLocation StorageLocation { get; set; }

        [StringLength(100)]
        public string Notes { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/Meal.cs">
using BusinessObjects.Base;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class Meal : BaseEntity
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public DietType DietType { get; set; }
        public string? Image { get; set; }
        public double AverageRating { get; set; } = 0;
        public ICollection<FavoriteMeal>? FavoriteMeals { get; set; }
        public ICollection<MealDish> MealDishes { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/MealDish.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class MealDish : BaseEntity
    {
        public string MealId { get; set; }
        public Meal Meal { get; set; }
        public string DishId { get; set; }
        public Dish Dish { get; set; }
        public int? ServingSize;
    }
}
</file>

<file path="BusinessObjects/Entity/MealRecommendationHistory.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class MealRecommendationHistory : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string MealId { get; set; }
        public Meal Meal { get; set; }
        public DateTime RecommendationDate { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/UserDishInteraction.cs">
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Enum;

public class UserDishInteraction : BaseEntity
{
    public string SmartDietUserId { get; set; }
    public SmartDietUser SmartDietUser { get; set; }
    public string DishId { get; set; }
    public Dish Dish { get; set; }
    public InteractionType InteractionType { get; set; }
    public DateTime InteractionDate { get; set; }
}
</file>

<file path="BusinessObjects/Entity/UserMealInteraction.cs">
using BusinessObjects.Base;
using BusinessObjects.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class UserMealInteraction : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        public string MealId { get; set; }
        public Meal Meal { get; set; }
        public InteractionType InteractionType { get; set; }
        public DateTime LastInteractionTime { get; set; }
    }
}
</file>

<file path="BusinessObjects/Entity/UserPreference.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.Base;

namespace BusinessObjects.Entity
{
    public class UserPreference : BaseEntity
    {
        public string SmartDietUserId { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
        // Dietary Preferences
        [Required]
        public DietType PrimaryDietType { get; set; } = DietType.Regular;

        [Required]
        public RegionType PrimaryRegionType { get; set; }
        [Required]
        public int DailyMealCount { get; set; } = 3;
        public int DishesPerMealCount { get; set; } = 3;

        // Cooking Preferences
        [Range(0, 180)]
        public int MaxCookingTime { get; set; } = 60;

        public DifficultyLevel MaxRecipeDifficulty { get; set; } = DifficultyLevel.Medium;

        public bool NotifyLowInventory { get; set; } = true;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "decimal(5,2)")]
        public decimal LowInventoryThreshold { get; set; } = 20.0m; // Percentage

    }
}
</file>

<file path="BusinessObjects/Enum/InteractionType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Enum
{
    public enum InteractionType
    {
        Tried,
        Liked,
        Disliked
    }
}
</file>

<file path="BusinessObjects/Enum/MeasurementUnit.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    public enum MeasurementUnit
    {
        // Weight
        Gram,
        //Kilogram,
        //Milligram,
        //Pound,
        //Ounce,

        // Volume
        Milliliter,
        Liter,
        FluidOunce,
        Cup,
        Pint,
        Quart,
        Gallon,

        // Count
        Piece,
        //Dozen,
        //Package,
        //Serving
    }
}
</file>

<file path="BusinessObjects/Enum/SubcriptionType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Enum
{
    public enum SubcriptionType
    {
        Bronze,
        Gold,
        Premium
    }
}
</file>

<file path="BusinessObjects/Exceptions/ErrorCode.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Exceptions
{
    public class ErrorCode
    {
        public const string NOT_FOUND = "Not found!";
        public const string SUCCESS = "Success!";
        public const string FAILED = "Failed!";
        public const string EXISTED = "Existed!";
        public const string DUPLICATE = "Duplicate!";
        public const string INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR";
        public const string INVALID_INPUT = "Invalid input!";
        public const string UNAUTHORIZED = "Unauthorized!";
        public const string BADREQUEST = "Bad request!";
        public const string CONFLICT = "Conflict";
        public const string FORBIDDEN = "Forbiden";
    }
}
</file>

<file path="BusinessObjects/Extensions/RegionTypeExtensions.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;

public static class RegionTypeExtensions
{
    public static RegionType CombineRegionTypes(this IEnumerable<RegionType> regionTypes)
    {
        RegionType combined = RegionType.None;
        foreach (var type in regionTypes)
        {
            combined |= type;
        }
        return combined;
    }

    public static List<RegionType> SplitRegionTypes(this RegionType combinedType)
    {
        return Enum.GetValues(typeof(RegionType))
            .Cast<RegionType>()
            .Where(r => r != RegionType.None && combinedType.HasFlag(r))
            .ToList();
    }
}
</file>

<file path="Controllers/ImportController.cs">

</file>

<file path="DataAccessObjects/DataAccessObjects.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="DataAccessObjects/Migrations/20250103082959_add_meal_setting.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class add_meal_setting : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "MealRecommendationHistories",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MealId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RecommendationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MealRecommendationHistories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MealRecommendationHistories_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MealRecommendationHistories_Meals_MealId",
                        column: x => x.MealId,
                        principalTable: "Meals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserMealInteractions",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MealId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    InteractionType = table.Column<int>(type: "int", nullable: false),
                    LastInteractionTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserMealInteractions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserMealInteractions_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserMealInteractions_Meals_MealId",
                        column: x => x.MealId,
                        principalTable: "Meals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_MealRecommendationHistories_MealId",
                table: "MealRecommendationHistories",
                column: "MealId");

            migrationBuilder.CreateIndex(
                name: "IX_MealRecommendationHistories_SmartDietUserId",
                table: "MealRecommendationHistories",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserMealInteractions_MealId",
                table: "UserMealInteractions",
                column: "MealId");

            migrationBuilder.CreateIndex(
                name: "IX_UserMealInteractions_SmartDietUserId",
                table: "UserMealInteractions",
                column: "SmartDietUserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "MealRecommendationHistories");

            migrationBuilder.DropTable(
                name: "UserMealInteractions");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250103082959_add_meal_setting.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20250103082959_add_meal_setting")]
    partial class add_meal_setting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250108083512_fix1.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class fix1 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<double>(
                name: "AverageRating",
                table: "Meals",
                type: "float",
                nullable: false,
                defaultValue: 0.0);

            migrationBuilder.AddColumn<int>(
                name: "Difficulty",
                table: "Dishes",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "AverageRating",
                table: "Meals");

            migrationBuilder.DropColumn(
                name: "Difficulty",
                table: "Dishes");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250108083512_fix1.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20250108083512_fix1")]
    partial class fix1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250307055722_payos.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class payos : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "DishRecommendHistories",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DishId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RecommendationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DishRecommendHistories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DishRecommendHistories_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DishRecommendHistories_Dishes_DishId",
                        column: x => x.DishId,
                        principalTable: "Dishes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Subcriptions",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Amount = table.Column<float>(type: "real", nullable: false),
                    SubscriptionType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MonthOfSubcription = table.Column<int>(type: "int", nullable: false),
                    SubscriptionStatus = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Subcriptions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserFeedbacks",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    StarRating = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    FeedbackDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserFeedbacks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserFeedbacks_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserPayments",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<float>(type: "real", nullable: false),
                    PaymentMethod = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PaymentDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PaymentStatus = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserPayments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserPayments_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_DishRecommendHistories_DishId",
                table: "DishRecommendHistories",
                column: "DishId");

            migrationBuilder.CreateIndex(
                name: "IX_DishRecommendHistories_SmartDietUserId",
                table: "DishRecommendHistories",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserFeedbacks_SmartDietUserId",
                table: "UserFeedbacks",
                column: "SmartDietUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserPayments_SmartDietUserId",
                table: "UserPayments",
                column: "SmartDietUserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "DishRecommendHistories");

            migrationBuilder.DropTable(
                name: "Subcriptions");

            migrationBuilder.DropTable(
                name: "UserFeedbacks");

            migrationBuilder.DropTable(
                name: "UserPayments");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250307055722_payos.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20250307055722_payos")]
    partial class payos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("DishRecommendHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.Subcription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthOfSubcription")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250307071022_dish-interaction.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class dishinteraction : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "UserDishInteractions",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    SmartDietUserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    DishId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    InteractionType = table.Column<int>(type: "int", nullable: false),
                    InteractionDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdatedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeletedTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserDishInteractions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserDishInteractions_AspNetUsers_SmartDietUserId",
                        column: x => x.SmartDietUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserDishInteractions_Dishes_DishId",
                        column: x => x.DishId,
                        principalTable: "Dishes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_UserDishInteractions_DishId",
                table: "UserDishInteractions",
                column: "DishId");

            migrationBuilder.CreateIndex(
                name: "IX_UserDishInteractions_SmartDietUserId",
                table: "UserDishInteractions",
                column: "SmartDietUserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "UserDishInteractions");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250307071022_dish-interaction.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20250307071022_dish-interaction")]
    partial class dishinteraction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("DishRecommendHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.Subcription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthOfSubcription")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserDishInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250311152527_update_payment.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessObjects.Migrations
{
    /// <inheritdoc />
    public partial class update_payment : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "SubcriptionId",
                table: "UserPayments",
                type: "nvarchar(450)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.CreateIndex(
                name: "IX_UserPayments_SubcriptionId",
                table: "UserPayments",
                column: "SubcriptionId");

            migrationBuilder.AddForeignKey(
                name: "FK_UserPayments_Subcriptions_SubcriptionId",
                table: "UserPayments",
                column: "SubcriptionId",
                principalTable: "Subcriptions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UserPayments_Subcriptions_SubcriptionId",
                table: "UserPayments");

            migrationBuilder.DropIndex(
                name: "IX_UserPayments_SubcriptionId",
                table: "UserPayments");

            migrationBuilder.DropColumn(
                name: "SubcriptionId",
                table: "UserPayments");
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/20250311152527_update_payment.Designer.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    [Migration("20250311152527_update_payment")]
    partial class update_payment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("DishRecommendHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.Subcription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthOfSubcription")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubcriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.HasIndex("SubcriptionId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserDishInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Subcription", "Subcription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");

                    b.Navigation("Subcription");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DTOs/AuthDTOs/ConfirmOtpRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class ConfirmOtpRequest
    {
        public  string? Email { get; set; }
        public  string? OTP { get; set; }
    }
}
</file>

<file path="DTOs/AuthDTOs/EmailRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class EmailRequest
   {
        public string? Email { get; set; }
    }
}
</file>

<file path="DTOs/AuthDTOs/RefreshTokenRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class RefreshTokenRequest
    {
        public string? refreshToken { get; set; }
    }
}
</file>

<file path="DTOs/AuthDTOs/TokenGoogleRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class TokenGoogleRequest
    {
        public string? token { get; set; }
    }
}
</file>

<file path="DTOs/DishDTOs/DishDTO.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class DishDTO
    {
        [Required]
        public string Name { get; set; }
        public string? Description { get; set; }
        public IFormFile? Image { get; set; }
        public string? ImageUrl { get; set; }
        public IFormFile? Video { get; set; }
        [Required]
        public string Instruction { get; set; }
        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Prep time must be a positive number")]
        public int PrepTimeMinutes { get; set; }
        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Cooking time must be a positive number")]
        public int CookingTimeMinutes { get; set; }
        public RegionType RegionType { get; set; }
        public DietType? DietType { get; set; }
        public DifficultyLevel Difficulty { get; set; }
        public List<DishIngredientDTO> DishIngredients { get; set; } = new();
    }
}
</file>

<file path="DTOs/DishDTOs/DishResponse.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class DishResponse
    {
        public string Id {  get; set; }
        public string Name { get; set; }
        public string? Description { get; set; }
        public string? Image { get; set; }
        public string? Video { get; set; }
        public string Instruction { get; set; }
        public int PrepTimeMinutes { get; set; }
        public int CookingTimeMinutes { get; set; }
        public RegionType RegionType { get; set; }
        public DietType? DietType { get; set; }
        public DifficultyLevel Difficulty { get; set; }
        public ICollection<DishIngredientResponse> DishIngredients { get; set; } = new List<DishIngredientResponse>();
        public DateTime CreatedTime { get; set; }

        public DateTime? LastUpdatedTime { get; set; }

        public DateTime? DeletedTime { get; set; }
    }
}
</file>

<file path="DTOs/DishDTOs/UserDishInteractionDTO.cs">
using BusinessObjects.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class UserDishInteractionDTO
    {
        public string DishId { get; set; }
        public InteractionType InteractionType { get; set; }
    }
}
</file>

<file path="DTOs/DishDTOs/UserDishInteractionResponse.cs">
using BusinessObjects.Enum;
using DTOs.MealDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.DishDTOs
{
    public class UserDishInteractionResponse
    {
        public string Id { get; set; }
        public DishResponse Dish { get; set; }
        public InteractionType InteractionType { get; set; }
        public DateTime InteractionDate { get; set; }
    }
}
</file>

<file path="DTOs/ExcelDTOs/MealExcelDTO.cs">
using BusinessObjects.Base;

namespace DTOs.ExcelDTOs
{
    public class MealExcelDTO
    {
        [Column(1)] // Column A
        public string Name { get; set; }

        [Column(4)] // Column D
        public string Description { get; set; }

        [Column(9)] // Column I
        public string Image { get; set; }
    }
}
</file>

<file path="DTOs/FavoriteDishDTOs/FavoriteDishDTO.cs">
namespace DTOs.FavoriteDishDTOs
{
    public class FavoriteDishDTO
    {
        public string DishId { get; set; }
    }
}
</file>

<file path="DTOs/FavoriteDishDTOs/FavoriteDishResponse.cs">
namespace DTOs.FavoriteDishDTOs
{
    public class FavoriteDishResponse
    {
        public string Id { get; set; }
        public string DishId { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
    }
}
</file>

<file path="DTOs/FavoriteMealDTOs/FavoriteMealDTO.cs">
namespace DTOs.FavoriteMealDTOs
{
    public class FavoriteMealDTO
    {
        public string MealId { get; set; }
    }
}
</file>

<file path="DTOs/FavoriteMealDTOs/FavoriteMealResponse.cs">
namespace DTOs.FavoriteMealDTOs
{
    public class FavoriteMealResponse
    {
        public string Id { get; set; }
        public string MealId { get; set; }
        public string Name { get; set; }
        public string Image {  get; set; }
    }

}
</file>

<file path="DTOs/FridgeDTOs/FridgeDTO.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FridgeDTOs
{
    public class FridgeDTO
    {
        public string? FridgeModel {  get; set; }
        public string? FridgeLocation { get; set; }
    }
}
</file>

<file path="DTOs/FridgeDTOs/FridgeItemDTO.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FridgeDTOs
{
    public class FridgeItemDTO
    {
        public string FoodId { get; set; }
        public decimal Quantity { get; set; }
        public DateTime? PurchaseDate { get; set; }
        public DateTime? ExpirationDate { get; set; }
        public StorageLocation StorageLocation { get; set; }
        public string Notes { get; set; }
    }
}
</file>

<file path="DTOs/FridgeDTOs/FridgeItemResponse.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.FridgeDTOs
{
    public class FridgeItemResponse
    {
        public string Id { get; set; }
        public string FoodId { get; set; }
        public string? Image {  get; set; }
        public string Name { get; set; }
        public decimal Quantity { get; set; }
        public string Unit { get; set; }
        public DateTime? PurchaseDate { get; set; }
        public DateTime? ExpirationDate { get; set; }
        public StorageLocation StorageLocation { get; set; }
        public string? Notes { get; set; }
    }
}
</file>

<file path="DTOs/MealDishDTOs/MealDishDTO.cs">
namespace DTOs.MealDishDTOs
{
    public class MealDishDTO
    {
        public string MealId { get; set; }
        public string DishId { get; set; }
        public int? ServingSize { get; set; }
    }
}
</file>

<file path="DTOs/MealDishDTOs/MealDishResponse.cs">
namespace DTOs.MealDishDTOs
{
    public class MealDishResponse
    {
        public string Id { get; set; }
        public string MealId { get; set; }
        public string DishId { get; set; }
        public int? ServingSize { get; set; }
    }
}
</file>

<file path="DTOs/MealDTOs/MealResponse.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.MealDTOs
{
    public class MealResponse
    {
        public string Id { get; set; }
        public string Name {  get; set; }
        public string Description { get; set; }
        public DietType DietType { get; set; }
        public string? Image { get; set; }
        public ICollection<MealDishResponse> MealDishes { get; set; }

    }
}
</file>

<file path="DTOs/MealDTOs/UserMealInteractionDTO.cs">
using BusinessObjects.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.MealDTOs
{
    public class UserMealInteractionDTO
    {
        public string MealId { get; set; }
        public InteractionType InteractionType { get; set; }
    }
}
</file>

<file path="DTOs/MealDTOs/UserMealInteractionResponse.cs">
using BusinessObjects.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.MealDTOs
{
    public class UserMealInteractionResponse
    {
        public string Id { get; set; }
        public MealResponse Meal { get; set; }
        public InteractionType InteractionType { get; set; }
        public DateTime LastInteractionTime { get; set; }
    }
}
</file>

<file path="DTOs/PaymentDTOs/CheckoutRequest.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.PaymentDTOs
{
    public class CheckOutRequest
    {
        public string Name {  get; set; }
        public int Quantity { get; set; }

        public int Price { get; set; }
    }
}
</file>

<file path="DTOs/PaymentDTOs/ConfirmWebhookRequest.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.PaymentDTOs
{
    public class ConfirmWebhookRequest
    {
       public string webhook_url { get; set; }
    }
}
</file>

<file path="DTOs/PaymentDTOs/PaymentIsPaidResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.PaymentDTOs
{
    public class PaymentIsPaidResponse
    {
        public string Name { get; set; }
        public string? Description { get; set; }
        public string? SubscriptionId { get; set; }
        public string? SmartDietUserId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }
}
</file>

<file path="DTOs/PaymentDTOs/PaymentLinkInformationResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.PaymentDTOs
{
    public class PaymentLinkInformationResponse
    {
       public string paymentLinkInformation { get; set; }
    }
}
</file>

<file path="DTOs/SubcriptionDTOs/SubcriptionRequest.cs">
using BusinessObjects.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.SubcriptionDTOs
{
    public class SubcriptionRequest
    {
        public string Name { get; set; }
        public string? Description { get; set; }
        public float Amount { get; set; }
        public SubcriptionType? SubscriptionType { get; set; } 
        public int MonthOfSubcription { get; set; }
        public string? SubscriptionStatus { get; set; }
    }
}
</file>

<file path="DTOs/UserAllergyDTOs/UserAllergyDTO.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserAllergyDTOs
{
    public class UserAllergyDTO
    {
        public string FoodId {  get; set; }
    }
}
</file>

<file path="DTOs/UserAllergyDTOs/UserAllergyResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserAllergyDTOs
{
    public class UserAllergyResponse
    {
        public string Id { get; set; }
        public string FoodId { get; set; }
        public string FoodName { get; set;}
    }
}
</file>

<file path="DTOs/UserProfileDTos/UserProfileDTO.cs">
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserProfileDTos
{
    public class UserProfileDTO
    {
        public string FullName { get; set; }
        public IFormFile ProfilePicture { get; set; }
        public string TimeZone { get; set; } = "UTC";
        public string PreferredLanguage { get; set; } = "en";
        public bool EnableNotifications { get; set; } = true;
        public bool EnableEmailNotifications { get; set; } = true;
        public bool EnablePushNotifications { get; set; } = false;
    }
}
</file>

<file path="Services/CloudinaryService.cs">
using BusinessObjects.Exceptions;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class CloudinaryService : ICloudinaryService
    {
        private readonly Cloudinary _cloudinary;
        public CloudinaryService(IConfiguration configuration)
        {
            var cloudinaryConfig = configuration.GetSection("Cloudinary");
            var account = new Account(
                cloudinaryConfig["CloudName"],
                cloudinaryConfig["ApiKey"],
                cloudinaryConfig["ApiSecret"]
            );
            _cloudinary = new Cloudinary(account);
        }

        public async Task<string> UploadImageAsync(IFormFile file)
        {
            if (file.Length == 0) throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Error!!! File empty");

            // Chuyển đổi IFormFile sang một MemoryStream để upload lên Cloudinary
            using var stream = file.OpenReadStream();
            var uploadParams = new ImageUploadParams()
            {
                File = new FileDescription(file.FileName, stream),
                Transformation = new Transformation().Quality(80).Crop("limit")
            };
            var uploadResult = await _cloudinary.UploadAsync(uploadParams);

            return uploadResult.SecureUrl.AbsoluteUri;
        }
        public async Task DeleteImageAsync(string publicId)
        {
            var deletionParams = new DeletionParams(publicId);
            var result = _cloudinary.Destroy(deletionParams); 

            if (result.Result != "ok")
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Error!!! Can't delete");
            }
        }

        public async Task<string> UploadImageFromStreamAsync(Stream imageStream, string fileName)
        {
            if (imageStream == null || imageStream.Length == 0)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Error!!! Image stream is empty or null");
            }

            try
            {
                var uploadParams = new ImageUploadParams()
                {
                    File = new FileDescription(fileName, imageStream),
                    Transformation = new Transformation().Quality(80).Crop("limit")
                };
                
                var uploadResult = await _cloudinary.UploadAsync(uploadParams);
                
                if (uploadResult == null || uploadResult.SecureUrl == null)
                {
                    throw new ErrorException(StatusCodes.Status500InternalServerError, "Error!!! Failed to upload image to Cloudinary");
                }
                
                return uploadResult.SecureUrl.AbsoluteUri;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, $"Error uploading image: {ex.Message}");
            }
        }

        public async Task<string> UploadImageFromUrlAsync(string imageUrl)
        {
            if (string.IsNullOrEmpty(imageUrl))
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Error!!! Image URL is empty or null");
            }

            try
            {
                // Tải ảnh từ URL
                using var httpClient = new HttpClient();
                var response = await httpClient.GetAsync(imageUrl);
                response.EnsureSuccessStatusCode();
                
                var imageStream = await response.Content.ReadAsStreamAsync();
                
                // Lấy tên file từ URL hoặc sử dụng tên mặc định
                string fileName = "image.jpg";
                if (Uri.TryCreate(imageUrl, UriKind.Absolute, out Uri uri))
                {
                    var pathSegments = uri.Segments;
                    if (pathSegments.Length > 0)
                    {
                        var lastSegment = pathSegments.Last();
                        if (!string.IsNullOrEmpty(lastSegment) && !lastSegment.EndsWith("/"))
                        {
                            fileName = lastSegment;
                        }
                    }
                }
                
                // Sử dụng hàm upload từ stream đã tạo
                return await UploadImageFromStreamAsync(imageStream, fileName);
            }
            catch (HttpRequestException ex)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, $"Error downloading image from URL: {ex.Message}");
            }
        }

        public async Task<string> UploadImageFromGoogleDriveAsync(string googleDriveUrl)
        {
            if (string.IsNullOrEmpty(googleDriveUrl))
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Error!!! Google Drive URL is empty or null");
            }

            try
            {
                // Trích xuất ID file từ URL Google Drive
                string fileId = ExtractGoogleDriveFileId(googleDriveUrl);
                if (string.IsNullOrEmpty(fileId))
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Invalid Google Drive URL format");
                }

                // Tạo URL trực tiếp để tải file từ Google Drive
                string directDownloadUrl = $"https://drive.google.com/uc?export=download&id={fileId}";
                
                // Log URL trực tiếp để debug
                Console.WriteLine($"Attempting to download from direct URL: {directDownloadUrl}");

                // Tải ảnh từ URL trực tiếp
                using var httpClient = new HttpClient();
                // Đặt User-Agent để tránh bị chặn
                httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36");
                
                var response = await httpClient.GetAsync(directDownloadUrl);
                Console.WriteLine($"Response status: {response.StatusCode}");
                response.EnsureSuccessStatusCode();
                
                var imageStream = await response.Content.ReadAsStreamAsync();
                Console.WriteLine($"Stream length: {imageStream.Length}");
                
                // Tạo tên file từ ID Google Drive
                string fileName = $"{fileId}.jpg";
                
                // Sử dụng hàm upload từ stream đã tạo
                return await UploadImageFromStreamAsync(imageStream, fileName);
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"HTTP Request Error: {ex.Message}");
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, $"Error downloading image from Google Drive: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"General Error: {ex.Message}");
                throw new ErrorException(StatusCodes.Status500InternalServerError, $"Error processing Google Drive image: {ex.Message}");
            }
        }

        private string ExtractGoogleDriveFileId(string googleDriveUrl)
        {
            // Xử lý URL dạng https://drive.google.com/file/d/FILE_ID/view
            if (googleDriveUrl.Contains("/file/d/"))
            {
                int startIndex = googleDriveUrl.IndexOf("/file/d/") + 8;
                int endIndex = googleDriveUrl.IndexOf("/", startIndex);
                if (endIndex == -1)
                {
                    // Nếu không có ký tự / ở cuối, lấy đến hết URL
                    return googleDriveUrl.Substring(startIndex);
                }
                else
                {
                    return googleDriveUrl.Substring(startIndex, endIndex - startIndex);
                }
            }
            // Xử lý URL dạng https://drive.google.com/open?id=FILE_ID
            else if (googleDriveUrl.Contains("?id="))
            {
                int startIndex = googleDriveUrl.IndexOf("?id=") + 4;
                int endIndex = googleDriveUrl.IndexOf("&", startIndex);
                if (endIndex == -1)
                {
                    return googleDriveUrl.Substring(startIndex);
                }
                else
                {
                    return googleDriveUrl.Substring(startIndex, endIndex - startIndex);
                }
            }
            return null;
        }
    }
}
</file>

<file path="Services/FileHandlerService.cs">
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Hosting;


public interface IFileHandlerService
{
    Task<string> SaveUploadedFileAsync(IFormFile file, string fileName);
}

public class FileHandlerService : IFileHandlerService
{
    private readonly IWebHostEnvironment _env;

    public FileHandlerService(IWebHostEnvironment env)
    {
        _env = env;
    }

    public async Task<string> SaveUploadedFileAsync(IFormFile file, string fileName)
    {
        var dataPath = Path.Combine(_env.ContentRootPath, "Data");
        Directory.CreateDirectory(dataPath);
        
        var filePath = Path.Combine(dataPath, fileName);
        
        if (System.IO.File.Exists(filePath))
            System.IO.File.Delete(filePath);

        using var stream = new FileStream(filePath, FileMode.Create);
        await file.CopyToAsync(stream);
        
        return filePath;
    }
}
</file>

<file path="Services/Interfaces/ICloudinaryService.cs">
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface ICloudinaryService
    {
        Task<string> UploadImageAsync(IFormFile file);
        Task DeleteImageAsync(string publicId);
        
        Task<string> UploadImageFromStreamAsync(Stream imageStream, string fileName);
        
        Task<string> UploadImageFromUrlAsync(string imageUrl);
        Task<string> UploadImageFromGoogleDriveAsync(string googleDriveUrl);
    }
}
</file>

<file path="Services/Interfaces/IDishRecommendationService.cs">
using DTOs.DishDTOs;

public interface IDishRecommendationService
{
    Task<IEnumerable<DishResponse>> GenerateRecommendationsAsync();
    Task<IEnumerable<DishResponse>> RegenerateRecommendationsAsync();
    Task<IEnumerable<DishResponse>> GetRecommendedDishesAsync();
    Task<IEnumerable<DishResponse>> GetRecommendationHistoryAsync();
}
</file>

<file path="Services/Interfaces/IDishService.cs">
using BusinessObjects.Base;
using DTOs.DishDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IDishService
    {
        Task<IEnumerable<DishResponse>> GetAllDishesAsync();
        Task<DishResponse> GetDishByIdAsync(string dishId);
        Task<BasePaginatedList<DishResponse>> GetAllDishesAsync(int pageIndex, int pageSize, string? searchTerm);
        Task CreateDishAsync(DishDTO dishDTO, List<DishIngredientDTO> dishIngredientDTOs);
        Task UpdateDishAsync(string dishId, DishDTO dishDTO);
        Task DeleteDishAsync(string dishId);
    }
}
</file>

<file path="Services/Interfaces/IFoodService.cs">
using BusinessObjects.Base;
using BusinessObjects.Entity;
using DTOs.FoodDTOs;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IFoodService
    {
        Task<FoodResponse> GetDeletedFoodByIdAsync(string id);
        Task<IEnumerable<FoodResponse>> GetDeletedFoodsAsync();
        Task<IEnumerable<FoodResponse>> GetAllFoodsAsync();
        Task<BasePaginatedList<FoodResponse>> GetAllFoodsAsync(int pageIndex, int pageSize, string? searchTerm);
        Task<FoodResponse> GetFoodByIdAsync(string id);
        Task CreateFoodAsync(FoodDTO food);
        Task UpdateFoodAsync(string foodId, FoodDTO foodDTO);
        Task DeleteFoodAsync(string foodId);
    }
}
</file>

<file path="Services/Interfaces/IFridgeService.cs">
using DTOs.FridgeDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IFridgeService
    {
        Task<FridgeRespose> GetFridgeByIdAsync(string id);
        Task<IEnumerable<FridgeRespose>> GetAllUserFrige();
        Task<IEnumerable<FridgeItemResponse>> GetAllItemsInFridge(string id);
        Task<FridgeItemResponse> GetItemById(string id);
        Task CreateFridgeAsync(FridgeDTO fridgeDTO);
        Task UpdateFridgeAsync(string id, FridgeDTO fridgeDTO);
        Task DeleteFridgeAsync(string id);
        Task AddItemsToFridge(string fridgeId, List<FridgeItemDTO> fridgeItemDTOs);
        Task UpdateItemInFridge(string itemId, FridgeItemDTO fridgeItemDTO);
        Task RemoveItemsFromFridge(string fridgeId, string itemId);
    }
}
</file>

<file path="Services/Interfaces/IMealDishService.cs">
using DTOs.MealDishDTOs;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IMealDishService
    {
        Task<IEnumerable<MealDishResponse>> CreateMealDishesAsync(IEnumerable<MealDishDTO> mealDishDTOs);
        Task DeleteMealDishAsync(string mealDishId);
        Task<IEnumerable<MealDishResponse>> GetMealDishesByMealIdAsync(string mealId);
    }
}
</file>

<file path="Services/Interfaces/IMealRecommendationServiceV2.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Enum;
using BusinessObjects.Exceptions;
using DTOs.MealDTOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Repositories.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IMealRecommendationServiceV2
    {
        Task<IEnumerable<MealResponse>> GenerateRecommendationsAsync();
        Task<IEnumerable<MealResponse>> RegenerateRecommendationsAsync();
        Task<IEnumerable<MealResponse>> GetRecommendedMealsAsync();
        Task<IEnumerable<MealResponse>> GetRecommendationHistoryAsync();
    }
}
</file>

<file path="Services/Interfaces/IMealService.cs">
using BusinessObjects.Base;
using DTOs.MealDTOs;
using DTOs.MealDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IMealService
    {
        Task<IEnumerable<MealResponse>> GetAllMealsAsync();
        Task<BasePaginatedList<MealResponse>> GetAllMealsAsync(int pageIndex, int pageSize, string? searchTerm);
        Task<MealResponse> GetMealByIdAsync(string id);
        Task CreateMealAsync(MealDTO Meal);
        Task UpdateMealAsync(string id, MealDTO foodDTO);
        Task DeleteMealAsync(string id);
    }
}
</file>

<file path="Services/Interfaces/IRoleService.cs">
using DTOs.RoleDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IRoleService
    {
        Task<List<RoleResponse>> GetRoles();
    }
}
</file>

<file path="Services/Interfaces/ISubcriptionService.cs">
using BusinessObjects.Base;
using DTOs.DishDTOs;
using DTOs.SubcriptionDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface ISubcriptionService
    {
        Task<IEnumerable<SubcriptionResponse>> GetAllSubcriptionAsync();
        Task<SubcriptionResponse> GetSubcriptionByIdAsync(string Id);
        Task CreateSubcriptionAsync(SubcriptionRequest request);
        Task UpdateSubcriptionAsync(string Id, SubcriptionRequest request);
        Task DeleteSubcriptionAsync(string Id);
    }
}
</file>

<file path="Services/Interfaces/ITokenService.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface ITokenService
    {
        string GetUserIdFromToken();
    }
}
</file>

<file path="Services/Interfaces/IUserFeedbackService.cs">
using BusinessObjects.Entity;
using DTOs.UserFeedbackDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserFeedbackService
    {
        Task CreateUserFeedbackAsync(UserFeedbackDTO userFeedbackDTO);
        Task DeleteUserFeedbackAsync(string id);
        Task<IEnumerable<UserFeedbackResponse>> GetUserFeedbackBySmartDietUserIdAsync(string id);
        Task<IEnumerable<UserFeedbackResponse>> GetAllUserFeedbackAsync();
    }
}
</file>

<file path="Services/Interfaces/IUserPaymentService.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserPaymentService
    {
    }
}
</file>

<file path="Services/Interfaces/IUserProfileService.cs">
using DTOs.UserProfileDTos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserProfileService
    {
        Task CreateUserProfileAsync(UserProfileDTO userProfileDTO);
        Task<UserProfileResponse> GetUserProfileAsync();
        Task UpdateUserProfileAsync(UserProfileDTO userProfileDTO);
    }
}
</file>

<file path="Services/Interfaces/IUserService.cs">
using BusinessObjects.Base;
using DTOs.UserProfileDTos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserService
    {
        Task UpdateUserProfiles(UpdateUserProfileRequest input);
        Task AddUserWithRoleAsync(RegisterUserWithRoleRequest request);
        Task<BasePaginatedList<UserProfileResponse>> GetAllUserProfileAsync(int pageIndex, int pageSize, string? searchTerm);
        Task<IEnumerable<UserProfileResponse>> GetAllUserProfile();
        Task<UserProfileResponse> GetUserProfile();
        Task DeleteUser(string userId);

    }
}
</file>

<file path="Services/MealDishService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.MealDishDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Services
{
    public class MealDishService : IMealDishService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public MealDishService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task<IEnumerable<MealDishResponse>> CreateMealDishesAsync(IEnumerable<MealDishDTO> mealDishDTOs)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var mealDishes = new List<MealDish>();

                foreach (var mealDishDTO in mealDishDTOs)
                {
                    // Check if MealDish already exists
                    var existingMealDish = await _unitOfWork.Repository<MealDish>().FirstOrDefaultAsync(x => x.MealId == mealDishDTO.MealId && x.DishId == mealDishDTO.DishId);
                    if (existingMealDish != null)
                    {
                        throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, $"MealDish with MealId {mealDishDTO.MealId} and DishId {mealDishDTO.DishId} already exists");
                    }

                    // Create map
                    var mealDish = _mapper.Map<MealDish>(mealDishDTO);

                    // Set create time and user
                    mealDish.CreatedTime = DateTime.UtcNow;
                    mealDish.CreatedBy = userId;

                    mealDishes.Add(mealDish);
                }

                // Save MealDishes to the database
                await _unitOfWork.Repository<MealDish>().AddRangeAsync(mealDishes);
                await _unitOfWork.SaveChangeAsync();

                return mealDishes.Select(md => new MealDishResponse
                {
                    Id = md.Id,
                    MealId = md.MealId,
                    DishId = md.DishId,
                    ServingSize = md.ServingSize
                });
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteMealDishAsync(string mealDishId)
        {
            try
            {
                // Retrieve existing MealDish
                var existingMealDish = await _unitOfWork.Repository<MealDish>().GetByIdAsync(mealDishId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "MealDish does not exist!");

                // Hard delete MealDish from the database
                _unitOfWork.Repository<MealDish>().DeleteAsync(existingMealDish);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<MealDishResponse>> GetMealDishesByMealIdAsync(string mealId)
        {
            try
            {
                var mealDishes = await _unitOfWork.Repository<MealDish>().FindAsync(
                    x => x.MealId == mealId,
                    include: query => query.Include(x => x.Dish),
                    orderBy: query => query.OrderByDescending(x => x.CreatedTime)
                );

                return mealDishes.Select(md => new MealDishResponse
                {
                    Id = md.Id,
                    MealId = md.MealId,
                    DishId = md.DishId,
                    ServingSize = md.ServingSize
                });
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/SubcriptionService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.DishDTOs;
using DTOs.MealDTOs;
using DTOs.SubcriptionDTOs;
using DTOs.UserAllergyDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class SubcriptionService : ISubcriptionService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public SubcriptionService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateSubcriptionAsync(SubcriptionRequest request)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var existingSubcription = await _unitOfWork.Repository<Subcription>().FirstOrDefaultAsync(x => x.Name == request.Name);
                if (existingSubcription != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Subcription name already exists");
                }
                var subcription = _mapper.Map<Subcription>(request);
                subcription.CreatedTime = DateTime.UtcNow;
                subcription.CreatedBy = userId;

                await _unitOfWork.Repository<Subcription>().AddAsync(subcription);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteSubcriptionAsync(string Id)
        {
            try
            {
                var subcription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(Id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subcription does not exist!");

                // Check if meal is favorited

                subcription.DeletedTime = DateTime.UtcNow;
                subcription.DeletedBy = _tokenService.GetUserIdFromToken();

                await _unitOfWork.Repository<Subcription>().UpdateAsync(subcription);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<SubcriptionResponse>> GetAllSubcriptionAsync()
        {
            try
            {
                var subcriptions = await _unitOfWork.Repository<Subcription>().GetAllAsync();

                return _mapper.Map<IEnumerable<SubcriptionResponse>>(subcriptions);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<SubcriptionResponse> GetSubcriptionByIdAsync(string Id)
        {
            try
            {
                var subcription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(Id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subcription does not exist!");

                return _mapper.Map<SubcriptionResponse>(subcription);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateSubcriptionAsync(string Id, SubcriptionRequest request)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existingSubcription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(Id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subcription does not exist!");

                var existingName = await _unitOfWork.Repository<Subcription>().FirstOrDefaultAsync(x => x.Name == request.Name && x.Id != Id);
                if (existingName != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Subcription name already exists");
                }

                _mapper.Map(request, existingSubcription);

                existingSubcription.LastUpdatedTime = DateTime.UtcNow;
                existingSubcription.LastUpdatedBy = userId;

                await _unitOfWork.Repository<Subcription>().UpdateAsync(existingSubcription);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

    }
}
</file>

<file path="Services/TokenService.cs">
using BusinessObjects.Exceptions;
using Microsoft.AspNetCore.Http;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class TokenService : ITokenService
    {
        private readonly IHttpContextAccessor _httpContextAccessor;
        public TokenService(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }
        public string GetUserIdFromToken()
        {
            // Get the Authorization header from the HTTP context
            var authorizationHeader = _httpContextAccessor.HttpContext.Request.Headers["Authorization"].ToString();

            if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith("Bearer "))
            {
                throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "Authorization token is missing or invalid");
            }

            // Extract the JWT from the header
            var token = authorizationHeader.Substring("Bearer ".Length).Trim();

            // Decode the JWT to retrieve the claims
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            // Extract the userId claim
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "nameid")?.Value;

            if (string.IsNullOrEmpty(userIdClaim))
            {
                throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "User ID not found in token");
            }

            return userIdClaim;
        }
    }
}
</file>

<file path="Services/UserPaymentService.cs">
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserPaymentService : IUserPaymentService
    {
        public UserPaymentService() { }

    }
}
</file>

<file path="Services/UserProfileService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.UserProfileDTos;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class UserProfileService : IUserProfileService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ICloudinaryService _cloudinaryService;
        private readonly ITokenService _tokenService;

        public UserProfileService(
            IUnitOfWork unitOfWork,
            IMapper mapper,
            ICloudinaryService cloudinaryService,
            ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _cloudinaryService = cloudinaryService;
            _tokenService = tokenService;
        }

        public async Task CreateUserProfileAsync(UserProfileDTO userProfileDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if the user profile already exists
                var existingProfile = await _unitOfWork.Repository<UserProfile>().FirstOrDefaultAsync(
                    x => x.SmartDietUserId == userId);

                if (existingProfile != null)
                {
                    throw new ErrorException(
                        StatusCodes.Status400BadRequest,
                        ErrorCode.BADREQUEST,
                        "User profile already exists!");
                }

                // Map DTO to entity
                var userProfile = _mapper.Map<UserProfile>(userProfileDTO);
                userProfile.SmartDietUserId = userId;

                // Process profile picture
                if (userProfileDTO.ProfilePicture != null)
                {
                    userProfile.ProfilePicture = await _cloudinaryService.UploadImageAsync(userProfileDTO.ProfilePicture);
                }

                // Set created time and user
                userProfile.CreatedTime = DateTime.UtcNow;
                userProfile.CreatedBy = userId;

                // Save to database
                await _unitOfWork.Repository<UserProfile>().AddAsync(userProfile);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserProfileResponse> GetUserProfileAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var userProfile = await _unitOfWork.Repository<UserProfile>().FirstOrDefaultAsync(x => x.SmartDietUserId == userId)
                                  ?? throw new ErrorException(
                                      StatusCodes.Status404NotFound,
                                      ErrorCode.NOT_FOUND,
                                      "User profile not found!");

                return _mapper.Map<UserProfileResponse>(userProfile);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateUserProfileAsync(UserProfileDTO userProfileDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Retrieve existing profile
                var existingProfile = await _unitOfWork.Repository<UserProfile>().FirstOrDefaultAsync(x => x.SmartDietUserId == userId)
                                      ?? throw new ErrorException(
                                          StatusCodes.Status404NotFound,
                                          ErrorCode.NOT_FOUND,
                                          "User profile not found!");

                // Ensure the user is updating their own profile
                if (existingProfile.SmartDietUserId != userId)
                {
                    throw new ErrorException(
                        StatusCodes.Status403Forbidden,
                        ErrorCode.FORBIDDEN,
                        "You are not authorized to update this profile!");
                }

                // Retrieve old image URL
                var oldImageUrl = existingProfile.ProfilePicture;

                // Map DTO to entity
                _mapper.Map(userProfileDTO, existingProfile);

                // Process profile picture
                if (userProfileDTO.ProfilePicture != null)
                {
                    // Upload new image
                    existingProfile.ProfilePicture = await _cloudinaryService.UploadImageAsync(userProfileDTO.ProfilePicture);

                    // Delete old image if it exists
                    if (!string.IsNullOrEmpty(oldImageUrl))
                    {
                        var publicId = oldImageUrl.Split('/').Last().Split('.')[0];
                        await _cloudinaryService.DeleteImageAsync(publicId);
                    }
                }
                else
                {
                    // Keep old image
                    existingProfile.ProfilePicture = oldImageUrl;
                }

                // Set last updated time and user
                existingProfile.LastUpdatedTime = DateTime.UtcNow;
                existingProfile.LastUpdatedBy = userId;

                // Save changes to the database
                await _unitOfWork.Repository<UserProfile>().UpdateAsync(existingProfile);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (AutoMapperMappingException ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"AutoMapper error: {ex.Message}");
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="SmartDietAPI/appsettings.Production.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Server=tcp:smartdietapi.database.windows.net,1433;Initial Catalog=SmartDiet;Persist Security Info=False;User ID=sqladmin;Password=Smartdiet123!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
  },
  "Cloudinary": {
    "CloudName": "dtsjztbus",
    "ApiKey": "364422968749592",
    "ApiSecret": "br30UcuIlvTqHx0ZZYhLanSGn6Y"
  },
  "MailSettings": {
    "Mail": "phutg2000@gmail.com",
    "DisplayName": "Smart Diet",
    "Password": "ncdcrorhduyhpjbq",
    "Host": "smtp.gmail.com",
    "Port": 587
  },
  "Jwt": {
    "Key": "TranCongNguyenTonGiaChiPhuDungChienhihi",
    "Issuer": "BackEnd",
    "Audience": "BackEnd"
  },
  "DataCleanup": {
    "DaysThreshold": 30
  },
  "MealRecommendation": {
    "Points": {
      "MealRatingPerStar": 1,
      "LikedMeal": 2,
      "DislikedMeal": -1,
      "FavoriteDishPerDish": 0.5,
      "NewMeal": 3,
      "DiversityPenalty": 0.3
    },
    "MaxMealsPerCategory": 20,
    "DaysToExcludeRecentlyRecommended": 3
  },
  "DishRecommendationSettings": {
    "Points": {
      "DishRatingPerStar": 1,
      "LikedDish": 1,
      "DislikedDish": -1,
      "NewDish": 3,
      "SeasonalBonus": 1
    },
    "MaxDishesToRecommend": 20,
    "DaysToExcludeRecentlyRecommended": 3
  },
  "Google": {
    "ClientId": "605023551571-evs4d221n5tdk768r8u56u3oigbcgffp.apps.googleusercontent.com",
    "ClientSecret": "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"
  },
  "FridgeSettings": {
    "FridgeLimit": 5
  },
  "PAYOS_CLIENT": {
    "PAYOS_CLIENT_ID": "6c0e7550-7f5f-44dc-a116-0fcd03bf691b",
    "PAYOS_API_KEY": "a159af8f-bc4f-47c9-b121-f82e605c6804",
    "PAYOS_CHECKSUM_KEY": "b54c684555a9f67573cbec56192fcd0f7bb9d504dc8bad9ae5583728cad14bee"
  }
}
</file>

<file path="SmartDietAPI/Controllers/DishRecommendationController.cs">
using Microsoft.AspNetCore.Mvc;
using BusinessObjects.Base;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DishRecommendationController : ControllerBase
    {
        private readonly IDishRecommendationService _recommendationService;

        public DishRecommendationController(IDishRecommendationService recommendationService)
        {
            _recommendationService = recommendationService;
        }

        [HttpGet("recommendations")]
        public async Task<IActionResult> GetRecommendations()
        {
            var recommendations = await _recommendationService.GetRecommendedDishesAsync();
            return Ok(ApiResponse<object>.Success(recommendations));
        }

        [HttpPost("generate")]
        public async Task<IActionResult> GenerateRecommendations()
        {
            var recommendations = await _recommendationService.GenerateRecommendationsAsync();
            return Ok(ApiResponse<object>.Success(recommendations));
        }

        [HttpPost("regenerate")]
        public async Task<IActionResult> RegenerateRecommendations()
        {
            var recommendations = await _recommendationService.RegenerateRecommendationsAsync();
            return Ok(ApiResponse<object>.Success(recommendations));
        }

        [HttpGet("history")]
        public async Task<IActionResult> GetRecommendationHistory()
        {
            var history = await _recommendationService.GetRecommendationHistoryAsync();
            return Ok(ApiResponse<object>.Success(history));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/FavoriteMealController.cs">
using BusinessObjects.Base;
using DTOs.FavoriteMealDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FavoriteMealController : Controller
    {
        private readonly IFavoriteMealService _favoriteMealService;

        public FavoriteMealController(IFavoriteMealService favoriteMealService)
        {
            _favoriteMealService = favoriteMealService;
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetFavoriteMeals(
            [FromQuery] int pageIndex = 1, 
            [FromQuery] int pageSize = 10, 
            [FromQuery] string? searchTerm = null)
        {
            var result = await _favoriteMealService.GetAllFavoriteMealsAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetFavoriteMealById(string id)
        {
            var result = await _favoriteMealService.GetFavoriteMealByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> AddFavoriteMeal(FavoriteMealDTO favoriteMealDTO)
        {
            await _favoriteMealService.CreateFavoriteMealAsync(favoriteMealDTO);
            return Ok(ApiResponse<object>.Success(null, "Favorite meal added successfully", 201));
        }

        [HttpPut("{favoriteMealId}")]
        public async Task<IActionResult> UpdateFavoriteMeal(string favoriteMealId, FavoriteMealDTO favoriteMealDTO)
        {
            await _favoriteMealService.UpdateFavoriteMealAsync(favoriteMealId, favoriteMealDTO);
            return Ok(ApiResponse<object>.Success(null, "Favorite meal updated successfully"));
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteFavoriteMeal(string id)
        {
            await _favoriteMealService.DeleteFavoriteMealAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Favorite meal deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/FoodController.cs">
using BusinessObjects.Base;
using BusinessObjects.Entity;
using DTOs.FoodDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FoodController : Controller
    {
        private readonly IFoodService _foodService;
        public FoodController(IFoodService foodService)
        {
            _foodService = foodService;
        }
        [HttpGet("all")]
        public async Task<IActionResult> GetFoods([FromQuery] int pageIndex = 1, [FromQuery] int pageSize = 10, [FromQuery] string? searchTerm = null)
        {
            var result = await _foodService.GetAllFoodsAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("{id}")]
        public async Task<IActionResult> GetFoodById(string id)
        {
            var result = await _foodService.GetFoodByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("create")]
        public async Task<IActionResult> AddFood(FoodDTO foodDTO)
        {
            await _foodService.CreateFoodAsync(foodDTO);
            return Ok(ApiResponse<object>.Success(null, "Food created successfully", 201));
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateFood(string id, FoodDTO foodDTO)
        {
            await _foodService.UpdateFoodAsync(id, foodDTO);
            return Ok(ApiResponse<object>.Success(null, "Food updated successfully"));
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteFood(string id)
        {
            await _foodService.DeleteFoodAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Food deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/MealDishController.cs">
using BusinessObjects.Base;
using DTOs.MealDishDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;
using System.Threading.Tasks;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MealDishController : ControllerBase
    {
        private readonly IMealDishService _mealDishService;

        public MealDishController(IMealDishService mealDishService)
        {
            _mealDishService = mealDishService;
        }

        [HttpPost("create")]
        public async Task<IActionResult> CreateMealDishes([FromBody] IEnumerable<MealDishDTO> mealDishDTOs)
        {
            var result = await _mealDishService.CreateMealDishesAsync(mealDishDTOs);
            return Ok(ApiResponse<object>.Success(result, "MealDishes created successfully", 201));
        }

        [HttpDelete("{mealDishId}")]
        public async Task<IActionResult> DeleteMealDish(string mealDishId)
        {
            await _mealDishService.DeleteMealDishAsync(mealDishId);
            return Ok(ApiResponse<object>.Success(null, "MealDish deleted successfully"));
        }

        [HttpGet("meal/{mealId}")]
        public async Task<IActionResult> GetMealDishesByMealId(string mealId)
        {
            var result = await _mealDishService.GetMealDishesByMealIdAsync(mealId);
            return Ok(ApiResponse<object>.Success(result));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/MealRecommendationV2Controller.cs">
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MealRecommendationV2Controller : Controller
    {
        private readonly IMealRecommendationServiceV2 _recommendationService;

        public MealRecommendationV2Controller(IMealRecommendationServiceV2 recommendationService)
        {
            _recommendationService = recommendationService;
        }

        [HttpGet("recommendations")]
        public async Task<IActionResult> GetRecommendations()
        {
            var recommendations = await _recommendationService.GetRecommendedMealsAsync();
            return Ok(recommendations);
        }

        [HttpPost("generate")]
        public async Task<IActionResult> GenerateRecommendations()
        {
            var recommendations = await _recommendationService.GenerateRecommendationsAsync();
            return Ok(recommendations);
        }

        [HttpPost("regenerate")]
        public async Task<IActionResult> RegenerateRecommendations()
        {
            var recommendations = await _recommendationService.RegenerateRecommendationsAsync();
            return Ok(recommendations);
        }

        [HttpGet("history")]
        public async Task<IActionResult> GetRecommendationHistory()
        {
            var history = await _recommendationService.GetRecommendationHistoryAsync();
            return Ok(history);
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/TestDataController.cs">
using Microsoft.AspNetCore.Mvc;
using DTOs.UserProfileDTos;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    // Only allow in Development/Staging environments
    //[ApiExplorerSettings(IgnoreApi = true)]
    public class TestDataController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly IConfiguration _configuration;
        private readonly IWebHostEnvironment _environment;

        public TestDataController(
            IUserService userService,
            IConfiguration configuration,
            IWebHostEnvironment environment)
        {
            _userService = userService;
            _configuration = configuration;
            _environment = environment;
        }

        [HttpPost("seed-users")]
        //[Authorize(Roles = "Admin")]
        public async Task<IActionResult> SeedUsersAsync([FromQuery] string roleId)
        {
            // Only allow in non-production environments
            if (_environment.IsProduction())
            {
                return BadRequest(new { message = "This endpoint is not available in production environment" });
            }

            var testUsers = new List<RegisterUserWithRoleRequest>
            {
                new() {
                    Name = "John Smith",
                    Email = "john.smith@smartdiet.test",
                    PhoneNumber = "1234567890",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Emma Johnson",
                    Email = "emma.johnson@smartdiet.test",
                    PhoneNumber = "2345678901",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Michael Brown",
                    Email = "michael.brown@smartdiet.test",
                    PhoneNumber = "3456789012",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Sarah Davis",
                    Email = "sarah.davis@smartdiet.test",
                    PhoneNumber = "4567890123",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "James Wilson",
                    Email = "james.wilson@smartdiet.test",
                    PhoneNumber = "5678901234",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Lisa Anderson",
                    Email = "lisa.anderson@smartdiet.test",
                    PhoneNumber = "6789012345",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Robert Taylor",
                    Email = "robert.taylor@smartdiet.test",
                    PhoneNumber = "7890123456",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Jennifer Martinez",
                    Email = "jennifer.martinez@smartdiet.test",
                    PhoneNumber = "8901234567",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "William Thomas",
                    Email = "william.thomas@smartdiet.test",
                    PhoneNumber = "9012345678",
                    Password = "123456",
                    RoleID = roleId
                },
                new() {
                    Name = "Jessica Garcia",
                    Email = "jessica.garcia@smartdiet.test",
                    PhoneNumber = "0123456789",
                    Password = "123456",
                    RoleID = roleId
                }
            };

            var results = new List<string>();
            foreach (var user in testUsers)
            {
                try
                {
                    await _userService.AddUserWithRoleAsync(user);
                    results.Add($"Successfully created user: {user.Email}");
                }
                catch (Exception ex)
                {
                    results.Add($"Failed to create user {user.Email}: {ex.Message}");
                }
            }

            return Ok(new
            {
                message = "Test data seeding completed",
                details = results
            });
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UserProfileController.cs">
using BusinessObjects.Base;
using DTOs.UserProfileDTos;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserProfileController : Controller
    {
        private readonly IUserProfileService _userProfileService;

        public UserProfileController(IUserProfileService userProfileService)
        {
            _userProfileService = userProfileService;
        }


        // Get user profile by ID
        [HttpGet()]
        public async Task<IActionResult> GetUserProfile()
        {
            var result = await _userProfileService.GetUserProfileAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        // Create a new user profile
        [HttpPost("create")]
        public async Task<IActionResult> CreateUserProfile( UserProfileDTO userProfileDTO)
        {
            await _userProfileService.CreateUserProfileAsync(userProfileDTO);
            return Ok(ApiResponse<object>.Success(null, "User profile created successfully", 201));
        }

        // Update an existing user profile
        [HttpPut()]
        public async Task<IActionResult> UpdateUserProfile(UserProfileDTO userProfileDTO)
        {
            await _userProfileService.UpdateUserProfileAsync(userProfileDTO);
            return Ok(ApiResponse<object>.Success(null, "User profile updated successfully"));
        }
    }
}
</file>

<file path="Test/Program.cs">
// See https://aka.ms/new-console-template for more information
using BusinessObjects.Entity;
using DTOs.ExcelDTOs;
using Repositories;
using Repositories.Interfaces;
using Services;
using Microsoft.EntityFrameworkCore;
using DataAccessObjects; // Contains SmartDietDbContext
using Microsoft.Extensions.Configuration;
using OfficeOpenXml;

internal class Program
{
    private static async Task Main(string[] args)
    {
        // Initialize EPPlus license FIRST
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        
        // Build configuration
        var configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();

        // Create DbContext with SQL Server provider
        var optionsBuilder = new DbContextOptionsBuilder<SmartDietDbContext>()
            .UseSqlServer(configuration.GetConnectionString("DefaultConnection"));

        using var dbContext = new SmartDietDbContext(optionsBuilder.Options);

        // Create UnitOfWork instead of direct repository
        var unitOfWork = new UnitOfWork(dbContext);
        var importService = new ExcelImportService<Meal>(unitOfWork);

        // Get the full path to the Excel file
        var excelPath = Path.Combine(Directory.GetCurrentDirectory(),"Data", "meals.xlsx");

        // Verify file exists before processing
        if (!File.Exists(excelPath))
        {
            Console.WriteLine($"File not found: {excelPath}");
            return;
        }

        var result = await importService.ImportFromExcel<MealExcelDTO>(excelPath);

        if (result.Errors.Any())
        {
            foreach (var error in result.Errors)
            {
                Console.WriteLine($"Lỗi dòng: {error.RowData} - Lý do: {error.ErrorMessage}");
            }
        }

        Console.WriteLine($"Import thành công {result.SuccessCount}/{result.TotalProcessed} bản ghi");
    }
}
</file>

<file path="Test/Test.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Services\Services.csproj" />
    <ProjectReference Include="..\SmartDietAPI\SmartDietAPI.csproj" />
  </ItemGroup>

</Project>
</file>

<file path="BusinessObjects/Entity/Subcription.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class Subcription : BaseEntity
    {
        public string Name { get; set; }
        public string? Description { get; set; }
        public float Amount { get; set; }
        public string? SubscriptionType { get; set; } // Loại gói đăng ký (ví dụ: Basic, Premium, v.v.)
        public int MonthOfSubcription { get; set; } 
        public string? SubscriptionStatus { get; set; } // Trạng thái đăng ký (hoạt động, hết hạn, v.v.)

    }
}
</file>

<file path="BusinessObjects/Entity/UserFeedback.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class UserFeedback : BaseEntity
    {
        public string SmartDietUserId { get; set; } = string.Empty; 

        [Range(1, 5)]
        public int StarRating { get; set; }  

        [StringLength(1000)]
        public string Comment { get; set; } = string.Empty;

        public DateTime FeedbackDate { get; set; } = DateTime.UtcNow;  

        public SmartDietUser? SmartDietUser { get; set; }
    }

}
</file>

<file path="DTOs/AuthDTOs/RegisterRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class RegisterRequest
    {
        public  string? Name { get; set; }
        public  string? Email { get; set; }
        public  string? PhoneNumber { get; set; }
    	public  string? Password { get; set; }

    }
}
</file>

<file path="DTOs/AuthDTOs/ResetPasswordRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class ResetPasswordRequest
    {
        public  string? Email { get; set; }
    	public  string? Password { get; set; }
    }
}
</file>

<file path="DTOs/ExcelDTOs/DishExcelDTO.cs">
using BusinessObjects.Base;
using BusinessObjects.FixedData;
using System;

namespace DTOs.ExcelDTOs
{
    public class DishExcelDTO
    {

        [Column(1)]
        public string Name { get; set; }

        [Column(2)]
        public string Description { get; set; }

        [Column(3)]
        public string Image { get; set; }

        [Column(4)]
        public string Video { get; set; }

        [Column(5)]
        public string Instruction { get; set; }

        [Column(6)]
        public int PrepTimeMinutes { get; set; } 

        [Column(7)]
        public int CookingTimeMinutes { get; set; } 

        [Column(8)]
        public string Difficulty { get; set; }

        [Column(9)]
        public string RegionType { get; set; }

        [Column(10)]
        public string DietType { get; set; }
    }
}
</file>

<file path="DTOs/RoleDTOs/RoleResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.RoleDTOs
{
    public class RoleResponse
    {
        public string Id { get; set; }

        public string Name { get; set; }
    }
}
</file>

<file path="DTOs/SubcriptionDTOs/SubcriptionResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.SubcriptionDTOs
{
    public class SubcriptionResponse
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string? Description { get; set; }
        public float Amount { get; set; }
        public string? SubscriptionType { get; set; }
        public int MonthOfSubcription { get; set; }
        public string? SubscriptionStatus { get; set; } 
    }
}
</file>

<file path="DTOs/UserFeedbackDTOs/UserFeedbackDTO.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserFeedbackDTOs
{
    public class UserFeedbackDTO
    {

        public int StarRating { get; set; }

        public string Comment { get; set; } = string.Empty;
    }
}
</file>

<file path="DTOs/UserFeedbackDTOs/UserFeedbackResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserFeedbackDTOs
{
    public class UserFeedbackResponse
    {
        public string Id { get; set; } = string.Empty;

        public string SmartDietUserId { get; set; } = string.Empty;

        //public string SmartDietUserName { get; set; } = string.Empty;

        public int StarRating { get; set; }

        public string Comment { get; set; } = string.Empty;
    }
}
</file>

<file path="DTOs/UserProfileDTos/RegisterUserWithRoleRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserProfileDTos
{
    public class RegisterUserWithRoleRequest
    {
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? PhoneNumber { get; set; }
        public string? Password { get; set; }
        public string? RoleID { get; set; }
    }
}
</file>

<file path="DTOs/UserProfileDTos/UpdateUserProfileRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserProfileDTos
{
    public class UpdateUserProfileRequest
    {
        public string? FullName { get; set; }
        public string? ProfilePicture { get; set; }
        public string? TimeZone { get; set; }
        public string? PreferredLanguage { get; set; } 

        public bool EnableNotifications { get; set; } 

        public bool EnableEmailNotifications { get; set; } 

        public bool EnablePushNotifications { get; set; }

    }
}
</file>

<file path="DTOs/UserProfileDTos/UserProfileResponse.cs">
using BusinessObjects.Entity;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserProfileDTos
{
    public class UserProfileResponse
    {
        public string Id { get; set; }
        public string SmartDietUserId { get; set; }

        public string FullName { get; set; }

        public string ProfilePicture { get; set; }

        public string TimeZone { get; set; } 

        public string PreferredLanguage { get; set; } 

        public bool EnableNotifications { get; set; } 

        public bool EnableEmailNotifications { get; set; } 

        public bool EnablePushNotifications { get; set; }
        public DateTime CreatedTime { get; set; }
        public DateTime? LastUpdatedTime { get; set; }
    }
}
</file>

<file path="Services/Configs/SeedData.cs">
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Configs
{
    public class SeedData
    {
        private readonly ILogger<SeedData> _logger;
        private readonly SmartDietDbContext _context;

        public SeedData(ILogger<SeedData> logger, SmartDietDbContext context)
        {
            _logger = logger;
            _context = context;
        }

        public async Task InitialiseAsync()
        {
            try
            {
                if (_context.Database.IsSqlServer())
                {
                    if (!_context.Database.CanConnect())
                    {
                        await _context.Database.EnsureDeletedAsync();
                        await _context.Database.MigrateAsync();
                    }
                    else
                    {
                        await _context.Database.MigrateAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while initializing the database.");
                throw;
            }
        }

        public async Task SeedAsync()
        {
            try
            {
                await TrySeedAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while seeding the database.");
                throw;
            }
        }

        private async Task TrySeedAsync()
        {
            _logger.LogInformation("Starting to seed food and dish data...");

            await SeedFoodsAsync();
            //await SeedDishesAsync();
            await SeedMealsAsync();
            await SeedMealDishesAsync();

            _logger.LogInformation("Food and dish data seeding completed.");
        }

        #region Foods
        private async Task SeedFoodsAsync()
        {
            if (!_context.Foods.Any())
            {
                var foods = new List<Food>
        {
            new Food { Name = "Apple", Description = "Fresh apple", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 7, ShelfLifeRefrigerated = 30, ShelfLifeFrozen = 90, Category = FoodCategory.Fruits },
            new Food { Name = "Banana", Description = "Ripe banana", StorageGuidelines = "Keep at room temperature", ShelfLifeRoomTemp = 5, ShelfLifeRefrigerated = 10, ShelfLifeFrozen = 60, Category = FoodCategory.Fruits },
            new Food { Name = "Carrot", Description = "Fresh carrot", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 10, ShelfLifeRefrigerated = 60, ShelfLifeFrozen = 180, Category = FoodCategory.Vegetables },
            new Food { Name = "Chicken Breast", Description = "Fresh chicken breast", StorageGuidelines = "Keep in fridge or freezer", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 2, ShelfLifeFrozen = 180, Category = FoodCategory.Meat },
            new Food { Name = "Salmon", Description = "Fresh salmon", StorageGuidelines = "Keep in fridge or freezer", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 2, ShelfLifeFrozen = 120, Category = FoodCategory.Seafood },
            new Food { Name = "Rice", Description = "Uncooked rice", StorageGuidelines = "Store in a cool, dry place", ShelfLifeRoomTemp = 365, ShelfLifeRefrigerated = null, ShelfLifeFrozen = null, Category = FoodCategory.Grains },
            new Food { Name = "Tomato", Description = "Fresh tomato", StorageGuidelines = "Keep at room temperature", ShelfLifeRoomTemp = 7, ShelfLifeRefrigerated = 14, ShelfLifeFrozen = 90, Category = FoodCategory.Vegetables },
            new Food { Name = "Milk", Description = "Fresh milk", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 1, ShelfLifeRefrigerated = 7, ShelfLifeFrozen = 30, Category = FoodCategory.Dairy },
            new Food { Name = "Eggs", Description = "Fresh eggs", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 7, ShelfLifeRefrigerated = 30, ShelfLifeFrozen = 90, Category = FoodCategory.Dairy },
            new Food { Name = "Cheese", Description = "Aged cheese", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 90, ShelfLifeFrozen = 365, Category = FoodCategory.Dairy },
            new Food { Name = "Potato", Description = "Fresh potato", StorageGuidelines = "Keep in a cool, dark place", ShelfLifeRoomTemp = 30, ShelfLifeRefrigerated = null, ShelfLifeFrozen = null, Category = FoodCategory.Vegetables },
            new Food { Name = "Onion", Description = "Fresh onion", StorageGuidelines = "Keep in a cool, dark place", ShelfLifeRoomTemp = 30, ShelfLifeRefrigerated = null, ShelfLifeFrozen = null, Category = FoodCategory.Vegetables },
            new Food { Name = "Garlic", Description = "Fresh garlic", StorageGuidelines = "Keep in a cool, dark place", ShelfLifeRoomTemp = 60, ShelfLifeRefrigerated = null, ShelfLifeFrozen = null, Category = FoodCategory.Vegetables },
            new Food { Name = "Yogurt", Description = "Fresh yogurt", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 14, ShelfLifeFrozen = 60, Category = FoodCategory.Dairy },
            new Food { Name = "Beef", Description = "Fresh beef", StorageGuidelines = "Keep in fridge or freezer", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 3, ShelfLifeFrozen = 180, Category = FoodCategory.Meat },
            new Food { Name = "Pork", Description = "Fresh pork", StorageGuidelines = "Keep in fridge or freezer", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 3, ShelfLifeFrozen = 180, Category = FoodCategory.Meat },
            new Food { Name = "Strawberry", Description = "Fresh strawberry", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 2, ShelfLifeRefrigerated = 7, ShelfLifeFrozen = 90, Category = FoodCategory.Fruits },
            new Food { Name = "Cucumber", Description = "Fresh cucumber", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 5, ShelfLifeRefrigerated = 14, ShelfLifeFrozen = 60, Category = FoodCategory.Vegetables },
            new Food { Name = "Lettuce", Description = "Fresh lettuce", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 7, ShelfLifeFrozen = 30, Category = FoodCategory.Vegetables },
            new Food { Name = "Butter", Description = "Dairy butter", StorageGuidelines = "Keep in fridge", ShelfLifeRoomTemp = 0, ShelfLifeRefrigerated = 60, ShelfLifeFrozen = 180, Category = FoodCategory.Dairy }
        };

                await _context.Foods.AddRangeAsync(foods);
                await _context.SaveChangesAsync();
                _logger.LogInformation("Seeded Foods successfully.");
            }
        }
        #endregion

        //#region Dishs
        //private async Task SeedDishesAsync()
        //{
        //    if (!_context.Dishes.Any())
        //    {
        //        var dishes = new List<Dish>
        //{
        //    new Dish { Name = "Spaghetti Carbonara", Description = "Italian pasta dish", PrepTimeMinutes = 10, CookingTimeMinutes = 20, Difficulty = DifficultyLevel.Medium, RegionType = RegionType.Italian },
        //    new Dish { Name = "Grilled Chicken", Description = "Simple grilled chicken", PrepTimeMinutes = 15, CookingTimeMinutes = 30, Difficulty = DifficultyLevel.Easy, RegionType = RegionType.American },
        //    new Dish { Name = "Beef Stroganoff", Description = "Russian beef dish", PrepTimeMinutes = 20, CookingTimeMinutes = 40, Difficulty = DifficultyLevel.Hard, RegionType = RegionType.Greek },
        //    new Dish { Name = "Sushi", Description = "Japanese sushi rolls", PrepTimeMinutes = 30, CookingTimeMinutes = 0, Difficulty = DifficultyLevel.Hard, RegionType = RegionType.Japanese },
        //    new Dish { Name = "Caesar Salad", Description = "Classic Caesar salad", PrepTimeMinutes = 10, CookingTimeMinutes = 0, Difficulty = DifficultyLevel.Easy, RegionType = RegionType.French },
        //    new Dish { Name = "Chicken Curry", Description = "Spicy chicken curry", PrepTimeMinutes = 20, CookingTimeMinutes = 40, Difficulty = DifficultyLevel.Medium, RegionType = RegionType.Indian },
        //    new Dish { Name = "Pad Thai", Description = "Thai stir-fried noodles", PrepTimeMinutes = 15, CookingTimeMinutes = 25, Difficulty = DifficultyLevel.Medium, RegionType = RegionType.Thai },
        //    new Dish { Name = "Bibimbap", Description = "Korean mixed rice", PrepTimeMinutes = 20, CookingTimeMinutes = 30, Difficulty = DifficultyLevel.Medium, RegionType = RegionType.Korean },
        //    new Dish { Name = "Pho", Description = "Vietnamese noodle soup", PrepTimeMinutes = 30, CookingTimeMinutes = 120, Difficulty = DifficultyLevel.Hard, RegionType = RegionType.Vietnamese },
        //    new Dish { Name = "Peking Duck", Description = "Crispy Chinese roasted duck", PrepTimeMinutes = 60, CookingTimeMinutes = 120, Difficulty = DifficultyLevel.Hard, RegionType = RegionType.Chinese }
        //};

        //        await _context.Dishes.AddRangeAsync(dishes);
        //        await _context.SaveChangesAsync();
        //        _logger.LogInformation("Seeded Dishes successfully.");
        //    }
        //}
        //#endregion

        #region Meals
        private async Task SeedMealsAsync()
        {
            if (!_context.Meals.Any())
            {
                var meals = new List<Meal>
        {
            new Meal { Name = "Grilled Chicken Salad", Description = "Healthy grilled chicken with fresh vegetables", DietType = DietType.Keto, Image = "grilled_chicken_salad.jpg", AverageRating = 4.5 },
            new Meal { Name = "Vegetable Stir Fry", Description = "Stir-fried fresh vegetables with soy sauce", DietType = DietType.Vegan, Image = "vegetable_stir_fry.jpg", AverageRating = 4.2 },
            new Meal { Name = "Spaghetti Bolognese", Description = "Classic Italian pasta with meat sauce", DietType = DietType.Mediterranean, Image = "spaghetti_bolognese.jpg", AverageRating = 4.7 },
            new Meal { Name = "Tofu Curry", Description = "Delicious tofu curry with coconut milk", DietType = DietType.Vegetarian, Image = "tofu_curry.jpg", AverageRating = 4.3 },
            new Meal { Name = "Salmon Teriyaki", Description = "Glazed salmon with teriyaki sauce and rice", DietType = DietType.Pescatarian, Image = "salmon_teriyaki.jpg", AverageRating = 4.6 },
            new Meal { Name = "Quinoa Salad", Description = "Refreshing quinoa salad with mixed greens", DietType = DietType.Vegan, Image = "quinoa_salad.jpg", AverageRating = 4.1 },
            new Meal { Name = "Chicken Alfredo", Description = "Creamy Alfredo pasta with grilled chicken", DietType = DietType.Mediterranean, Image = "chicken_alfredo.jpg", AverageRating = 4.5 },
            new Meal { Name = "Lentil Soup", Description = "Nutritious lentil soup with herbs", DietType = DietType.Vegan, Image = "lentil_soup.jpg", AverageRating = 4.0 },
            new Meal { Name = "Beef Steak with Veggies", Description = "Juicy beef steak with roasted vegetables", DietType = DietType.Mediterranean, Image = "beef_steak.jpg", AverageRating = 4.8 },
            new Meal { Name = "Greek Salad", Description = "Fresh Greek salad with feta cheese", DietType = DietType.Vegetarian, Image = "greek_salad.jpg", AverageRating = 4.4 },
            new Meal { Name = "Eggplant Parmesan", Description = "Baked eggplant with tomato sauce and cheese", DietType = DietType.Vegetarian, Image = "eggplant_parmesan.jpg", AverageRating = 4.3 },
            new Meal { Name = "Miso Soup with Tofu", Description = "Traditional Japanese miso soup", DietType = DietType.Vegan, Image = "miso_soup.jpg", AverageRating = 4.2 },
            new Meal { Name = "Chicken Caesar Wrap", Description = "Grilled chicken wrapped with Caesar dressing", DietType = DietType.Mediterranean, Image = "chicken_caesar_wrap.jpg", AverageRating = 4.6 },
            new Meal { Name = "Shrimp Fried Rice", Description = "Fried rice with shrimp and vegetables", DietType = DietType.Pescatarian, Image = "shrimp_fried_rice.jpg", AverageRating = 4.5 },
            new Meal { Name = "Black Bean Tacos", Description = "Tacos filled with spicy black beans", DietType = DietType.Vegan, Image = "black_bean_tacos.jpg", AverageRating = 4.1 },
            new Meal { Name = "Pumpkin Soup", Description = "Creamy pumpkin soup with spices", DietType = DietType.Vegetarian, Image = "pumpkin_soup.jpg", AverageRating = 4.2 },
            new Meal { Name = "Teriyaki Chicken Bowl", Description = "Grilled chicken with teriyaki sauce and rice", DietType = DietType.Mediterranean, Image = "teriyaki_chicken_bowl.jpg", AverageRating = 4.7 },
            new Meal { Name = "Sushi Platter", Description = "Assorted sushi rolls with fresh fish", DietType = DietType.Pescatarian, Image = "sushi_platter.jpg", AverageRating = 4.9 },
            new Meal { Name = "Chickpea Stew", Description = "Rich and hearty chickpea stew", DietType = DietType.Vegan, Image = "chickpea_stew.jpg", AverageRating = 4.3 },
            new Meal { Name = "Oatmeal with Fruits", Description = "Healthy oatmeal with mixed fruits", DietType = DietType.Vegetarian, Image = "oatmeal_fruits.jpg", AverageRating = 4.0 }
        };

                await _context.Meals.AddRangeAsync(meals);
                await _context.SaveChangesAsync();
                _logger.LogInformation("Seeded Meals successfully.");
            }
        }
        #endregion

        #region MealDish
        private async Task SeedMealDishesAsync()
        {
            if (!_context.MealDishes.Any())
            {
                var meals = await _context.Meals.ToListAsync();
                var dishes = await _context.Dishes.ToListAsync();
                var mealDishes = new List<MealDish>();
                var random = new Random();

                // Ensure at least 20 rows by randomly assigning dishes to meals
                foreach (var meal in meals)
                {
                    int numberOfDishes = random.Next(1, 4); // Each meal gets 1 to 3 dishes
                    var selectedDishes = dishes.OrderBy(x => random.Next()).Take(numberOfDishes);

                    foreach (var dish in selectedDishes)
                    {
                        mealDishes.Add(new MealDish
                        {
                            MealId = meal.Id,
                            DishId = dish.Id,
                            ServingSize = random.Next(1, 4) // Serving size between 1 and 3
                        });
                    }
                }

                // Ensure at least 20 records
                while (mealDishes.Count < 20)
                {
                    var meal = meals[random.Next(meals.Count)];
                    var dish = dishes[random.Next(dishes.Count)];

                    mealDishes.Add(new MealDish
                    {
                        MealId = meal.Id,
                        DishId = dish.Id,
                        ServingSize = random.Next(1, 4)
                    });
                }

                await _context.MealDishes.AddRangeAsync(mealDishes);
                await _context.SaveChangesAsync();
                _logger.LogInformation("Seeded MealDishes successfully.");
            }
        }
        #endregion
    }
}
</file>

<file path="Services/FavoriteMealService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.FavoriteMealDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class FavoriteMealService : IFavoriteMealService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public FavoriteMealService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateFavoriteMealAsync(FavoriteMealDTO favoriteMealDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if the favorite meal already exists for the user
                var existingFavoriteMeal = await _unitOfWork.Repository<FavoriteMeal>().FindAsync(
                    x => x.SmartDietUserId == userId && x.MealId == favoriteMealDTO.MealId);

                if (existingFavoriteMeal.Any())
                {
                    throw new ErrorException(
                        StatusCodes.Status400BadRequest,
                        ErrorCode.BADREQUEST,
                        "Favorite meal already exists for this user!");
                }

                var favoriteMeal = _mapper.Map<FavoriteMeal>(favoriteMealDTO);
                favoriteMeal.SmartDietUserId = userId;
                favoriteMeal.CreatedTime = DateTime.UtcNow;
                favoriteMeal.CreatedBy = userId; // Set the user ID from the token
                await _unitOfWork.Repository<FavoriteMeal>().AddAsync(favoriteMeal);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        // Hard Delete
        public async Task DeleteFavoriteMealAsync(string favoriteMealId)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var favoriteMeal = await _unitOfWork.Repository<FavoriteMeal>().GetByIdAsync(favoriteMealId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Favorite meal does not exist!");

                // Ensure the user is deleting their own favorite meal
                if (favoriteMeal.CreatedBy != userId)
                {
                    throw new ErrorException(
                        StatusCodes.Status403Forbidden,
                        ErrorCode.FORBIDDEN,
                        "You are not authorized to delete this favorite meal!");
                }

                _unitOfWork.Repository<FavoriteMeal>().DeleteAsync(favoriteMeal);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<FavoriteMealResponse>> GetAllFavoriteMealsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Filter favorite meals by the logged-in user
                var favoriteMeals = await _unitOfWork.Repository<FavoriteMeal>().FindAsync(
                    x => x.CreatedBy == userId,
                    includes: x => x.Meal);

                return _mapper.Map<IEnumerable<FavoriteMealResponse>>(favoriteMeals);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<BasePaginatedList<FavoriteMealResponse>> GetAllFavoriteMealsAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Filter favorite meals by the logged-in user and apply pagination
                var favoriteMeals = await _unitOfWork.Repository<FavoriteMeal>().FindWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    predicate: x => x.CreatedBy == userId,
                    includes: x => x.Meal,
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.Meal.Name.Contains(searchTerm),
                    orderBy: x => x.OrderBy(f => f.Meal.Name)
                    ); // Add filter for the logged-in user

                if (favoriteMeals == null || !favoriteMeals.Items.Any())
                {
                    return new BasePaginatedList<FavoriteMealResponse>(new List<FavoriteMealResponse>(), 0, pageIndex, pageSize);
                }

                var favoriteMealResponses = _mapper.Map<IEnumerable<FavoriteMealResponse>>(favoriteMeals.Items);

                return new BasePaginatedList<FavoriteMealResponse>(
                    favoriteMealResponses.ToList(),
                    favoriteMealResponses.Count(),
                    pageIndex,
                    pageSize);
            }
            catch (AutoMapperMappingException ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"AutoMapper error: {ex.Message}");
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<FavoriteMealResponse> GetFavoriteMealByIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var favoriteMeal = await _unitOfWork
                    .Repository<FavoriteMeal>()
                    .GetByIdAsync(
                        id,
                        includes: x => x.Meal)
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound,
                        ErrorCode.NOT_FOUND,
                        "Favorite meal does not exist!");

                // Ensure the user is accessing their own favorite meal
                if (favoriteMeal.CreatedBy != userId)
                {
                    throw new ErrorException(
                        StatusCodes.Status403Forbidden,
                        ErrorCode.FORBIDDEN,
                        "You are not authorized to access this favorite meal!");
                }

                return _mapper.Map<FavoriteMealResponse>(favoriteMeal);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateFavoriteMealAsync(string favoriteMealId, FavoriteMealDTO favoriteMealDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var favoriteMeal = await _unitOfWork
                    .Repository<FavoriteMeal>()
                    .GetByIdAsync(favoriteMealId)
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound,
                        ErrorCode.NOT_FOUND,
                        "Favorite meal does not exist!");

                // Ensure the user is updating their own favorite meal
                if (favoriteMeal.CreatedBy != userId)
                {
                    throw new ErrorException(
                        StatusCodes.Status403Forbidden,
                        ErrorCode.FORBIDDEN,
                        "You are not authorized to update this favorite meal!");
                }

                _mapper.Map(favoriteMealDTO, favoriteMeal);
                favoriteMeal.LastUpdatedTime = DateTime.UtcNow;
                favoriteMeal.LastUpdatedBy = userId; // Set the user ID from the token
                await _unitOfWork.Repository<FavoriteMeal>().UpdateAsync(favoriteMeal);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/Interfaces/IUserAllergyService.cs">
using DTOs.UserAllergyDTOs;
using DTOs.UserPreferenceDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserAllergyService
    {
        Task<IEnumerable<UserAllergyResponse>> GetUserAllergies();

        Task UpdateUserAllergies(List<string> foodIdsToAdd, List<string> foodIdsToRemove);
        Task RemoveUserAllergies(List<string> foodIds);
        Task AddUserAllergies(List<UserAllergyDTO> userAllergyDTOs);
    }
}
</file>

<file path="Services/Interfaces/IUserDishInteractionService.cs">
using DTOs.DishDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserDishInteractionService
    {
        Task CreateUserDishInteractionAsync(UserDishInteractionDTO dto);
        Task<UserDishInteractionResponse> CreateDishInteractionAsync(UserDishInteractionDTO dto);
        Task DeleteUserDishInteractionAsync(string id);
        Task<IEnumerable<UserDishInteractionResponse>> GetAllUserDishInteractionsAsync();
        Task<UserDishInteractionResponse> GetUserDishInteractionByDishIdAsync(string id);
        Task<UserDishInteractionResponse> GetUserDishInteractionByIdAsync(string id);
        Task UpdateUserDishInteractionAsync(string id, UserDishInteractionDTO dto);
    }
}
</file>

<file path="Services/Interfaces/IUserMealInteractionService.cs">
using BusinessObjects.Base;
using DTOs.MealDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IUserMealInteractionService
    {
        Task CreateUserMealInteractionAsync(UserMealInteractionDTO dto);
        Task<UserMealInteractionResponse> CreateMealInteractionAsync(UserMealInteractionDTO dto);
        Task DeleteUserMealInteractionAsync(string id);
        Task<IEnumerable<UserMealInteractionResponse>> GetAllUserMealInteractionsAsync();
        Task<UserMealInteractionResponse> GetUserMealInteractionByMealIdAsync(string id);
        Task<UserMealInteractionResponse> GetUserMealInteractionByIdAsync(string id);
        Task UpdateUserMealInteractionAsync(string id, UserMealInteractionDTO dto);
    }
}
</file>

<file path="Services/Interfaces/IUserPreferenceService.cs">
using BusinessObjects.Base;
using DTOs.UserPreferenceDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{

    public interface IUserPreferenceService
    {
        Task<UserPreferenceResponse> GetUserPreferenceByIdAsync();

        Task CreateUserPreferenceAsync(UserPreferenceDTO userPreferenceDto);

        Task UpdateUserPreferenceAsync(UserPreferenceDTO userPreferenceDto);

        #region Cumtumlum
        //Task<IEnumerable<UserPreferenceResponse>> GetAllUserPreferencesAsync();
        //Task<BasePaginatedList<UserPreferenceResponse>> GetAllUserPreferencesAsync(int pageIndex, int pageSize, string? searchTerm);
        #endregion

    }
}
</file>

<file path="Services/MealRecommendationServiceV2.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Enum;
using BusinessObjects.Exceptions;
using DTOs.MealDTOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{

    public class MealRecommendationServiceV2 : IMealRecommendationServiceV2
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly MealRecommendationSettings _settings;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;
        private readonly Random _random;

        public MealRecommendationServiceV2(
            IUnitOfWork unitOfWork,
            IOptions<MealRecommendationSettings> options,
            IMapper mapper,
            ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _settings = options.Value;
            _mapper = mapper;
            _tokenService = tokenService;
            _random = new Random();
        }

        public async Task<IEnumerable<MealResponse>> GenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Parallel fetching of user data
                var (userPreferences, userAllergies, recentMealIds) = await GetUserDataAsync(userId);
                var (userInteractions, favoriteDishIds) = await GetUserInteractionDataAsync(userId);

                // Get meals with optimized query
                var meals = await GetEligibleMealsAsync(userId, recentMealIds, userPreferences, userAllergies);

                // Calculate scores with diversity factors
                var scoredMeals = meals.Select(m => new
                {
                    Meal = m,
                    Score = CalculateEnhancedScore(m, userInteractions, favoriteDishIds)
                }).OrderByDescending(m => m.Score).ToList();

                // Apply diversity-aware selection
                var recommendedMeals = SelectDiverseMeals(scoredMeals, userPreferences.DailyMealCount);

                // Save recommendations
                await SaveRecommendationsAsync(userId, recommendedMeals);

                return _mapper.Map<IEnumerable<MealResponse>>(recommendedMeals);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new Exception("Failed to generate recommendations", ex);
            }
        }

        private async Task<(UserPreference, IEnumerable<UserAllergy>, HashSet<string>)> GetUserDataAsync(string userId)
        {
            var userPreferences = await _unitOfWork.Repository<UserPreference>()
                .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
                ?? throw new Exception("User preferences not found");

            var userAllergies = await _unitOfWork.Repository<UserAllergy>()
                .FindAsync(ua => ua.SmartDietUserId == userId);

            var recentMeals = await _unitOfWork.Repository<MealRecommendationHistory>()
                .FindAsync(r => r.SmartDietUserId == userId &&
                    r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

            return (userPreferences, userAllergies, recentMeals.Select(r => r.MealId).ToHashSet());
        }

        private async Task<(IEnumerable<UserMealInteraction>, List<string>)> GetUserInteractionDataAsync(string userId)
        {
            var userInteractions = await _unitOfWork.Repository<UserMealInteraction>()
                .FindAsync(umi => umi.SmartDietUserId == userId);

            var favoriteDishes = await _unitOfWork.Repository<FavoriteDish>()
                .FindAsync(fd => fd.SmartDietUserId == userId);
            var favoriteDishIds = favoriteDishes.Select(fd => fd.DishId).ToList();

            return (userInteractions, favoriteDishIds);
        }

        private async Task<IEnumerable<Meal>> GetEligibleMealsAsync(
            string userId,
            HashSet<string> recentMealIds,
            UserPreference preferences,
            IEnumerable<UserAllergy> allergies)
        {
            var meal = await _unitOfWork.Repository<Meal>().GetAllAsync(
                include: query => query
                    .Include(m => m.MealDishes)
                        .ThenInclude(md => md.Dish)
                        .ThenInclude(d => d.DishIngredients));
            return meal.Where(m =>
            //!recentMealIds.Contains(m.Id) &&
                    m.MealDishes.Any(md =>
                        md.Dish.DietType == preferences.PrimaryDietType &&
                        md.Dish.RegionType == preferences.PrimaryRegionType &&
                        md.Dish.CookingTimeMinutes <= preferences.MaxCookingTime &&
                        //md.Dish.Difficulty <= preferences.MaxRecipeDifficulty &&
                        !md.Dish.DishIngredients.Any(di => allergies.Any(ua => ua.FoodId == di.FoodId))
                        )).ToList();
        }

        private double CalculateEnhancedScore(
            Meal meal,
            IEnumerable<UserMealInteraction> interactions,
            List<string> favoriteDishIds)
        {
            var interaction = interactions.FirstOrDefault(i => i.MealId == meal.Id);

            // Base scoring
            var score = meal.AverageRating * _settings.Points.MealRatingPerStar
                + (interaction?.InteractionType switch
                {
                    InteractionType.Liked => _settings.Points.LikedMeal,
                    InteractionType.Disliked => _settings.Points.DislikedMeal,
                    _ => 0
                })
                + meal.MealDishes.Sum(md =>
                    favoriteDishIds.Contains(md.DishId)
                        ? _settings.Points.FavoriteDishPerDish
                        : 0)
                + (interaction == null
                    ? _settings.Points.NewMeal
                    : 0);

            // Diversity factors
            score += _random.NextDouble() * 0.5; // Random boost
            score -= CalculateSimilarityPenalty(meal); // Diversity penalty

            return score;
        }

        private List<Meal> SelectDiverseMeals(IEnumerable<dynamic> scoredMeals, int count)
        {
            // Group by diet type first

            var grouped = scoredMeals
                    .GroupBy(m =>
                        ((IEnumerable<MealDish>)m.Meal.MealDishes) // Explicit cast
                        .FirstOrDefault()?                      // LINQ FirstOrDefault
                        .Dish?.DietType                         // Null-safe navigation
                        )
       .SelectMany(g => g.Take(_settings.MaxMealsPerCategory))
       .ToList();

            // Apply MMR-like selection
            var selected = new List<Meal>();
            var remaining = new Queue<dynamic>(grouped.OrderByDescending(m => m.Score));

            while (selected.Count < count && remaining.Count > 0)
            {
                var next = remaining.Dequeue();
                if (!IsTooSimilar(next.Meal, selected))
                {
                    selected.Add(next.Meal);
                }
            }

            return selected.Take(count).ToList();
        }

        private double CalculateSimilarityPenalty(Meal meal)
        {
            // Implement your similarity calculation logic
            // Example: 0.1 penalty per matching ingredient with already selected meals
            return 0; // Placeholder
        }

        private bool IsTooSimilar(Meal candidate, List<Meal> selected)
        {
            // Implement similarity check logic
            // Example: Check ingredient overlap
            return false; // Placeholder
        }

        private async Task SaveRecommendationsAsync(string userId, IEnumerable<Meal> meals)
        {
            var history = meals.Select(m => new MealRecommendationHistory
            {
                Id = Guid.NewGuid().ToString(),
                SmartDietUserId = userId,
                MealId = m.Id,
                CreatedBy = userId,
                RecommendationDate = DateTime.UtcNow
            }).ToList();

            await _unitOfWork.Repository<MealRecommendationHistory>().AddRangeAsync(history);
            await _unitOfWork.SaveChangeAsync();
        }

        public async Task<IEnumerable<MealResponse>> RegenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                // Clear recent recommendations
                var recentRecommendations = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

                _unitOfWork.Repository<MealRecommendationHistory>().DeleteRangeAsync(recentRecommendations);
                await _unitOfWork.SaveChangeAsync();

                // Generate new recommendations
                return await GenerateRecommendationsAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to regenerate recommendations", ex);
            }
        }

        public async Task<IEnumerable<MealResponse>> GetRecommendedMealsAsync()
        {
            try
            {
                // Fetch user id
                var userId = _tokenService.GetUserIdFromToken();
                // Fetch user preference
                var userPreferences = await _unitOfWork.Repository<UserPreference>()
            .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
            ?? throw new Exception("User preferences not found");
                // Get recommendation and filter the newest recommendation
                var recentRecommendations = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended),
                        include: query => query.Include(x => x.Meal)
                        .ThenInclude(x => x.MealDishes)
                        .OrderByDescending(r => r.RecommendationDate) // Order by newest first
            .Take(userPreferences.DailyMealCount)
                        );

                return _mapper.Map<IEnumerable<MealResponse>>(recentRecommendations.Select(r => r.Meal));
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to get recommended meals", ex);
            }
        }

        public async Task<IEnumerable<MealResponse>> GetRecommendationHistoryAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var recommendationHistory = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId,
                        include: query => query.Include(x => x.Meal)
                        .ThenInclude(x => x.MealDishes));

                return _mapper.Map<IEnumerable<MealResponse>>(recommendationHistory.Select(r => r.Meal));
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to get recommendation history", ex);
            }
        }
    }
}
</file>

<file path="Services/UserAllergyService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.UserAllergyDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserAllergyService : IUserAllergyService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public UserAllergyService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task UpdateUserAllergies(List<string> foodIdsToAdd, List<string> foodIdsToRemove)
        {
            try
            {
                // Lấy userId từ token
                var userId = _tokenService.GetUserIdFromToken();

                // Xử lý thêm dị ứng mới
                if (foodIdsToAdd.Any())
                {
                    await AddUserAllergies(foodIdsToAdd.Select(foodId => new UserAllergyDTO { FoodId = foodId }).ToList());
                }

                // Xử lý xóa dị ứng
                if (foodIdsToRemove.Any())
                {
                    await RemoveUserAllergies(foodIdsToRemove);
                }
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "Something went wrong");
            }
        }

        public async Task AddUserAllergies(List<UserAllergyDTO> userAllergyDTOs)
        {
            try
            {
                // Lấy userId từ token
                var userId = _tokenService.GetUserIdFromToken();

                // Lấy danh sách các thực phẩm dị ứng hiện tại của người dùng
                var existingAllergies = await _unitOfWork.Repository<UserAllergy>()
                    .FindAsync(x => x.SmartDietUserId == userId);

                // Lọc ra các thực phẩm dị ứng mới chưa tồn tại trong danh sách hiện tại
                var newAllergies = userAllergyDTOs
                    .Where(dto => !existingAllergies.Any(x => x.FoodId == dto.FoodId))
                    .ToList();

                if (!newAllergies.Any())
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "All allergies already exist for the user");
                }

                // Map DTOs sang entities
                var userAllergiesToAdd = _mapper.Map<List<UserAllergy>>(newAllergies);

                foreach (var allergy in userAllergiesToAdd)
                {
                    // Thiết lập các thuộc tính cần thiết
                    allergy.SmartDietUserId = userId;
                    allergy.CreatedTime = DateTime.UtcNow;
                    allergy.CreatedBy = userId;
                }

                // Thêm các dị ứng mới vào cơ sở dữ liệu
                await _unitOfWork.Repository<UserAllergy>().AddRangeAsync(userAllergiesToAdd);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "Something went wrong");
            }
        }

        public async Task RemoveUserAllergies(List<string> foodIds)
        {
            try
            {
                // Lấy userId từ token
                var userId = _tokenService.GetUserIdFromToken();

                // Kiểm tra đầu vào
                if (foodIds == null || !foodIds.Any())
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Danh sách FoodId không được để trống");
                }

                // Lấy danh sách các dị ứng cần xóa
                var allergiesToDelete = await _unitOfWork.Repository<UserAllergy>()
                    .FindAsync(x => x.SmartDietUserId == userId && foodIds.Contains(x.FoodId));

                if (!allergiesToDelete.Any())
                {
                    throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Không tìm thấy dị ứng phù hợp để xóa");
                }

                // Xóa các dị ứng
                _unitOfWork.Repository<UserAllergy>().DeleteRangeAsync(allergiesToDelete);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "Xóa dị ứng thất bại");
            }
        }
        public async Task<IEnumerable<UserAllergyResponse>> GetUserAllergies()
        {
            try
            {

                // Lấy userId từ token
                var userId = _tokenService.GetUserIdFromToken();

                // Lấy danh sách các dị ứng của người dùng
                var userAllergies = await _unitOfWork.Repository<UserAllergy>()
                    .FindAsync(x => x.SmartDietUserId == userId, includes: x => x.Food);

                // Map sang DTO và trả về
                return _mapper.Map<IEnumerable<UserAllergyResponse>>(userAllergies);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "Some thing wennt wrong");
            }
        }
    }
}
</file>

<file path="Services/UserDishInteractionService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.DishDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserDishInteractionService : IUserDishInteractionService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public UserDishInteractionService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateUserDishInteractionAsync(UserDishInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existing = await _unitOfWork.Repository<UserDishInteraction>().FirstOrDefaultAsync(
                    x => x.SmartDietUserId == userId && x.DishId == dto.DishId);

                //if (existing.Any())
                //    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Interaction already exists!");
                if (existing != null)
                {
                    var updateDto = new UserDishInteractionDTO
                    {
                        DishId = dto.DishId,
                        InteractionType = dto.InteractionType
                    };
                    await UpdateUserDishInteractionAsync(existing.Id, updateDto);
                }
                else
                {
                    var interaction = _mapper.Map<UserDishInteraction>(dto);
                    interaction.SmartDietUserId = userId;
                    interaction.CreatedBy = userId;
                    interaction.CreatedTime = DateTime.UtcNow;
                    interaction.InteractionDate = DateTime.UtcNow;

                    await _unitOfWork.Repository<UserDishInteraction>().AddAsync(interaction);
                    await _unitOfWork.SaveChangeAsync();
                }
                
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserDishInteractionResponse> CreateDishInteractionAsync(UserDishInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existing = await _unitOfWork.Repository<UserDishInteraction>().FirstOrDefaultAsync(
                    x => x.SmartDietUserId == userId && x.DishId == dto.DishId);

                if (existing != null)
                {
                    // Nếu đã tồn tại, cập nhật thay vì tạo mới
                    var updateDto = new UserDishInteractionDTO
                    {
                        DishId = dto.DishId,
                        InteractionType = dto.InteractionType
                    };
                    await UpdateUserDishInteractionAsync(existing.Id, updateDto);
                    existing.InteractionType = dto.InteractionType;
                    existing.InteractionDate = DateTime.UtcNow;
                    await _unitOfWork.SaveChangeAsync();
                    return _mapper.Map<UserDishInteractionResponse>(existing);
                }
                else
                {
                    // Nếu chưa có, tạo mới
                    var interaction = _mapper.Map<UserDishInteraction>(dto);
                    interaction.SmartDietUserId = userId;
                    interaction.CreatedBy = userId;
                    interaction.CreatedTime = DateTime.UtcNow;
                    interaction.InteractionDate = DateTime.UtcNow;

                    await _unitOfWork.Repository<UserDishInteraction>().AddAsync(interaction);
                    await _unitOfWork.SaveChangeAsync();

                    return _mapper.Map<UserDishInteractionResponse>(interaction);
                }
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteUserDishInteractionAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserDishInteraction>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized deletion!");

                _unitOfWork.Repository<UserDishInteraction>().DeleteAsync(interaction);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<UserDishInteractionResponse>> GetAllUserDishInteractionsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interactions = await _unitOfWork.Repository<UserDishInteraction>().FindAsync(
                    x => x.CreatedBy == userId, includes: x => x.Dish);

                return _mapper.Map<IEnumerable<UserDishInteractionResponse>>(interactions);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserDishInteractionResponse> GetUserDishInteractionByIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserDishInteraction>().GetByIdAsync(id,
                    includes: x => x.Dish)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized access!");

                return _mapper.Map<UserDishInteractionResponse>(interaction);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserDishInteractionResponse> GetUserDishInteractionByDishIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserDishInteraction>().FirstOrDefaultAsync(x => x.DishId == id,
                    includes: x => x.Dish)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized access!");

                return _mapper.Map<UserDishInteractionResponse>(interaction);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateUserDishInteractionAsync(string id, UserDishInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserDishInteraction>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized update!");

                var existing = await _unitOfWork.Repository<UserDishInteraction>().FindAsync(
                    x => x.SmartDietUserId == userId && x.DishId == dto.DishId && x.InteractionType == dto.InteractionType && x.Id != id);

                if (existing.Any())
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Duplicate interaction detected!");

                _mapper.Map(dto, interaction);
                interaction.InteractionDate = DateTime.UtcNow;
                interaction.LastUpdatedBy = userId;
                interaction.LastUpdatedTime = DateTime.UtcNow;

                await _unitOfWork.Repository<UserDishInteraction>().UpdateAsync(interaction);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/UserMealInteractionService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.MealDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserMealInteractionService : IUserMealInteractionService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public UserMealInteractionService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateUserMealInteractionAsync(UserMealInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existing = await _unitOfWork.Repository<UserMealInteraction>().FirstOrDefaultAsync(
                    x => x.SmartDietUserId == userId && x.MealId == dto.MealId);

                //if (existing != null)
                //    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Interaction already exists!");

                if (existing != null)
                {
                    // Interaction exists, so update it
                    var updateDto = new UserMealInteractionDTO
                    {
                        MealId = dto.MealId,
                        InteractionType = dto.InteractionType
                    };
                    await UpdateUserMealInteractionAsync(existing.Id, updateDto);
                }
                else
                {
                    // No interaction exists, so create a new one
                    var interaction = _mapper.Map<UserMealInteraction>(dto);
                    interaction.SmartDietUserId = userId;
                    interaction.CreatedBy = userId;
                    interaction.CreatedTime = DateTime.UtcNow;
                    interaction.LastInteractionTime = DateTime.UtcNow;

                    await _unitOfWork.Repository<UserMealInteraction>().AddAsync(interaction);
                    await _unitOfWork.SaveChangeAsync();
                }
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteUserMealInteractionAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserMealInteraction>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized deletion!");

                _unitOfWork.Repository<UserMealInteraction>().DeleteAsync(interaction);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<UserMealInteractionResponse>> GetAllUserMealInteractionsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interactions = await _unitOfWork.Repository<UserMealInteraction>().FindAsync(
                    x => x.CreatedBy == userId, includes: x => x.Meal);

                return _mapper.Map<IEnumerable<UserMealInteractionResponse>>(interactions);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserMealInteractionResponse> GetUserMealInteractionByIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserMealInteraction>().GetByIdAsync(id,
                    includes: x => x.Meal)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized access!");

                return _mapper.Map<UserMealInteractionResponse>(interaction);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<UserMealInteractionResponse> CreateMealInteractionAsync(UserMealInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existing = await _unitOfWork.Repository<UserMealInteraction>().FirstOrDefaultAsync(
                    x => x.SmartDietUserId == userId && x.MealId == dto.MealId);

                if (existing != null)
                {
                    // Nếu đã tồn tại, cập nhật thay vì tạo mới
                    var updateDto = new UserMealInteractionDTO
                    {
                        MealId = dto.MealId,
                        InteractionType = dto.InteractionType
                    };
                    await UpdateUserMealInteractionAsync(existing.Id, updateDto);
                    existing.InteractionType = dto.InteractionType;
                    existing.LastInteractionTime = DateTime.UtcNow;
                    await _unitOfWork.SaveChangeAsync();
                    return _mapper.Map<UserMealInteractionResponse>(existing);
                }
                else
                {
                    // Nếu chưa có, tạo mới
                    var interaction = _mapper.Map<UserMealInteraction>(dto);
                    interaction.SmartDietUserId = userId;
                    interaction.CreatedBy = userId;
                    interaction.CreatedTime = DateTime.UtcNow;
                    interaction.LastInteractionTime = DateTime.UtcNow;

                    await _unitOfWork.Repository<UserMealInteraction>().AddAsync(interaction);
                    await _unitOfWork.SaveChangeAsync();

                    return _mapper.Map<UserMealInteractionResponse>(interaction);
                }
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
        public async Task<UserMealInteractionResponse> GetUserMealInteractionByMealIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserMealInteraction>().FirstOrDefaultAsync(x => x.MealId == id, 
                    includes: x => x.Meal)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized access!");

                return _mapper.Map<UserMealInteractionResponse>(interaction);
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateUserMealInteractionAsync(string id, UserMealInteractionDTO dto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var interaction = await _unitOfWork.Repository<UserMealInteraction>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Interaction not found!");

                if (interaction.CreatedBy != userId)
                    throw new ErrorException(StatusCodes.Status403Forbidden, ErrorCode.FORBIDDEN, "Unauthorized update!");

                var existing = await _unitOfWork.Repository<UserMealInteraction>().FindAsync(
                    x => x.SmartDietUserId == userId && x.MealId == dto.MealId && x.InteractionType == dto.InteractionType && x.Id != id);

                if (existing.Any())
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Duplicate interaction detected!");

                _mapper.Map(dto, interaction);
                interaction.LastInteractionTime = DateTime.UtcNow;
                interaction.LastUpdatedBy = userId;
                interaction.LastUpdatedTime = DateTime.UtcNow;

                await _unitOfWork.Repository<UserMealInteraction>().UpdateAsync(interaction);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException) { throw; }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/UserService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.AuthDTOs;
using DTOs.DishDTOs;
using DTOs.UserProfileDTos;
using Google.Apis.Util;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserService : IUserService
    {
        private readonly IEmailService _emailService ;
        private readonly IUnitOfWork _unitOfWork;
        private readonly UserManager<SmartDietUser> _userManager;
        private readonly SignInManager<SmartDietUser> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IHttpContextAccessor _contextAccessor;
        private readonly IMapper _mapper;

        public UserService(
            IUnitOfWork unitOfWork, 
            UserManager<SmartDietUser> userManager, 
            SignInManager<SmartDietUser> signInManager, 
            RoleManager<IdentityRole> roleManager,
            IHttpContextAccessor contextAccessor,
            IMapper mapper,
            IEmailService emailService)
        {
            _unitOfWork = unitOfWork;
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
            _contextAccessor = contextAccessor;
            _mapper = mapper;
            _emailService = emailService;
        }

        public async Task UpdateUserProfiles(UpdateUserProfileRequest input)
        {
            string? userId = _contextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ??
                throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "Token not valid");

            SmartDietUser? user = await _userManager.Users.Include(x => x.UserProfile).FirstOrDefaultAsync(x => x.Id == userId) ??
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User not exist");

            UserProfile userProfile = await _unitOfWork.Repository<UserProfile>().GetByIdAsync(user.UserProfile.Id);
            if (userProfile.DeletedBy != null)
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User have been deleted");

            _mapper.Map(input, userProfile);
            userProfile.LastUpdatedBy = user.Id;
            userProfile.LastUpdatedTime = DateTime.UtcNow;

            await _unitOfWork.Repository<UserProfile>().UpdateAsync(userProfile);
            await _unitOfWork.SaveChangeAsync();
        }

        public async Task DeleteUser(string userId)
        {
            if(string.IsNullOrEmpty(userId))
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "UserId cannot be null. ");  

            string? currentUser = _contextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ??
                throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "Token not valid. ");

            var user = await _userManager.FindByIdAsync(currentUser)
                ?? throw new Exception("Please login.");

            var roles = await _userManager.GetRolesAsync(user);

            if (!roles.Contains("Admin") && currentUser != userId)
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User does not have permission. ");

            SmartDietUser? userExist = await _userManager.Users.Include(x => x.UserProfile).FirstOrDefaultAsync(x => x.Id == userId) ??
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User not found. ");

            UserProfile userProfile = await _unitOfWork.Repository<UserProfile>().GetByIdAsync(userExist.UserProfile.Id);
            if(userProfile.DeletedBy != null)
               throw new ErrorException(StatusCodes.Status404NotFound,ErrorCode.NOT_FOUND,"User have been deleted. ");

            userProfile.DeletedBy = currentUser;
            userProfile.DeletedTime = DateTime.UtcNow;
            
            await _unitOfWork.Repository<UserProfile>().UpdateAsync(userProfile);
            await _unitOfWork.SaveChangeAsync();
        }

        public async Task<UserProfileResponse> GetUserProfile()
        {
            string? userId = _contextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ??
                throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "Token not valid");

            SmartDietUser? userExist = await _userManager.Users.Include(x => x.UserProfile).FirstOrDefaultAsync(x => x.Id == userId) ??
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User not found. ");

            UserProfile userProfile = await _unitOfWork.Repository<UserProfile>().GetByIdAsync(userExist.UserProfile.Id);
            if (userProfile.DeletedBy != null)
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "User have been deleted");
            
            var response = _mapper.Map<UserProfileResponse>(userProfile);
            return response;
        }
        private string CreateNumericPassword()
        {
            const int length = 6; 
            const string digits = "0123456789"; 
            Random random = new Random();
            char[] password = new char[length];

            for (int i = 0; i < length; i++)
            {
                password[i] = digits[random.Next(digits.Length)];
            }

            return new string(password);
        }
        public async Task<IEnumerable<UserProfileResponse>> GetAllUserProfile()
        {
            try
            {
                var userProfile = await _unitOfWork.Repository<UserProfile>().GetAllAsync();
                return _mapper.Map<IEnumerable<UserProfileResponse>>(userProfile);
            }
            catch
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "An error occured");
            }
        }
        public async Task<BasePaginatedList<UserProfileResponse>> GetAllUserProfileAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                BasePaginatedList<UserProfile> userProfile = await _unitOfWork.Repository<UserProfile>().GetAllWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.FullName.Contains(searchTerm),
                    orderBy: x => x.OrderBy(d => d.FullName));
                if (userProfile == null || !userProfile.Items.Any())
                {
                    return new BasePaginatedList<UserProfileResponse>(new List<UserProfileResponse>(), 0, pageIndex, pageSize);
                }
                var responses = _mapper.Map<List<UserProfileResponse>>(userProfile.Items);
                return new BasePaginatedList<UserProfileResponse>(
                    responses,
                    responses.Count,
                    pageIndex,
                    pageSize);
            }
            catch
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "An error occured");
            }
        }

        public async Task AddUserWithRoleAsync(RegisterUserWithRoleRequest request)
        {
            string? currentUser = _contextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value
             ?? throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "Token not valid. ");

            SmartDietUser? userExists = await _userManager.FindByEmailAsync(request.Email);
            if (userExists != null)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Email is already exist. ");
            }
            SmartDietUser? newUser = _mapper.Map<SmartDietUser>(request);
            newUser.EmailConfirmed = true;
            newUser.UserName = request.Email;
            string passwordChars = CreateNumericPassword();

            IdentityResult? result = await _userManager.CreateAsync(newUser, passwordChars);
            if (result.Succeeded)
            {
                IdentityRole? role = await _roleManager.FindByIdAsync(request.RoleID);
                await _userManager.AddToRoleAsync(newUser, role.Name);
                await _emailService.SendEmailAsync(request.Email, "Account employee",
                      $"Your password: {passwordChars}");
                await _unitOfWork.Repository<UserProfile>().AddAsync(new UserProfile
                {
                    SmartDietUserId = newUser.Id,
                    FullName = request.Name,
                    ProfilePicture = "",
                    TimeZone = "UTC",
                    PreferredLanguage = "en",
                    EnableEmailNotifications = true,
                    EnableNotifications = true,
                    EnablePushNotifications = true,
                    CreatedBy = newUser.Id,
                });
                await _unitOfWork.SaveChangeAsync();
            }
            else
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, result.Errors.First().Description);
            }

        }
    }
}
</file>

<file path="SmartDietAPI.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.9.34728.123
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "SmartDietAPI", "SmartDietAPI\SmartDietAPI.csproj", "{1AF13D64-3CA5-479C-8173-95839C0BEA7C}"
	ProjectSection(ProjectDependencies) = postProject
		{93608582-9398-4AE0-951A-888CB79FAE02} = {93608582-9398-4AE0-951A-888CB79FAE02}
	EndProjectSection
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "BusinessObjects", "BusinessObjects\BusinessObjects.csproj", "{69C9B296-8E98-4F4A-8287-E5F0569C5D3A}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "DataAccessObjects", "DataAccessObjects\DataAccessObjects.csproj", "{93608582-9398-4AE0-951A-888CB79FAE02}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Services", "Services\Services.csproj", "{09A5AAAA-280B-44B3-ABB6-B6AE6E564146}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Repositories", "Repositories\Repositories.csproj", "{6917E600-539E-4E0D-9A86-30B8F6CB7C9C}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Cores", "Cores\Cores.csproj", "{595F6F01-166F-49B6-8BC3-F6F539D11F30}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "DTOs", "DTOs\DTOs.csproj", "{BAA93181-459F-4B6C-A9B9-CBB04481385C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Test", "Test\Test.csproj", "{14EBB2C6-D5AD-4512-8439-229760D66304}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{1AF13D64-3CA5-479C-8173-95839C0BEA7C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1AF13D64-3CA5-479C-8173-95839C0BEA7C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1AF13D64-3CA5-479C-8173-95839C0BEA7C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1AF13D64-3CA5-479C-8173-95839C0BEA7C}.Release|Any CPU.Build.0 = Release|Any CPU
		{69C9B296-8E98-4F4A-8287-E5F0569C5D3A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{69C9B296-8E98-4F4A-8287-E5F0569C5D3A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{69C9B296-8E98-4F4A-8287-E5F0569C5D3A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{69C9B296-8E98-4F4A-8287-E5F0569C5D3A}.Release|Any CPU.Build.0 = Release|Any CPU
		{93608582-9398-4AE0-951A-888CB79FAE02}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{93608582-9398-4AE0-951A-888CB79FAE02}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{93608582-9398-4AE0-951A-888CB79FAE02}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{93608582-9398-4AE0-951A-888CB79FAE02}.Release|Any CPU.Build.0 = Release|Any CPU
		{09A5AAAA-280B-44B3-ABB6-B6AE6E564146}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{09A5AAAA-280B-44B3-ABB6-B6AE6E564146}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{09A5AAAA-280B-44B3-ABB6-B6AE6E564146}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{09A5AAAA-280B-44B3-ABB6-B6AE6E564146}.Release|Any CPU.Build.0 = Release|Any CPU
		{6917E600-539E-4E0D-9A86-30B8F6CB7C9C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6917E600-539E-4E0D-9A86-30B8F6CB7C9C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6917E600-539E-4E0D-9A86-30B8F6CB7C9C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6917E600-539E-4E0D-9A86-30B8F6CB7C9C}.Release|Any CPU.Build.0 = Release|Any CPU
		{595F6F01-166F-49B6-8BC3-F6F539D11F30}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{595F6F01-166F-49B6-8BC3-F6F539D11F30}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{595F6F01-166F-49B6-8BC3-F6F539D11F30}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{595F6F01-166F-49B6-8BC3-F6F539D11F30}.Release|Any CPU.Build.0 = Release|Any CPU
		{BAA93181-459F-4B6C-A9B9-CBB04481385C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BAA93181-459F-4B6C-A9B9-CBB04481385C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BAA93181-459F-4B6C-A9B9-CBB04481385C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BAA93181-459F-4B6C-A9B9-CBB04481385C}.Release|Any CPU.Build.0 = Release|Any CPU
		{14EBB2C6-D5AD-4512-8439-229760D66304}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{14EBB2C6-D5AD-4512-8439-229760D66304}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{14EBB2C6-D5AD-4512-8439-229760D66304}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{14EBB2C6-D5AD-4512-8439-229760D66304}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {1925E78A-B01B-4A91-A29B-8E4441468F80}
	EndGlobalSection
EndGlobal
</file>

<file path="SmartDietAPI/Controllers/AuthController.cs">
using BusinessObjects.Base;
using DTOs.AuthDTOs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;
        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }
        [HttpPost("Auth_Account")]
        public async Task<IActionResult> Login(LoginRequest request)
        {
            AuthResponse? result = await _authService.Login(request);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("New_Account")]
        public async Task<IActionResult> Register(RegisterRequest request)
        {
            await _authService.Register(request);
            return Ok(ApiResponse<object>.Success(null, "Register successfully"));
        }
        [HttpPatch("Confirm_Email")]
        public async Task<IActionResult> ConfirmEmail([FromBody] ConfirmOtpRequest request)
        {
            await _authService.VerifyOtp(request, false);
            return Ok(ApiResponse<object>.Success(null, "Verify successfully"));
        }
        [HttpPatch("Resend_Confirmation_Email")]
        public async Task<IActionResult> ResendConfirmationEmail(EmailRequest request)
        {
            await _authService.ResendConfirmationEmail(request);
            return Ok(ApiResponse<object>.Success(null, "Email have been sent"));
        }

        [Authorize]
        [HttpPatch("Change_password")]
        public async Task<IActionResult> ChangePassword(ChangePasswordRequest request)
        {
            await _authService.ChangePassword(request);
            return Ok(ApiResponse<object>.Success(null, "Change password successfully"));
        }
        [HttpPost("ForgotPassword")]
        public async Task<IActionResult> ForgotPassword(EmailRequest model)
        {
            await _authService.ForgotPassword(model);
            return Ok(ApiResponse<object>.Success(null, "OTP have been sent to your mail to verify new password."));
        }

        [HttpPost("RefreshToken")]
        public async Task<IActionResult> RefreshToken(RefreshTokenRequest request)
        {
            AuthResponse? result = await _authService.RefreshToken(request);
            return Ok(ApiResponse<object>.Success(result));

        }

        [HttpPatch("Confirm_OTP_ResetPassword")]
        public async Task<IActionResult> ConfirmOTPResetPassword(ConfirmOtpRequest request)
        {
            await _authService.VerifyOtp(request, true);
            return Ok(ApiResponse<object>.Success(null, "Redirect to reset password"));
        }


        [HttpPatch("ResetPassword")]
        public async Task<IActionResult> ResetPassword(ResetPasswordRequest request)
        {
            await _authService.ResetPassword(request);
            return Ok(ApiResponse<object>.Success(null, "Reset password successfully"));
        }
        [HttpPost("signin-google")]
        public async Task<IActionResult> LoginGoogle([FromBody] TokenGoogleRequest request)
        {
            AuthResponse? result = await _authService.LoginGoogle(request);
            return Ok(ApiResponse<object>.Success(result));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/EnumController.cs">
using BusinessObjects.FixedData;
using Microsoft.AspNetCore.Mvc;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EnumController : ControllerBase
    {
        [HttpGet("food-model")]
        public IActionResult GetFoodModelEnums()
        {
            var result = new
            {
                PreservationTypes = Enum.GetNames(typeof(PreservationType)),
                FoodCategories = Enum.GetNames(typeof(FoodCategory))
            };

            return Ok(result);
        }

        [HttpGet("dish-model")]
        public IActionResult GetDishModelEnums()
        {
            var result = new
            {
                DifficultyLevels = Enum.GetNames(typeof(DifficultyLevel)),
                RegionTypes = Enum.GetNames(typeof(RegionType)),
                DietTypes = Enum.GetNames(typeof(DietType))
            };

            return Ok(result);
        }

        [HttpGet("meal-model")]
        public IActionResult GetMealModelEnums()
        {
            var result = new
            {
                DietTypes = Enum.GetNames(typeof(DietType))
            };

            return Ok(result);
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/FavoriteDishController.cs">
using BusinessObjects.Base;
using DTOs.FavoriteDishDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FavoriteDishController : ControllerBase
    {
        private readonly IFavoriteDishService _favoriteDishService;

        public FavoriteDishController(IFavoriteDishService favoriteDishService)
        {
            _favoriteDishService = favoriteDishService;
        }

        [HttpGet()]
        public async Task<IActionResult> All()
        {
            var result = await _favoriteDishService.GetAllFavoriteDishesAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetFavoriteDishes(
            [FromQuery] int pageIndex = 1, 
            [FromQuery] int pageSize = 10, 
            [FromQuery] string? searchTerm = null)
        {
            var result = await _favoriteDishService.GetAllFavoriteDishesAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetFavoriteDishById(string id)
        {
            var result = await _favoriteDishService.GetFavoriteDishByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> AddFavoriteDish(FavoriteDishDTO favoriteDishDTO)
        {
            await _favoriteDishService.CreateFavoriteDishAsync(favoriteDishDTO);
            return Ok(ApiResponse<object>.Success(null, "Favorite dish added successfully", 201));
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateFavoriteDish(string id, FavoriteDishDTO favoriteDishDTO)
        {
            await _favoriteDishService.UpdateFavoriteDishAsync(id, favoriteDishDTO);
            return Ok(ApiResponse<object>.Success(null, "Favorite dish updated successfully"));
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteFavoriteDish(string id)
        {
            await _favoriteDishService.DeleteFavoriteDishAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Favorite dish deleted successfully"));
        }
    }

}
</file>

<file path="SmartDietAPI/Controllers/FridgeController.cs">
using BusinessObjects.Base;
using DTOs.FridgeDTOs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class FridgeController : ControllerBase
    {
        private readonly IFridgeService _fridgeService;
        public FridgeController(IFridgeService fridgeService)
        {
            _fridgeService = fridgeService;
        }
        [HttpGet]
        public async Task<IActionResult> Fridge()
        {
            var result = await _fridgeService.GetAllUserFrige();
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("{id}")]
        public async Task<IActionResult> Fridge(string id)
        {
            var result = await _fridgeService.GetFridgeByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost]
        public async Task<IActionResult> AddFridge(FridgeDTO fridgeDTO)
        {
            await _fridgeService.CreateFridgeAsync(fridgeDTO);
            return Ok(ApiResponse<object>.Success(null, "Fridge created successfully", 201));
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateFridge(string id, FridgeDTO fridgeDTO)
        {
            await _fridgeService.UpdateFridgeAsync(id, fridgeDTO);
            return Ok(ApiResponse<object>.Success(null, "Fridge updated successfully"));
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteFridge(string id)
        {
            await _fridgeService.DeleteFridgeAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Fridge deleted successfully"));
        }
        [HttpGet("items")]
        public async Task<IActionResult> AllFrideItem(string id)
        {
            var result = await _fridgeService.GetAllItemsInFridge(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("items/{id}")]
        public async Task<IActionResult> FrideItem(string id)
        {
            var result = await _fridgeService.GetItemById(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("items")]
        public async Task<IActionResult> AddItemFridge(string fridgeId, List<FridgeItemDTO> fridgeItemDTOs)
        {
            await _fridgeService.AddItemsToFridge(fridgeId, fridgeItemDTOs);
            return Ok(ApiResponse<object>.Success(null, "Item created successfully", 201));
        }
        [HttpPut("items/{id}")]
        public async Task<IActionResult> UpdateItemFridge(string id, FridgeItemDTO fridgeItemDTO)
        {
            await _fridgeService.UpdateItemInFridge(id, fridgeItemDTO);
            return Ok(ApiResponse<object>.Success(null, "Item updated successfully"));
        }
        [HttpDelete("{fridgeId}/item/{id}")]
        public async Task<IActionResult> DeleteItemFridge(string fridgeId, string id)
        {
            await _fridgeService.RemoveItemsFromFridge(fridgeId,id);
            return Ok(ApiResponse<object>.Success(null, "Item deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/ImportController.cs">
using Microsoft.AspNetCore.Mvc;
using Services;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using DTOs.ExcelDTOs;
using OfficeOpenXml;

namespace SmartDietAPI.Controllers
{
    [Route("api/import")]
    [ApiController]
    public class ImportController : ControllerBase
    {
        private readonly IExcelImportService<Meal> _mealImportService;
        private readonly IExcelImportService<Dish> _dishImportService;
        private readonly IExcelImportService<Food> _foodImportService;

        private readonly IFileHandlerService _fileHandlerService;
        private readonly IWebHostEnvironment _env;

        public ImportController(
            IExcelImportService<Meal> mealImportService,
            IExcelImportService<Dish> dishImportService,
            IExcelImportService<Food> foodImportService,
            IFileHandlerService fileHandlerService,
            IWebHostEnvironment env)
        {
            _mealImportService = mealImportService;
            _dishImportService = dishImportService;
            _foodImportService = foodImportService;
            _fileHandlerService = fileHandlerService;
            _env = env;
        }

        [HttpPost("meals")]
        public async Task<IActionResult> ImportMeals(IFormFile file)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            if (!Path.GetExtension(file.FileName).Equals(".xlsx", StringComparison.OrdinalIgnoreCase))
                return BadRequest("Only .xlsx files are allowed");

            try
            {
                var filePath = await _fileHandlerService.SaveUploadedFileAsync(file, "meals.xlsx");
                var result = await _mealImportService.ImportFromExcel<MealExcelDTO>(filePath);
                
                return Ok(ApiResponse<object>.Success(result, "Meals imported successfully"));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Error(
                    errorCode: "IMPORT_MEALS_ERROR", 
                    message: $"Import failed: {ex.Message}", 
                    statusCode: 500
                ));
            }
        }

        [HttpPost("foods")]
        public async Task<IActionResult> ImportFoods(IFormFile file)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            if (!Path.GetExtension(file.FileName).Equals(".xlsx", StringComparison.OrdinalIgnoreCase))
                return BadRequest("Only .xlsx files are allowed");

            try
            {
                var filePath = await _fileHandlerService.SaveUploadedFileAsync(file, "foods.xlsx");
                var result = await _foodImportService.ImportFromExcel<FoodExcelDTO>(filePath);

                return Ok(ApiResponse<object>.Success(result, "Foods imported successfully"));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Error(
                    errorCode: "IMPORT_FOODS_ERROR",
                    message: $"Import failed: {ex.Message}",
                    statusCode: 500
                ));
            }
        }

        [HttpPost("dishes")]
        public async Task<IActionResult> ImportDishs(IFormFile file)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            if (!Path.GetExtension(file.FileName).Equals(".xlsx", StringComparison.OrdinalIgnoreCase))
                return BadRequest("Only .xlsx files are allowed");

            try
            {
                var filePath = await _fileHandlerService.SaveUploadedFileAsync(file, "dishes.xlsx");
                var result = await _dishImportService.ImportFromExcel<DishExcelDTO>(filePath);

                return Ok(ApiResponse<object>.Success(result, "Dishes imported successfully", 201));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Error(
                    errorCode: "IMPORT_FOODS_ERROR",
                    message: $"Import failed: {ex.Message}",
                    statusCode: 500
                ));
            }
        }

        [HttpGet("template/{fileName}")]
        public IActionResult GetImportTemplate(string fileName)
        {
            try
            {
                // Validate filename
                if (string.IsNullOrWhiteSpace(fileName) || 
                    fileName.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
                {
                    return BadRequest(ApiResponse<object>.Error(
                        "INVALID_FILENAME", 
                        "Invalid file name format", 
                        400
                    ));
                }

                var sanitizedFileName = Path.GetFileNameWithoutExtension(fileName);
                var fullFileName = $"{sanitizedFileName}.xlsx";
                var filePath = Path.Combine(_env.ContentRootPath, "Data", fullFileName);

                Console.WriteLine("\n\n\n"+filePath);

                if (!System.IO.File.Exists(filePath))
                    return NotFound(ApiResponse<object>.Error(
                        "FILE_NOT_FOUND", 
                        $"Template file '{sanitizedFileName}' not found", 
                        404
                    ));

                Response.Headers.Append("Cache-Control", "no-cache, no-store, must-revalidate");
                Response.Headers.Append("Pragma", "no-cache");
                Response.Headers.Append("Expires", "0");

                return PhysicalFile(
                    filePath,
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    $"{sanitizedFileName}.xlsx");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Error(
                    "TEMPLATE_ERROR",
                    $"Failed to retrieve template: {ex.Message}",
                    500
                ));
            }
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/MealController.cs">
using BusinessObjects.Base;
using DTOs.MealDTOs;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;
using System.Security.Permissions;
using Newtonsoft.Json;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MealController : Controller
    {
        private readonly IMealService _mealService;
        public MealController(IMealService mealService)
        {
            _mealService = mealService;
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetMeals([FromQuery] int pageIndex = 1, [FromQuery] int pageSize = 10, [FromQuery] string? searchTerm = null)
        {
            var result = await _mealService.GetAllMealsAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("{id}")]
        public async Task<IActionResult> GetMealById(string id)
        {
            var result = await _mealService.GetMealByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("create")]
        public async Task<IActionResult> AddMeal([FromForm] MealDTO mealDTO, [FromForm] string? dishIds)
        {
            var dishIdsList = JsonConvert.DeserializeObject<List<string>>(dishIds);
            mealDTO.DishIds = dishIdsList;
            await _mealService.CreateMealAsync(mealDTO);
            return Ok(ApiResponse<object>.Success(null, "Meal created successfully", 201));
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateMeal(string id, [FromForm] MealDTO mealDTO, [FromForm] string? dishIds)
        {
            // Deserialize DishIds từ JSON string
            var dishIdsList = JsonConvert.DeserializeObject<List<string>>(dishIds);
            mealDTO.DishIds = dishIdsList;
            await _mealService.UpdateMealAsync(id, mealDTO);
            return Ok(ApiResponse<object>.Success(null, "Meal updated successfully"));
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteMeal(string id)
        {
            await _mealService.DeleteMealAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Meal deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/SubcriptionController.cs">
using BusinessObjects.Base;
using DTOs.DishDTOs;
using DTOs.SubcriptionDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SubcriptionController : ControllerBase
    {
        private ISubcriptionService _service;
        public SubcriptionController(ISubcriptionService service)
        {
            _service = service;
        }
        [HttpGet("all")]
        public async Task<IActionResult> GetDishes()
        {
            var result = await _service.GetAllSubcriptionAsync();
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("{id}")]
        public async Task<IActionResult> GetSubcriptionById(string id)
        {
            var result = await _service.GetSubcriptionByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("create")]
        public async Task<IActionResult> AddSubcription(SubcriptionRequest request)
        {
            await _service.CreateSubcriptionAsync(request);
            return Ok(ApiResponse<object>.Success(null, "Subscription created successfully", 201));
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateSubcription(string id, SubcriptionRequest request)
        {
            await _service.UpdateSubcriptionAsync(id, request);
            return Ok(ApiResponse<object>.Success(null, "Subscription updated successfully"));
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDish(string id)
        {
            await _service.DeleteSubcriptionAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Subscription deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UserAllergyController.cs">
using BusinessObjects.Base;
using DTOs.UserAllergyDTOs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class UserAllergyController : ControllerBase
    {
        private IUserAllergyService _userAllergyService;
        public UserAllergyController(IUserAllergyService userAllergyService)
        {
            _userAllergyService = userAllergyService;
        }

        //[HttpGet]
        //public async Task<IActionResult> UserAllergies() 
        //{
        //    var result = await _userAllergyService.GetUserAllergies();
        //    return Ok(ApiResponse<object>.Success(result));
        //}

        [HttpPost("add")]
        public async Task<IActionResult> AddUserAllergies([FromBody] List<UserAllergyDTO> userAllergyDTOs)
        {
            await _userAllergyService.AddUserAllergies(userAllergyDTOs);
            return Ok(ApiResponse<object>.Success(null, "Allergies added successfully", 201));
        }

        // Xóa các dị ứng của người dùng dựa trên danh sách FoodId
        [HttpDelete("remove")]
        public async Task<IActionResult> RemoveUserAllergies([FromBody] List<string> foodIds)
        {
            await _userAllergyService.RemoveUserAllergies(foodIds);
            return Ok(ApiResponse<object>.Success(null, "Allergies removed successfully"));
        }


    }
}
</file>

<file path="SmartDietAPI/Controllers/UserDishInteractionController.cs">
using BusinessObjects.Base;
using DTOs.DishDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserDishInteractionController : ControllerBase
    {
        private readonly IUserDishInteractionService _service;

        public UserDishInteractionController(IUserDishInteractionService service)
        {
            _service = service;
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetAll()
        {
            var result = await _service.GetAllUserDishInteractionsAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("dish/{dishId}")]
        public async Task<IActionResult> GetByDishId(string dishId)
        {
            var result = await _service.GetUserDishInteractionByDishIdAsync(dishId);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(string id)
        {
            var result = await _service.GetUserDishInteractionByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> Create(UserDishInteractionDTO dto)
        {
            await _service.CreateUserDishInteractionAsync(dto);
            return Ok(ApiResponse<object>.Success(null, "Created successfully", 201));
        }

        [HttpPost]
        public async Task<IActionResult> CreateInteraction(UserDishInteractionDTO dto)
        {
            var result = await _service.CreateDishInteractionAsync(dto);
            return Ok(ApiResponse<object>.Success(result, "Created successfully", 201));
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(string id, UserDishInteractionDTO dto)
        {
            await _service.UpdateUserDishInteractionAsync(id, dto);
            return Ok(ApiResponse<object>.Success(null, "Updated successfully"));
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(string id)
        {
            await _service.DeleteUserDishInteractionAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UserFeedbackController.cs">
using BusinessObjects.Base;
using BusinessObjects.Entity;
using DTOs.FavoriteDishDTOs;
using DTOs.UserFeedbackDTOs;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserFeedbackController : Controller
    {
        private readonly IUserFeedbackService _userFeedbackService;

        public UserFeedbackController(IUserFeedbackService userFeedbackService)
        {
            _userFeedbackService = userFeedbackService;
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetAllUserFeedbacks()
        {
            var result = await _userFeedbackService.GetAllUserFeedbackAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetUserFeedbackBySmartDietUserIds(string id)
        {
            var result = await _userFeedbackService.GetUserFeedbackBySmartDietUserIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> CreateUserFeedback(UserFeedbackDTO userFeedback)
        {
            await _userFeedbackService.CreateUserFeedbackAsync(userFeedback);
            return Ok(ApiResponse<object>.Success(null, "Created successfully", 201));
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUserFeedback(string id)
        {
            await _userFeedbackService.DeleteUserFeedbackAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UserPreferenceController.cs">
using BusinessObjects.Base;
using DTOs.FavoriteMealDTOs;
using DTOs.UserPreferenceDTOs;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserPreferenceController : Controller
    {
        private readonly IUserPreferenceService _userPreferenceService;

        public UserPreferenceController(IUserPreferenceService userPreferenceService)
        {
            _userPreferenceService = userPreferenceService;
        }

        [HttpGet()]
        public async Task<IActionResult> GetUserPreferenceById()
        {
            var result = await _userPreferenceService.GetUserPreferenceByIdAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> AddUserPreference(UserPreferenceDTO userPreferenceDto)
        {
            await _userPreferenceService.CreateUserPreferenceAsync(userPreferenceDto);
            return Ok(ApiResponse<object>.Success(null, "Preference created successfully", 201));
        }

        [HttpPut()]
        public async Task<IActionResult> UpdateUserPreference(UserPreferenceDTO userPreferenceDto)
        {
            await _userPreferenceService.UpdateUserPreferenceAsync(userPreferenceDto);
            return Ok(ApiResponse<object>.Success(null, "Preference updated successfully"));
        }
    }
}
</file>

<file path="BusinessObjects/BusinessObjects.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="12.0.0" />
    <PackageReference Include="CloudinaryDotNet" Version="1.26.2" />
    <PackageReference Include="EPPlus" Version="6.2.1" />
    <PackageReference Include="Google.Apis.Auth" Version="1.68.0" />
    <PackageReference Include="MailKit" Version="4.8.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Google" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="2.2.2" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Abstractions" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="8.0.0" />
    <PackageReference Include="MimeKit" Version="4.8.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="payOS" Version="1.0.9" />
    <PackageReference Include="Swashbuckle.AspNetCore.Newtonsoft" Version="7.2.0" />
  </ItemGroup>

</Project>
</file>

<file path="BusinessObjects/Entity/UserPayment.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Entity
{
    public class UserPayment : BaseEntity
    {
        public string description { get; set; }
        public float Amount { get; set; } 
        public string? PaymentMethod { get; set; } 
        public DateTime PaymentDate { get; set; } = DateTime.Now;
        public string? PaymentStatus { get; set; }
        public string SubcriptionId { get; set; }
        public string SmartDietUserId { get; set; }
        public Subcription Subcription { get; set; }
        public SmartDietUser SmartDietUser { get; set; }
    }
}
</file>

<file path="BusinessObjects/Enum/RegionType.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.FixedData
{
    [Flags]
    public enum RegionType
    {
        None = 0,
        NViet = 1,
        TViet = 2,
        BViet = 4


        #region Old
        //American,
        //Italian,
        //Chinese,
        //Japanese,
        //Mexican,
        //Indian,
        //Thai,
        //Mediterranean,
        //French,
        //Korean,
        //Vietnamese,
        //MiddleEastern,
        //Greek,
        //Spanish,
        //Brazilian,
        #endregion


    }
}
</file>

<file path="DTOs/AuthDTOs/AuthResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class AuthResponse
    {
        public string AccessToken { get; set; }

        public string RefreshToken { get; set; }
        public UserInfo User { get; set; }
    }

    public class UserInfo
    {
        public string Email { get; set; }
        public List<string> Roles { get; set; }
    }
}
</file>

<file path="DTOs/AuthDTOs/ChangePasswordRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class ChangePasswordRequest
    {	public  string? OldPassword { get; set; }
    	public  string? NewPassword { get; set; }
    }
}
</file>

<file path="DTOs/AuthDTOs/LoginRequest.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.AuthDTOs
{
    public class LoginRequest
    {

        public  string? Email { get; set; }
		public  string? Password { get; set; }

    }
}
</file>

<file path="DTOs/ExcelDTOs/FoodExcelDTO.cs">
using BusinessObjects.Base;

namespace DTOs.ExcelDTOs
{
public class FoodExcelDTO
    {
        [Column(1)]  
        public string Name { get; set; }
        
        [Column(2)]
        public string Description { get; set; }
        
        [Column(3)]
        public string StorageGuidelines { get; set; } = "Hiện tại không có hướng dẫn bảo quản";
        
        [Column(4)]
        public int? ShelfLifeRoomTemp { get; set; }
        
        [Column(5)]
        public int? ShelfLifeRefrigerated { get; set; }
        
        [Column(6)]
        public int? ShelfLifeFrozen { get; set; }
        
        [Column(7)]
        public string PreservationType { get; set; }
        
        [Column(8)]
        public string Category { get; set; }
        
        [Column(9)]  
        public string Image { get; set; }
    }
}
</file>

<file path="DTOs/PaymentDTOs/CreatePaymentLinkRequest.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.PaymentDTOs
{
    public class CreatePaymentLinkRequest
    {
        public string productName { get; set; }
        public string description { get; set; }
        public string subcriptionId { get; set; }
        
        public int price { get; set; }
       public string returnUrl { get; set; }
       public string cancelUrl { get; set; }
    }
}
</file>

<file path="DTOs/UserPreferenceDTOs/UserPreferenceResponse.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BusinessObjects.FixedData;

namespace DTOs.UserPreferenceDTOs
{
    public class UserPreferenceResponse
    {
        public string Id { get; set; }

        // Dietary Preferences
        public string PrimaryDietType { get; set; }
        public List<RegionType> PrimaryRegionTypes { get; set; } = new List<RegionType>();
        public int DailyMealCount { get; set; }
        public int DishesPerMealCount { get; set; }

        // Cooking Preferences
        public int MaxCookingTime { get; set; }
        public string MaxRecipeDifficulty { get; set; }
        public bool NotifyLowInventory { get; set; }
        public decimal LowInventoryThreshold { get; set; }
    }
}
</file>

<file path="Repositories/Interfaces/IGenericRepository.cs">
using BusinessObjects.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Interfaces
{
    public interface IGenericRepository<T> where T : class
    {
        Task<T> GetByIdAsync(
            string id,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes);
        Task<T> GetDeletedByIdAsync(
            string id,
            params Expression<Func<T, object>>[] includes);
        Task<IEnumerable<T>> GetAllAsync(
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes);
        Task<IEnumerable<T>> GetAllDeletedAsync(
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            params Expression<Func<T, object>>[] includes);
        Task<BasePaginatedList<T>> GetAllWithPaginationAsync(
            int pageIndex,
            int pageSize,
    Expression<Func<T, bool>> searchTerm = null,
    Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
    Func<IQueryable<T>, IQueryable<T>> include = null,
    params Expression<Func<T, object>>[] includes);
        Task<BasePaginatedList<T>> FindWithPaginationAsync(
    int pageIndex,
    int pageSize,
    Expression<Func<T, bool>> predicate,
    Expression<Func<T, bool>> searchTerm = null,
    Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
    Func<IQueryable<T>, IQueryable<T>> include = null,
    params Expression<Func<T, object>>[] includes);
        Task AddAsync(T entity);
        Task AddRangeAsync(IEnumerable<T> entities);
        Task UpdateAsync(T entity);
        Task UpdateRangeAsync(IEnumerable<T> entities);
        void DeleteAsync(T entity);
        void DeleteRangeAsync(IEnumerable<T> entities);
        Task<IEnumerable<T>> FindAsync(
           Expression<Func<T, bool>> predicate,
           Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
           Func<IQueryable<T>, IQueryable<T>> include = null,
           params Expression<Func<T, object>>[] includes);
        Task<IEnumerable<T>> FindDeletedAsync(
           Expression<Func<T, bool>> predicate,
           Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
           params Expression<Func<T, object>>[] includes);
        Task<T> FirstOrDefaultAsync(
            Expression<Func<T, bool>> predicate,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes);
        Task<T> FirstOrDefaultDeletedAsync(
            Expression<Func<T, bool>> predicate,
            params Expression<Func<T, object>>[] includes);
        Task<bool> AnyAsync(Expression<Func<T, bool>> expression, bool asNoTracking = true);
    }
}
</file>

<file path="Services/DishRecommendationService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using DTOs.DishDTOs;
using Repositories.Interfaces;
using BusinessObjects.Exceptions;
using BusinessObjects.Enum;
using BusinessObjects.FixedData;

namespace SmartDietAPI.Services
{
    public class DishRecommendationService : IDishRecommendationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly DishRecommendationSettings _settings;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public DishRecommendationService(IUnitOfWork unitOfWork,
            IOptions<DishRecommendationSettings> options,
            IMapper mapper,
            ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _settings = options.Value;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task<IEnumerable<DishResponse>> GenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Get user preferences
                var userPreferences = await _unitOfWork.Repository<UserPreference>()
                    .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, 
                        ErrorCode.NOT_FOUND, 
                        "User preferences not found");

                // Get user allergies
                var userAllergies = await _unitOfWork.Repository<UserAllergy>()
                    .FindAsync(ua => ua.SmartDietUserId == userId);

                // Get recently recommended dishes
                var recentDishes = await _unitOfWork.Repository<DishRecommendHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

                var recentDishIds = recentDishes.Select(r => r.DishId).ToHashSet();

                // Get all dishes with includes
                var allDishes = await _unitOfWork.Repository<Dish>().GetAllAsync(
                    include: query => query
                        .Include(d => d.DishIngredients)
                        .ThenInclude(di => di.Food)
                );

                // Filter dishes based on user preferences
                var filteredDishes = allDishes.Where(d =>
                    !recentDishIds.Contains(d.Id) &&
                    d.DietType == userPreferences.PrimaryDietType &&
                    (userPreferences.PrimaryRegionType == RegionType.None || 
                     d.RegionType == RegionType.None ||
                     userPreferences.PrimaryRegionType.HasFlag(d.RegionType) ||
                     d.RegionType.HasFlag(userPreferences.PrimaryRegionType)) &&
                    d.CookingTimeMinutes <= userPreferences.MaxCookingTime &&
                    //d.Difficulty <= userPreferences.MaxRecipeDifficulty &&
                    !d.DishIngredients.Any(di => userAllergies.Any(ua => ua.FoodId == di.FoodId))
                ).ToList();

                if (!filteredDishes.Any())
                {
                    throw new ErrorException(StatusCodes.Status404NotFound,
                        ErrorCode.NOT_FOUND,
                        "No dishes match current preferences");
                }

                // Score and sort dishes
                var scoredDishes = filteredDishes.Select(d => new
                {
                    Dish = d,
                    Score = CalculateDishScore(d, userId)
                }).OrderByDescending(d => d.Score).ToList();

                // Take top N dishes
                var recommendedDishes = scoredDishes
                    .Take(_settings.MaxDishesToRecommend)
                    .Select(d => d.Dish)
                    .ToList();

                // Save recommendations to history
                foreach (var dish in recommendedDishes)
                {
                    await _unitOfWork.Repository<DishRecommendHistory>().AddAsync(new DishRecommendHistory
                    {
                        Id = Guid.NewGuid().ToString(),
                        SmartDietUserId = userId,
                        DishId = dish.Id,
                        CreatedBy = userId,
                        RecommendationDate = DateTime.UtcNow
                    });
                }

                await _unitOfWork.SaveChangeAsync();

                return _mapper.Map<IEnumerable<DishResponse>>(recommendedDishes);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log full error details
                Console.WriteLine($"ERROR in GenerateRecommendationsAsync: {ex}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                
                throw new ErrorException(StatusCodes.Status500InternalServerError,
                    ErrorCode.INTERNAL_SERVER_ERROR,
                    $"Recommendation failed: {ex.Message}");
            }
        }

        public async Task<IEnumerable<DishResponse>> GetRecommendedDishesAsync()
        {
            try
            {
                Console.WriteLine("1 GetRecommendedDishesAsync"); // Log 1
                var userId = _tokenService.GetUserIdFromToken();
                Console.WriteLine($"UserId: {userId}"); // Log 2
                var recentRecommendations = await _unitOfWork.Repository<DishRecommendHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId,
                        include: query => query.Include(x => x.Dish)
                        .ThenInclude(x => x.DishIngredients)
                        );
                Console.WriteLine($"Count recentRecommendations: {recentRecommendations.Count()}"); // Log 3

                Console.WriteLine("Bắt đầu mapping DishResponse"); // Log 4
                var dishResponses = _mapper.Map<IEnumerable<DishResponse>>(recentRecommendations.Select(r => r.Dish));
                Console.WriteLine("Kết thúc mapping DishResponse"); // Log 5
                return dishResponses;
            }
            catch (Exception ex)
            {
                // Ghi log exception gốc để debug
                Console.WriteLine($"Lỗi trong GetRecommendedDishesAsync: {ex}");
                throw new ErrorException(StatusCodes.Status500InternalServerError,
                    ErrorCode.INTERNAL_SERVER_ERROR,
                    "Lỗi khi lấy danh sách món ăn được đề xuất. Xem log để biết thêm chi tiết.");
            }
        }

        public async Task<IEnumerable<DishResponse>> RegenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                // Clear recent recommendations
                var recentRecommendations = await _unitOfWork.Repository<DishRecommendHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

                _unitOfWork.Repository<DishRecommendHistory>().DeleteRangeAsync(recentRecommendations);
                await _unitOfWork.SaveChangeAsync();

                // Generate new recommendations
                return await GenerateRecommendationsAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception)
            {
                // Log the exception and rethrow or handle it as needed
                throw new ErrorException(StatusCodes.Status500InternalServerError,
                    ErrorCode.INTERNAL_SERVER_ERROR,
                    "Failed to regenerate dish recommendations");
            }
        }

        public async Task<IEnumerable<DishResponse>> GetRecommendationHistoryAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var recommendationHistory = await _unitOfWork.Repository<DishRecommendHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId,
                        include: query => query.Include(x => x.Dish)
                        .ThenInclude(x => x.DishIngredients));

                return _mapper.Map<IEnumerable<DishResponse>>(recommendationHistory.Select(r => r.Dish));
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception )
            {
                // Log the exception and rethrow or handle it as needed
                throw new ErrorException(StatusCodes.Status500InternalServerError,
                    ErrorCode.INTERNAL_SERVER_ERROR,
                    "Failed to get dish recommendation history");
            }
        }

        private async Task<double> CalculateDishScore(Dish dish, string userId)
        {
            try
            {
                // Calculate average rating
                var ratings = await _unitOfWork.Repository<DishRating>()
                    .FindAsync(dr => dr.DishId == dish.Id);
                
                var averageRating = ratings.Any() 
                    ? ratings.Average(dr => dr.Rating) 
                    : 0;

                var dishRatingPoints = averageRating * _settings.Points.DishRatingPerStar;

                // Get user interaction
                var userInteraction = await _unitOfWork.Repository<UserDishInteraction>()
                    .FirstOrDefaultAsync(udi => udi.SmartDietUserId == userId && udi.DishId == dish.Id);

                // Calculate interaction points
                var interactionPoints = userInteraction?.InteractionType switch
                {
                    InteractionType.Liked => _settings.Points.LikedDish,
                    InteractionType.Disliked => _settings.Points.DislikedDish,
                    _ => 0
                };

                // Add points for new dishes
                var newDishPoints = userInteraction == null ? _settings.Points.NewDish : 0;

                // Add seasonal bonus if applicable
                var seasonalBonus = IsSeasonalDish(dish) ? _settings.Points.SeasonalBonus : 0;

                return dishRatingPoints + interactionPoints + newDishPoints + seasonalBonus;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error calculating score for dish {dish.Id}: {ex}");
                return 0;
            }
        }

        private bool IsSeasonalDish(Dish dish)
        {
            // Implement seasonal logic here
            return false;
        }

        // Implement other interface methods similarly to MealRecommendationService
        // RegenerateRecommendationsAsync
        // GetRecommendedDishesAsync
        // GetRecommendationHistoryAsync
    }
}
</file>

<file path="Services/ExcelImportService.cs">
using System.Reflection;
using OfficeOpenXml;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using Repositories.Interfaces;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Collections.Generic;
using Microsoft.AspNetCore.Http;
using System.Net.Http;
using System.IO;
using Services.Interfaces;

namespace Services
{
    public interface IExcelImportService<T> where T : BaseEntity, new()
    {
        Task<ExcelImportResult<T>> ImportFromExcel<TDto>(string filePath) where TDto : class;

    }

    public class ExcelImportService<T> : IExcelImportService<T> where T : BaseEntity, new()
    {
        private readonly IUnitOfWork _unitOfWork;
        private const int RequiredColumnIndex = 1; // Column A
        private readonly ICloudinaryService _cloudinaryService;
        public ExcelImportService(IUnitOfWork unitOfWork, ICloudinaryService cloudinaryService)
        {
            _unitOfWork = unitOfWork;
            _cloudinaryService = cloudinaryService;
        }

        public async Task<ExcelImportResult<T>> ImportFromExcel<TDto>(string filePath) where TDto : class
        {
            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException("Excel file not found", filePath);
            }

            var result = new ExcelImportResult<T>();
            var validEntities = new List<T>();
            var errors = new List<ExcelImportError>();
            int rowCount = 0;

            FileInfo fileInfo = new FileInfo(filePath);
            using (ExcelPackage package = new ExcelPackage(fileInfo))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
                rowCount = worksheet.Dimension.Rows;

                var seenNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

                for (int row = 2; row <= rowCount; row++)
                {
                    try
                    {
                        var cellAValue = worksheet.Cells[row, 1].Value?.ToString();
                        
                        // Check for duplicates within the file
                        if (cellAValue != null && seenNames.Contains(cellAValue))
                        {
                            throw new ValidationException($"<<< Duplicate name '{cellAValue}' found in file >>>");
                        }
                        seenNames.Add(cellAValue!);

                        // Check if column A (index 1) is empty
                        if (string.IsNullOrWhiteSpace(cellAValue))
                        {
                            throw new ValidationException("<<< Empty row - Column A is required >>>");
                        }

                        var requiredValue = worksheet.Cells[row, RequiredColumnIndex].Value?.ToString();
                        if (string.IsNullOrWhiteSpace(requiredValue))
                        {
                            throw new ValidationException($"<<< Required column {RequiredColumnIndex} is empty >>>");
                        }

                        var dto = await MapExcelRowToDto<TDto>(worksheet, row);
                        ValidateDto(dto);

                        var entity = MapDtoToEntity(dto);

                        if (await IsDuplicate(entity))
                            throw new ValidationException($"<<< Duplicate name '{cellAValue}' exists in database >>>");

                        validEntities.Add(entity);
                    }
                    catch (Exception ex)
                    {
                        errors.Add(new ExcelImportError
                        {
                            RowNumber = row,
                            RowData = GetRowData(worksheet, row),
                            ErrorMessage = ex.Message
                        });
                    }
                }
            }

            if (validEntities.Any())
            {
                await _unitOfWork.Repository<T>().AddRangeAsync(validEntities.AsEnumerable());
                result.SuccessCount = validEntities.Count;
                await _unitOfWork.SaveChangeAsync();
            }

            result.TotalProcessed = rowCount - 1;
            result.Errors = errors;

            return result;
        }

        private async Task<TDto> MapExcelRowToDto<TDto>(ExcelWorksheet worksheet, int row) where TDto : class
        {
            if (_cloudinaryService == null)
            {
                throw new ArgumentNullException(nameof(_cloudinaryService), "CloudinaryService is not initialized.");
            }

            var dto = Activator.CreateInstance<TDto>();
            var properties = typeof(TDto).GetProperties();

            foreach (var prop in properties)
            {
                var columnAttr = prop.GetCustomAttribute<ColumnAttribute>();
                if (columnAttr != null)
                {
                    var cell = worksheet.Cells[row, columnAttr.Index];
                    var value = cell.Value?.ToString();

                    // Xử lý đặc biệt cho cột Image
                    if (prop.Name == "Image" && !string.IsNullOrEmpty(value))
                    {
                        string imageUrl;
                        
                        // Lấy URL từ hyperlink nếu có, ngược lại sử dụng giá trị cell
                        if (cell.Hyperlink != null)
                        {
                            imageUrl = cell.Hyperlink.AbsoluteUri;
                        }
                        else
                        {
                            imageUrl = value;
                        }
                        
                        try
                        {
                            // Kiểm tra xem URL có phải từ Google Drive không
                            if (imageUrl.Contains("drive.google.com"))
                            {
                                Console.WriteLine($"Detected Google Drive URL: {imageUrl}");
                                value = await _cloudinaryService.UploadImageFromGoogleDriveAsync(imageUrl);
                            }
                            else
                            {
                                value = await _cloudinaryService.UploadImageFromUrlAsync(imageUrl);
                            }
                            Console.WriteLine($"Uploaded image successfully: {value}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to upload image: {ex.Message}");
                            // Không throw exception ở đây - để cell tiếp tục xử lý
                            // Có thể đặt một giá trị mặc định cho image
                            value = "https://res.cloudinary.com/dtsjztbus/image/upload/default_image.jpg";
                        }
                    }

                    // Xử lý giá trị trống cho StorageGuidelines
                    if (prop.Name == "StorageGuidelines" && string.IsNullOrWhiteSpace(value))
                    {
                        value = "Hiện tại không có hướng dẫn bảo quản";
                    }

                    if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                    {
                        if (int.TryParse(value, out int intValue))
                            prop.SetValue(dto, intValue);
                        else if (prop.PropertyType == typeof(int?))
                            prop.SetValue(dto, null);
                    }
                    else if (prop.PropertyType == typeof(decimal) || prop.PropertyType == typeof(decimal?))
                    {
                        if (decimal.TryParse(value, out decimal decimalValue))
                            prop.SetValue(dto, decimalValue);
                        else if (prop.PropertyType == typeof(decimal?))
                            prop.SetValue(dto, null);
                    }
                    else if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                    {
                        if (DateTime.TryParse(value, out DateTime dateValue))
                            prop.SetValue(dto, dateValue);
                    }
                    else
                    {
                        prop.SetValue(dto, value);
                    }
                }
            }
            return dto;
        }

        private void ValidateDto(object dto)
        {
            var validationContext = new ValidationContext(dto);
            Validator.ValidateObject(dto, validationContext, true);
        }

        private T MapDtoToEntity<TDto>(TDto dto)
        {
            var entity = new T();
            var dtoProperties = typeof(TDto).GetProperties();
            var entityProperties = typeof(T).GetProperties();

            foreach (var dtoProp in dtoProperties)
            {
                var entityProp = entityProperties.FirstOrDefault(p => p.Name == dtoProp.Name);
                if (entityProp != null && entityProp.CanWrite)
                {
                    var value = dtoProp.GetValue(dto);
                    
                    // Xử lý đặc biệt cho RegionType - xử lý bitwise cho flags enum
                    if (entityProp.Name == "RegionType" && value is string regionTypeStr)
                    {
                        // Nếu giá trị là "0", đặt RegionType là None
                        if (regionTypeStr.Trim() == "0")
                        {
                            entityProp.SetValue(entity, BusinessObjects.FixedData.RegionType.None);
                            continue;
                        }

                        // Xử lý nhiều giá trị được phân tách bằng dấu phẩy hoặc khoảng trắng
                        string[] values = regionTypeStr.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        int result = 0;

                        foreach (var val in values)
                        {
                            if (int.TryParse(val.Trim(), out int flagValue))
                            {
                                result |= flagValue;
                            }
                        }

                        entityProp.SetValue(entity, (BusinessObjects.FixedData.RegionType)result);
                        continue;
                    }
                    // Xử lý enum nullable
                    else if (IsNullableEnum(entityProp.PropertyType) && value is string nullableEnumString)
                    {
                        Type underlyingType = Nullable.GetUnderlyingType(entityProp.PropertyType);
                        
                        if (string.IsNullOrWhiteSpace(nullableEnumString))
                        {
                            entityProp.SetValue(entity, null);
                        }
                        else if (Enum.TryParse(underlyingType, nullableEnumString, true, out object nullableEnumValue))
                        {
                            entityProp.SetValue(entity, nullableEnumValue);
                        }
                        else
                        {
                            throw new ValidationException($"Giá trị '{nullableEnumString}' không hợp lệ cho {entityProp.Name}");
                        }
                    }
                    // Xử lý enum thường
                    else if (entityProp.PropertyType.IsEnum && value is string enumString)
                    {
                        if (Enum.TryParse(entityProp.PropertyType, enumString, true, out object enumValue))
                        {
                            entityProp.SetValue(entity, enumValue);
                        }
                        else
                        {
                            throw new ValidationException($"Giá trị '{enumString}' không hợp lệ cho {entityProp.Name}");
                        }
                    }
                    // Xử lý các kiểu dữ liệu khác
                    else
                    {
                        entityProp.SetValue(entity, value);
                    }
                }
            }

            entity.CreatedTime = DateTime.UtcNow;
            entity.CreatedBy = "ExcelSystemImport";
            return entity;
        }

        private bool IsNullableEnum(Type type)
        {
            Type underlyingType = Nullable.GetUnderlyingType(type);
            return underlyingType != null && underlyingType.IsEnum;
        }

        private async Task<bool> IsDuplicate(T entity)
        {
            // Use reflection to check for Name property
            var nameProperty = typeof(T).GetProperty("Name");
            if (nameProperty == null) return false;

            var entityName = nameProperty.GetValue(entity)?.ToString();
            if (string.IsNullOrEmpty(entityName)) return false;

            // Build expression dynamically
            var parameter = Expression.Parameter(typeof(T), "x");
            var property = Expression.Property(parameter, nameProperty);
            var constant = Expression.Constant(entityName);
            var equality = Expression.Equal(property, constant);
            var lambda = Expression.Lambda<Func<T, bool>>(equality, parameter);

            return await _unitOfWork.Repository<T>().AnyAsync(lambda);
        }

        private string GetRowData(ExcelWorksheet worksheet, int row)
        {
            return string.Join(", ", worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]
                .Select(c => c.Value?.ToString()));
        }

        private async Task<Stream> DownloadImageFromGoogleDriveAsync(string url)
        {
            try
            {
                // Log bắt đầu tải ảnh
                Console.WriteLine($"Bắt đầu tải ảnh từ URL: {url}");

                using var httpClient = new HttpClient();
                var response = await httpClient.GetAsync(url);

                // Log kết quả response
                Console.WriteLine($"Response status code: {response.StatusCode}");

                // Đảm bảo response thành công
                response.EnsureSuccessStatusCode();

                // Log thành công
                Console.WriteLine("Tải ảnh thành công.");

                return await response.Content.ReadAsStreamAsync();
            }
            catch (HttpRequestException ex)
            {
                // Log lỗi HTTP
                Console.WriteLine($"Lỗi HTTP khi tải ảnh: {ex.Message}");
                throw new Exception($"Không thể tải ảnh từ URL: {url}", ex);
            }
            catch (Exception ex)
            {
                // Log lỗi tổng quát
                Console.WriteLine($"Lỗi khi tải ảnh: {ex.Message}");
                throw new Exception($"Lỗi không xác định khi tải ảnh từ URL: {url}", ex);
            }
        }

        public async Task<string> UploadImageFromStreamAsync(Stream imageStream, string fileName)
        {
            if (imageStream == null || imageStream.Length == 0)
            {
                throw new ArgumentException("Image stream cannot be null or empty");
            }

            var formFile = new FormFile(imageStream, 0, imageStream.Length, "image", fileName);
            return await _cloudinaryService.UploadImageAsync(formFile);
        }
    }
}
</file>

<file path="Services/FavoriteDishService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.FavoriteDishDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;

namespace Services
{
    public class FavoriteDishService : IFavoriteDishService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public FavoriteDishService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task<FavoriteDishResponse> GetFavoriteDishByIdAsync(string id)
        {
            try
            {
                var favoriteDish = await _unitOfWork.Repository<FavoriteDish>().GetByIdAsync(id, includes: x => x.Dish)
                                  ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Favorite Dish not found!");
                return _mapper.Map<FavoriteDishResponse>(favoriteDish);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<FavoriteDishResponse>> GetAllFavoriteDishesAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var favoriteDishes = await _unitOfWork
                    .Repository<FavoriteDish>()
                    .FindAsync(
                    x => x.CreatedBy == userId,
                    includes: x => x.Dish);
                return _mapper.Map<IEnumerable<FavoriteDishResponse>>(favoriteDishes);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<BasePaginatedList<FavoriteDishResponse>> GetAllFavoriteDishesAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var favoriteDishes = await _unitOfWork.Repository<FavoriteDish>().GetAllWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    includes: x => x.Dish,
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.Dish.Name.Contains(searchTerm),
                    orderBy: x => x.OrderBy(d => d.Dish.Name)
                );

                if (favoriteDishes == null || !favoriteDishes.Items.Any())
                {
                    return new BasePaginatedList<FavoriteDishResponse>(
                        new List<FavoriteDishResponse>(),
                        0,
                        pageIndex,
                        pageSize);
                }

                var response = _mapper.Map<List<FavoriteDishResponse>>(favoriteDishes.Items);
                return new BasePaginatedList<FavoriteDishResponse>(
                    response,
                    response.Count,
                    pageIndex,
                    pageSize);
            }
            catch (AutoMapperMappingException ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"AutoMapper error: {ex.Message}");
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task CreateFavoriteDishAsync(FavoriteDishDTO favoriteDishDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var existingFavoriteDish = await _unitOfWork.Repository<FavoriteDish>().FindAsync(
                x => x.SmartDietUserId == userId && x.DishId == favoriteDishDTO.DishId) ;

                if (existingFavoriteDish.Any())
                    throw new ErrorException(
                        StatusCodes.Status400BadRequest,
                        ErrorCode.BADREQUEST,
                        "Favorite dish already exists!");

                var favoriteDish = _mapper.Map<FavoriteDish>(favoriteDishDTO);
                favoriteDish.SmartDietUserId = userId;
                favoriteDish.CreatedTime = DateTime.UtcNow;
                favoriteDish.CreatedBy = userId;

                await _unitOfWork.Repository<FavoriteDish>().AddAsync(favoriteDish);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateFavoriteDishAsync(string favoriteDishId, FavoriteDishDTO favoriteDishDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var existingFavoriteDish = await _unitOfWork.Repository<FavoriteDish>().GetByIdAsync(favoriteDishId)
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound, 
                        ErrorCode.NOT_FOUND, 
                        "Favorite Dish not found!");

                _mapper.Map(favoriteDishDTO, existingFavoriteDish);
                existingFavoriteDish.LastUpdatedTime = DateTime.UtcNow;
                existingFavoriteDish.LastUpdatedBy = userId;

                await _unitOfWork.Repository<FavoriteDish>().UpdateAsync(existingFavoriteDish);
                await _unitOfWork.SaveChangeAsync();
            }
            catch(ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteFavoriteDishAsync(string favoriteDishId)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var favoriteDish = await _unitOfWork.Repository<FavoriteDish>().GetByIdAsync(favoriteDishId)
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound, 
                        ErrorCode.NOT_FOUND, 
                        "Favorite Dish not found!");

                favoriteDish.DeletedTime = DateTime.UtcNow;
                favoriteDish.LastUpdatedBy = userId;
                _unitOfWork.Repository<FavoriteDish>().DeleteAsync(favoriteDish);
                await _unitOfWork.SaveChangeAsync();
            }
            catch(ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/Interfaces/IRecommendationService.cs">
using DTOs.MealDTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IRecommendationService
    {
        Task<IEnumerable<MealResponse>> GetRecommendedMealsAsync();
        Task<IEnumerable<MealResponse>> GenerateRecommendationsAsync();
        Task<IEnumerable<MealResponse>> RegenerateRecommendationsAsync();
        Task<IEnumerable<MealResponse>> GetRecommendationHistoryAsync();
    }
}
</file>

<file path="Services/RoleService.cs">
using AutoMapper;
using DTOs.RoleDTOs;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class RoleService : IRoleService
    {
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IMapper _mapper;
        public RoleService(RoleManager<IdentityRole> roleManager, IMapper mapper)
        {
            _roleManager = roleManager;
            _mapper = mapper;
        }

        public async Task<List<RoleResponse>> GetRoles()
        {
            List<IdentityRole> roles = await _roleManager.Roles.ToListAsync();
            return _mapper.Map<List<RoleResponse>>(roles);
        }
    }
}
</file>

<file path="Services/UserFeedbackService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.FavoriteDishDTOs;
using DTOs.UserFeedbackDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class UserFeedbackService : IUserFeedbackService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public UserFeedbackService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateUserFeedbackAsync(UserFeedbackDTO userFeedbackDTO)
        {

            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var userFeedback = _mapper.Map<UserFeedback>(userFeedbackDTO);

                userFeedback.SmartDietUserId = userId;
                userFeedback.CreatedBy = userId;

                await _unitOfWork.Repository<UserFeedback>().AddAsync(userFeedback);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteUserFeedbackAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var userFeedback = await _unitOfWork.Repository<UserFeedback>().GetByIdAsync(id)
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound,
                        ErrorCode.NOT_FOUND,
                        "User Feedback not found!");

                _unitOfWork.Repository<UserFeedback>().DeleteAsync(userFeedback);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<UserFeedbackResponse>> GetUserFeedbackBySmartDietUserIdAsync(string id)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var userFeedbacks = await _unitOfWork.Repository<UserFeedback>().FindAsync(
                    predicate: feedback => feedback.SmartDietUserId == id,
                    orderBy: query => query.OrderByDescending(f => f.FeedbackDate)
                    ) 
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound, 
                        ErrorCode.NOT_FOUND, 
                        "User Feedback not found!");

                return _mapper.Map<IEnumerable<UserFeedbackResponse>>(userFeedbacks);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<UserFeedbackResponse>> GetAllUserFeedbackAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var userFeedbacks = await _unitOfWork.Repository<UserFeedback>().GetAllAsync(
                    orderBy:  query => query.OrderByDescending(f => f.FeedbackDate)
                    )
                    ?? throw new ErrorException(
                        StatusCodes.Status404NotFound,
                        ErrorCode.NOT_FOUND,
                        "User Feedback not found!");

                return _mapper.Map<IEnumerable<UserFeedbackResponse>>(userFeedbacks);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

    }
}
</file>

<file path="SmartDietAPI/Controllers/DishController.cs">
using BusinessObjects.Base;
using DTOs.DishDTOs;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;
using Newtonsoft.Json;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DishController : Controller
    {
        private readonly IDishService _dishService;
        public DishController(IDishService dishService)
        {
            _dishService = dishService;
        }
        [HttpGet("list")]
        public async Task<IActionResult> GetAllDishes()
        {
            var result = await _dishService.GetAllDishesAsync();
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("all")]
        public async Task<IActionResult> GetDishes([FromQuery] int pageIndex = 1, [FromQuery] int pageSize = 10, [FromQuery] string? searchTerm = null)
        {
            var result = await _dishService.GetAllDishesAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("{id}")]
        public async Task<IActionResult> GetDishById(string id)
        {
            var result = await _dishService.GetDishByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("create")]
        public async Task<IActionResult> AddDish([FromForm] DishDTO dishDTO, [FromForm] string? dishIngredients)
        {
            var ingredients = JsonConvert.DeserializeObject<List<DishIngredientDTO>>(dishIngredients);
            await _dishService.CreateDishAsync(dishDTO, ingredients);
            return Ok(ApiResponse<object>.Success(null, "Dish created successfully", 201));
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateDish(string id, [FromForm] DishDTO dishDTO)
        {
            await _dishService.UpdateDishAsync(id, dishDTO);
            return Ok(ApiResponse<object>.Success(null, "Dish updated successfully"));
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDish(string id)
        {
            await _dishService.DeleteDishAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Dish deleted successfully"));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/RoleController.cs">
using BusinessObjects.Base;
using DTOs.RoleDTOs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RoleController : ControllerBase
    {
        private readonly IRoleService _roleService;
        public RoleController(IRoleService roleService)
        {
            _roleService = roleService;
        }
        [HttpGet("Get_Roles")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetRoles()
        {
            List<RoleResponse> roles = await _roleService.GetRoles();
            return Ok(ApiResponse<List<RoleResponse>>.Success(roles));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UserMealInteractionController.cs">
using BusinessObjects.Base;
using DTOs.MealDTOs;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserMealInteractionController : ControllerBase
    {
        private readonly IUserMealInteractionService _service;

        public UserMealInteractionController(IUserMealInteractionService service)
        {
            _service = service;
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetAll()
        {
            var result = await _service.GetAllUserMealInteractionsAsync();
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("meal/{mealId}")]
        public async Task<IActionResult> GetByMealId(string mealId)
        {
            var result = await _service.GetUserMealInteractionByMealIdAsync(mealId);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(string id)
        {
            var result = await _service.GetUserMealInteractionByIdAsync(id);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]
        public async Task<IActionResult> Create(UserMealInteractionDTO dto)
        {
            await _service.CreateUserMealInteractionAsync(dto);
            return Ok(ApiResponse<object>.Success(null, "Created successfully", 201));
        }

        [HttpPost]
        public async Task<IActionResult> CreateInteraction(UserMealInteractionDTO dto)
        {
            var result = await _service.CreateMealInteractionAsync(dto);
            return Ok(ApiResponse<object>.Success(result, "Created successfully", 201));
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(string id, UserMealInteractionDTO dto)
        {
            await _service.UpdateUserMealInteractionAsync(id, dto);
            return Ok(ApiResponse<object>.Success(null, "Updated successfully"));
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(string id)
        {
            await _service.DeleteUserMealInteractionAsync(id);
            return Ok(ApiResponse<object>.Success(null, "Deleted successfully"));
        }
    }
}
</file>

<file path="DataAccessObjects/Migrations/SmartDietDbContextModelSnapshot.cs">
// <auto-generated />
using System;
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(SmartDietDbContext))]
    partial class SmartDietDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DietType")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodId");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("DishRecommendHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("FavoriteMeals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreservationType")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRefrigerated")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeRoomTemp")
                        .HasColumnType("int");

                    b.Property<string>("StorageGuidelines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllergenFoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergenFoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridgeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FridgeModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FridgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StorageLocation")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRatings");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("MealRecommendationHistories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.NutrientCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientCategories");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entity.Subcription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthOfSubcription")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserMealInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubcriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId");

                    b.HasIndex("SubcriptionId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyMealCount")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishesPerMealCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowInventoryThreshold")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxCookingTime")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecipeDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyLowInventory")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryDietType")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryRegionType")
                        .HasColumnType("int");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartDietUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutrientCategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodsId", "NutrientCategoriesId");

                    b.HasIndex("NutrientCategoriesId");

                    b.ToTable("FoodNutrientCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmartDietUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("SmartDietUserId");

                    b.ToTable("UserDishInteractions");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishIngredient", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.DishRecommendHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FavoriteMeal", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("FavoriteMeals")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FoodAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "AllergenFood")
                        .WithMany()
                        .HasForeignKey("AllergenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany("FoodAllergies")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergenFood");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("Fridges")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.FridgeItem", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Fridge", "Fridge")
                        .WithMany("FridgeItems")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealDish", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany("MealDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRating", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("MealRatings")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.MealRecommendationHistory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserAllergy", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany("UserAllergies")
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserFeedback", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserMealInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPayment", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.Subcription", "Subcription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");

                    b.Navigation("Subcription");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserPreference", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserPreference")
                        .HasForeignKey("BusinessObjects.Entity.UserPreference", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.UserProfile", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BusinessObjects.Entity.UserProfile", "SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("FoodNutrientCategory", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.NutrientCategory", null)
                        .WithMany()
                        .HasForeignKey("NutrientCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Entity.SmartDietUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDishInteraction", b =>
                {
                    b.HasOne("BusinessObjects.Entity.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Entity.SmartDietUser", "SmartDietUser")
                        .WithMany()
                        .HasForeignKey("SmartDietUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SmartDietUser");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Dish", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("FavoriteDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Food", b =>
                {
                    b.Navigation("FoodAllergies");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Fridge", b =>
                {
                    b.Navigation("FridgeItems");
                });

            modelBuilder.Entity("BusinessObjects.Entity.Meal", b =>
                {
                    b.Navigation("FavoriteMeals");

                    b.Navigation("MealDishes");
                });

            modelBuilder.Entity("BusinessObjects.Entity.SmartDietUser", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteMeals");

                    b.Navigation("Fridges");

                    b.Navigation("MealRatings");

                    b.Navigation("UserAllergies");

                    b.Navigation("UserPreference");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="DTOs/UserPreferenceDTOs/UserPreferenceDTO.cs">
using BusinessObjects.FixedData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DTOs.UserPreferenceDTOs
{
    public class UserPreferenceDTO
    {
        // Dietary Preferences
        public DietType PrimaryDietType { get; set; }
        public List<RegionType> PrimaryRegionTypes { get; set; } = new List<RegionType>();
        public int DailyMealCount { get; set; }
        public int DishesPerMealCount { get; set; }

        // Cooking Preferences
        public int MaxCookingTime { get; set; }
        public DifficultyLevel MaxRecipeDifficulty { get; set; }
        public bool NotifyLowInventory { get; set; }
        public decimal LowInventoryThreshold { get; set; }
    }
}
</file>

<file path="Repositories/GenericRepository.cs">
using BusinessObjects.Base;
using DataAccessObjects;
using MailKit.Search;
using Microsoft.EntityFrameworkCore;
using Org.BouncyCastle.Asn1;
using Repositories.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Repositories
{
    public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity
    {
        private readonly SmartDietDbContext _context;
        public GenericRepository(SmartDietDbContext context)
        {
            _context = context;
        }

        public async Task AddAsync(T entity)
        {
            if (_context.Entry(entity).State == EntityState.Detached)
            {
                _context.Set<T>().Attach(entity);
            }
            await _context.Set<T>().AddAsync(entity);
        }

        public async Task AddRangeAsync(IEnumerable<T> entities)
        {
            await _context.Set<T>().AddRangeAsync(entities);
        }

        public void DeleteAsync(T entity)
        {
            _context.Set<T>().Remove(entity);
        }

        public void DeleteRangeAsync(IEnumerable<T> entities)
        {
            _context.Set<T>().RemoveRange(entities);
        }

        public async Task<IEnumerable<T>> FindAsync(
            Expression<Func<T, bool>> predicate,
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>()
                .Where(x => !x.DeletedTime.HasValue)
                .Where(predicate);

            if (include != null)
            {
                query = include(query);
            }
            // Add Includes
            if (includes != null)
            {
                foreach (var includeItem in includes)
                {
                    query = query.Include(includeItem);
                }
            }

            // Apply OrderBy
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            return await query.ToListAsync();
        }

        public async Task<T> FirstOrDefaultAsync(
            Expression<Func<T, bool>> predicate,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>()
                .Where(x => !x.DeletedTime.HasValue)
                .Where(predicate);

            if (include != null)
            {
                query = include(query);
            }
            // Add Includes
            if (includes != null)
            {
                foreach (var includeItem in includes)
                {
                    query = query.Include(includeItem);
                }
            }

            return await query.FirstOrDefaultAsync();
        }

        public async Task<IEnumerable<T>> GetAllAsync(
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes
            )
        {
            IQueryable<T> query = _context.Set<T>().Where(x => !x.DeletedTime.HasValue);

            if (include != null)
            {
                query = include(query);
            }
            // Add Includes
            query = ApplyIncludesV2(query, includes);

            // Apply OrderBy
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            return await query.ToListAsync();
        }

        public async Task<BasePaginatedList<T>> GetAllWithPaginationAsync(
            int pageIndex,
            int pageSize,
    Expression<Func<T, bool>> searchTerm = null,
    Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
    Func<IQueryable<T>, IQueryable<T>> include = null,
    params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => !x.DeletedTime.HasValue);

            // Apply search filter if provided
            if (searchTerm != null)
            {
                query = query.Where(searchTerm);
            }
            if (include != null)
            {
                query = include(query);
            }
            if (includes != null)
            {
                foreach (var includeItem in includes)
                {
                    query = query.Include(includeItem);
                }
            }

            if (orderBy != null)
            {
                query = orderBy(query);
            }

            int totalCount = await query.CountAsync();
            var items = await query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();

            return new BasePaginatedList<T>(items, totalCount, pageIndex, pageSize);
        }

        public async Task<T> GetByIdAsync(
            string id,
            Func<IQueryable<T>, IQueryable<T>> include = null,
            params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => !x.DeletedTime.HasValue);
            if (include != null)
            {
                query = include(query);
            }
            // Add Includes
            if (includes != null)
            {
                foreach (var includeItem in includes)
                {
                    query = query.Include(includeItem);
                }
            }

            var keyName = _context.Model.FindEntityType(typeof(T)).FindPrimaryKey().Properties
                  .Select(x => x.Name).Single();

            return await query.FirstOrDefaultAsync(entity => EF.Property<string>(entity, keyName) == id);
        }

        public async Task<bool> AnyAsync(Expression<Func<T, bool>> expression, bool asNoTracking = true)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => !x.DeletedTime.HasValue);
            if (asNoTracking)
                query = query.AsNoTracking();

            return await query.AnyAsync(expression);
        }

        public async Task UpdateAsync(T entity)
        {
            if (_context.Entry(entity).State == EntityState.Detached)
            {
                _context.Set<T>().Attach(entity);
            }
            _context.Entry(entity).State = EntityState.Modified;
        }

        public async Task UpdateRangeAsync(IEnumerable<T> entities)
        {
            foreach (var entity in entities)
            {
                if (_context.Entry(entity).State == EntityState.Detached)
                {
                    _context.Set<T>().Attach(entity);
                }
                _context.Entry(entity).State = EntityState.Modified;
            }
        }

        public async Task<T> GetDeletedByIdAsync(string id, params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => x.DeletedTime.HasValue);

            // Add Includes
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            var keyName = _context.Model.FindEntityType(typeof(T)).FindPrimaryKey().Properties
                  .Select(x => x.Name).Single();

            return await query.FirstOrDefaultAsync(entity => EF.Property<string>(entity, keyName) == id);
        }

        public async Task<IEnumerable<T>> GetAllDeletedAsync(Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => x.DeletedTime.HasValue);

            // Add Includes
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            // Apply OrderBy
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            return await query.ToListAsync();
        }

        public async Task<BasePaginatedList<T>> GetAllDeletedWithPaginationAsync(
            int pageIndex,
            int pageSize,
            Expression<Func<T, bool>>? searchTerm = null,
            Func<IQueryable<T>, IOrderedQueryable<T>>? orderBy = null,
            params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>().Where(x => x.DeletedTime.HasValue);

            if (searchTerm != null)
            {
                query = query.Where(searchTerm);
            }

            foreach (var include in includes)
            {
                query = query.Include(include);
            }

            if (orderBy != null)
            {
                query = orderBy(query);
            }

            int totalCount = await query.CountAsync();
            var items = await query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToListAsync();

            return new BasePaginatedList<T>(items, totalCount, pageIndex, pageSize);
        }

        public async Task<BasePaginatedList<T>> FindWithPaginationAsync(
    int pageIndex,
    int pageSize,
    Expression<Func<T, bool>> predicate, // Specific predicate for filtering
    Expression<Func<T, bool>> searchTerm = null, // Optional search term for general filtering
    Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, // Optional ordering
    Func<IQueryable<T>, IQueryable<T>> include = null,
    params Expression<Func<T, object>>[] includes) // Optional includes
        {
            IQueryable<T> query = _context.Set<T>().Where(x => !x.DeletedTime.HasValue);

            // Apply the predicate filter
            query = query.Where(predicate);

            // Apply the search term filter if provided
            if (searchTerm != null)
            {
                query = query.Where(searchTerm);
            }
            if (include != null)
            {
                query = include(query);
            }
            // Add Includes
            if (includes != null)
            {
                foreach (var includeItem in includes)
                {
                    query = query.Include(includeItem);
                }
            }

            // Apply OrderBy if provided
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            // Get the total count of filtered items
            int totalCount = await query.CountAsync();

            // Apply pagination
            var items = await query
                .Skip((pageIndex - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            return new BasePaginatedList<T>(items, totalCount, pageIndex, pageSize);
        }
        public async Task<IEnumerable<T>> FindDeletedAsync(Expression<Func<T, bool>> predicate, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>()
                .Where(x => x.DeletedTime.HasValue)
                .Where(predicate);

            // Add Includes
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            // Apply OrderBy
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            return await query.ToListAsync();
        }

        public async Task<T> FirstOrDefaultDeletedAsync(Expression<Func<T, bool>> predicate, params Expression<Func<T, object>>[] includes)
        {
            IQueryable<T> query = _context.Set<T>()
                .Where(x => x.DeletedTime.HasValue)
                .Where(predicate);

            // Add Includes
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            return await query.FirstOrDefaultAsync();
        }

        private IQueryable<T> ApplyIncludes(IQueryable<T> query, Expression<Func<T, object>>[] includes)
        {
            if (includes != null)
            {
                query = includes.Aggregate(query, (current, include) =>
                {
                    if (include.Body is MemberInitExpression memberInit)
                    {
                        var path = string.Join(".", memberInit.Bindings.Select(b => b.Member.Name));
                        return current.Include(path);
                    }
                    return current.Include(include);
                });
            }
            return query;
        }

        private IQueryable<T> ApplyIncludesV2(IQueryable<T> query, params Expression<Func<T, object>>[] includes)
        {
            foreach (var include in includes)
            {
                if (include.Body is MemberExpression || include.Body is UnaryExpression)
                {
                    query = query.Include(include);
                }
            }
            return query;
        }
    }
}
</file>

<file path="Services/Configs/SeedAccount.cs">
using BusinessObjects.Entity;
using DataAccessObjects;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Services.Configs
{
    public class SeedAccount
    {
        private readonly ILogger<SeedAccount> _logger;
        private readonly SmartDietDbContext _context;
        private readonly UserManager<SmartDietUser> _userManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        public SeedAccount(
            ILogger<SeedAccount> logger,
            SmartDietDbContext context, 
            UserManager<SmartDietUser> userManager, 
            RoleManager<IdentityRole> roleManager)
        {
            _logger = logger;
            _context = context;
            _userManager = userManager;
            _roleManager = roleManager;
        }
        public async Task InitialiseAsync()
        {
            try
            {
                if (_context.Database.IsSqlServer())
                {
                    if (!_context.Database.CanConnect())
                    {
                        await _context.Database.EnsureDeletedAsync();
                        await _context.Database.MigrateAsync();
                    }
                    else
                    {
                        var pendingMigrations = await _context.Database.GetPendingMigrationsAsync();
                        if (pendingMigrations.Any())
                        {
                            _logger.LogInformation("Applying pending migrations: {0}", string.Join(", ", pendingMigrations));
                            await _context.Database.MigrateAsync();
                        }
                        else
                        {
                            _logger.LogInformation("No pending migrations. Database is up to date.");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while initializing the database.");
                throw;
            }
        }
        public async Task SeedAsync()
        {
            try
            {
                await TrySeedAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while seeding the database.");
                throw;
            }
        }
        private async Task TrySeedAsync()
        {
            _logger.LogInformation("Starting to seed data...");
            await SeedRolesAsync();
            await SeedUsersAsync();
            _logger.LogInformation("Data seeding completed.");
        }
        #region Roles
        private async Task SeedRolesAsync()
        {
            var roles = new[]
            {
                new IdentityRole { Name = "Admin" },
                new IdentityRole { Name = "Staff" },
                new IdentityRole { Name = "Member" }
            };

            foreach (var role in roles)
            {
                if (!await _roleManager.RoleExistsAsync(role.Name))
                {
                    await _roleManager.CreateAsync(role);
                    _logger.LogInformation($"Role {role.Name} created successfully.");
                }
            }
        }
        #endregion Roles

        #region User
        private async Task SeedUsersAsync()
        {
            var users = new List<(SmartDietUser User, string Role)>
    {
        (CreateUser("admin", "admin@example.com", "Admin"), "Admin"),
        (CreateUser("staff", "staff@example.com", "Staff"), "Staff"),
        (CreateUser("staff2", "staff2@example.com", "Staff"), "Staff"),
        (CreateUser("member", "member@example.com", "Member"), "Member"),
        (CreateUser("member2", "member2@example.com", "Member"), "Member")
    };

            foreach (var (user, role) in users)
            {
                await CreateUserIfNotExist(user, role);
            }
        }

        #endregion User

        #region addition function
        private SmartDietUser CreateUser(string userName, string email, string role)
        {
            return new SmartDietUser
            {
                UserName = userName,
                Email = email,
                EmailConfirmed = true,
            };
        }
        private UserProfile CreateUserProfile(SmartDietUser user)
        {
            return new UserProfile
            {
                SmartDietUserId = user.Id,
                FullName = user.UserName,
                ProfilePicture = "",
                TimeZone = "UTC",
                PreferredLanguage = "en",
                EnableEmailNotifications = true,
                EnableNotifications = true,
                EnablePushNotifications = true,
                CreatedBy = "root",
            };
        }
        private async Task CreateUserIfNotExist(SmartDietUser user, string role)
        {
            var existingUser = await _userManager.FindByEmailAsync(user.Email);
            if (existingUser is null)
            {
                var result = await _userManager.CreateAsync(user, "aaaaaaa0");
                if (result.Succeeded)
                {
                    await _userManager.AddToRoleAsync(user, role);
                    _logger.LogInformation($"User {user.Email} created and assigned to role {role}.");

                    var userProfile = CreateUserProfile(user);
                    await AddUserProfile(userProfile);
                }
                else
                {
                    _logger.LogError($"Failed to create user {user.Email}: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
        }

        private async Task AddUserProfile(UserProfile userProfile)
        {
            if (!_context.UserProfiles.Any(p => p.FullName == userProfile.FullName))
            {
                await _context.UserProfiles.AddAsync(userProfile);
                await _context.SaveChangesAsync();
                _logger.LogInformation("User profile seeded successfully.");
            }
        }
        #endregion
    }
}
</file>

<file path="Services/FoodService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.DishDTOs;
using DTOs.FoodDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class FoodService : IFoodService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ICloudinaryService _cloudinaryService;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public FoodService(IUnitOfWork unitOfWork, ICloudinaryService cloudinaryService, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _cloudinaryService = cloudinaryService;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateFoodAsync(FoodDTO foodDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if food name exists
                var existingFood = await _unitOfWork.Repository<Food>().FirstOrDefaultAsync(x => x.Name == foodDTO.Name);
                if (existingFood != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Food name already exists");
                }

                // Create map
                var food = _mapper.Map<Food>(foodDTO);

                // Process image
                if (foodDTO.Image != null)
                {
                    food.Image = await _cloudinaryService.UploadImageAsync(foodDTO.Image);
                }

                // Set create time and user
                food.CreatedTime = DateTime.UtcNow;
                food.CreatedBy = userId;
                food.LastUpdatedTime = DateTime.UtcNow;
                food.LastUpdatedBy = userId;

                await _unitOfWork.Repository<Food>().AddAsync(food);
                await _unitOfWork.SaveChangeAsync();

                // Handle Food Allergies
                if (foodDTO.AllergenFoodIds != null && foodDTO.AllergenFoodIds.Any())
                {
                    var foodAllergies = foodDTO.AllergenFoodIds.Select(allergenId => new FoodAllergy
                    {
                        FoodId = food.Id,
                        AllergenFoodId = allergenId,
                        CreatedTime = DateTime.UtcNow,
                        CreatedBy = userId
                    }).ToList();

                    // Add food allergies
                    await _unitOfWork.Repository<FoodAllergy>().AddRangeAsync(foodAllergies);
                    await _unitOfWork.SaveChangeAsync();
                }
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteFoodAsync(string foodId)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var food = await _unitOfWork.Repository<Food>().GetByIdAsync(foodId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Food does not exist!");

                // Check if food is in dish
                var dish = await _unitOfWork.Repository<DishIngredient>().FindAsync(x => x.FoodId == foodId);
                if (dish.Any())
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, "Food is in one or more dishes!");
                }

                // Check if food is in fridge
                var fridge = await _unitOfWork.Repository<FridgeItem>().FindAsync(x => x.FoodId == foodId);
                if (fridge.Any())
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, "Food is in someone's fridge!");
                }

                food.DeletedTime = DateTime.UtcNow;
                food.DeletedBy = userId;

                await _unitOfWork.Repository<Food>().UpdateAsync(food);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<FoodResponse>> GetAllFoodsAsync()
        {
            try
            {
                var foods = await _unitOfWork.Repository<Food>().GetAllAsync(
                    includes: [
                        x => x.FoodAllergies,
                        x => x.NutrientCategories
                    ]);

                return _mapper.Map<IEnumerable<FoodResponse>>(foods);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<BasePaginatedList<FoodResponse>> GetAllFoodsAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                BasePaginatedList<Food> foods = await _unitOfWork.Repository<Food>().GetAllWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    includes: [
                        x => x.FoodAllergies,
                        x => x.NutrientCategories
                    ],
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.Name.Contains(searchTerm),
                    orderBy: x => x.OrderByDescending(f => f.LastUpdatedTime).ThenByDescending(f => f.CreatedTime)
                );

                if (foods == null || !foods.Items.Any())
                {
                    return new BasePaginatedList<FoodResponse>(new List<FoodResponse>(), 0, pageIndex, pageSize);
                }

                var foodResponses = _mapper.Map<List<FoodResponse>>(foods.Items);
                return new BasePaginatedList<FoodResponse>(
                    foodResponses,
                    foodResponses.Count,
                    pageIndex,
                    pageSize);
            }
            catch (AutoMapperMappingException ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"AutoMapper error: {ex.Message}");
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"An error occurred: {ex.Message}");
            }
        }

        public async Task<FoodResponse> GetDeletedFoodByIdAsync(string id)
        {
            try
            {
                var food = await _unitOfWork.Repository<Food>().GetDeletedByIdAsync(
                    id,
                    includes: [
                        x => x.FoodAllergies,
                        x => x.NutrientCategories
                    ]);

                return _mapper.Map<FoodResponse>(food);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<FoodResponse>> GetDeletedFoodsAsync()
        {
            try
            {
                var foods = await _unitOfWork.Repository<Food>().GetAllDeletedAsync(
                    includes: [
                        x => x.FoodAllergies,
                        x => x.NutrientCategories
                    ]);

                return _mapper.Map<IEnumerable<FoodResponse>>(foods);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<FoodResponse> GetFoodByIdAsync(string id)
        {
            try
            {
                var food = await _unitOfWork.Repository<Food>().GetByIdAsync(
                    id,
                    includes: [
                        x => x.FoodAllergies,
                        x => x.NutrientCategories
                    ])
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Food does not exist!");

                return _mapper.Map<FoodResponse>(food);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateFoodAsync(string foodId, FoodDTO foodDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if food exists
                var existingFood = await _unitOfWork.Repository<Food>().GetByIdAsync(foodId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Food does not exist!");

                // Check if name exists and is not the current food
                var existingName = await _unitOfWork.Repository<Food>().FirstOrDefaultAsync(x => x.Name == foodDTO.Name && x.Id != foodId);
                if (existingName != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Food name already exists");
                }

                // Retrieve old image
                var oldImgUrl = existingFood.Image;

                _mapper.Map(foodDTO, existingFood);

                // Process image
                if (foodDTO.Image != null)
                {
                    // Upload new image
                    existingFood.Image = await _cloudinaryService.UploadImageAsync(foodDTO.Image);

                    // Delete old image if it exists
                    if (!string.IsNullOrEmpty(oldImgUrl))
                    {
                        var publicId = oldImgUrl.Split('/').Last().Split('.')[0];
                        await _cloudinaryService.DeleteImageAsync(publicId);
                    }
                }
                else
                {
                    // Keep old image
                    existingFood.Image = oldImgUrl;
                }

                // Handle Food Allergies
                // First, remove existing allergies
                if (existingFood.FoodAllergies != null && existingFood.FoodAllergies.Any())
                {
                    _unitOfWork.Repository<FoodAllergy>().DeleteRangeAsync(existingFood.FoodAllergies);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Add new allergies if provided
                if (foodDTO.AllergenFoodIds != null && foodDTO.AllergenFoodIds.Any())
                {
                    var newAllergies = foodDTO.AllergenFoodIds.Select(allergenId => new FoodAllergy
                    {
                        FoodId = foodId,
                        AllergenFoodId = allergenId,
                        CreatedTime = DateTime.UtcNow,
                        CreatedBy = userId
                    }).ToList();

                    // Add new food allergies
                    await _unitOfWork.Repository<FoodAllergy>().AddRangeAsync(newAllergies);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Set last updated time and user
                existingFood.LastUpdatedTime = DateTime.UtcNow;
                existingFood.LastUpdatedBy = userId;

                await _unitOfWork.Repository<Food>().UpdateAsync(existingFood);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/FridgeService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.FridgeDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class FridgeService : IFridgeService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly IConfiguration _configuration;
        private readonly ITokenService _tokenService;
        public FridgeService(IUnitOfWork unitOfWork, IMapper mapper, IConfiguration configuration, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _configuration = configuration;
            _tokenService = tokenService;
        }
        public async Task AddItemsToFridge(string fridgeId, List<FridgeItemDTO> fridgeItemDTOs)
        {
            try
            {
                // Get user id from token
                var userId = _tokenService.GetUserIdFromToken();
                // Check if fridge exists
                var fridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(fridgeId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");

                // Map FridgeItemDTOs to FridgeItem entities
                var fridgeItems = _mapper.Map<List<FridgeItem>>(fridgeItemDTOs);

                var existingItems = await _unitOfWork.Repository<FridgeItem>()
            .FindAsync(fi => fi.FridgeId == fridgeId);

                foreach (var item in fridgeItems)
                {

                    // Validate item (e.g., expiration date cannot be earlier than purchase date)
                    if (item.ExpirationDate < item.PurchaseDate)
                    {
                        throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Invalid expiration date");
                    }
                    item.FridgeId = fridgeId;
                    // Set required properties
                    item.CreatedTime = DateTime.UtcNow;
                    item.CreatedBy = userId; // Replace with the actual user ID if applicable
                                             // Check if item exists in existing items
                    var existingItem = existingItems.FirstOrDefault(fi =>
                        fi.FoodId == item.FoodId &&
                        fi.StorageLocation == item.StorageLocation);

                    if (existingItem != null)
                    {
                        existingItem.Quantity += item.Quantity;
                        _unitOfWork.Repository<FridgeItem>().UpdateAsync(existingItem);
                    }
                    else
                    {
                        await _unitOfWork.Repository<FridgeItem>().AddAsync(item);
                    }
                }

                // Add items to the database
                //await _unitOfWork.Repository<FridgeItem>().AddRangeAsync(fridgeItems);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task CreateFridgeAsync(FridgeDTO fridgeDTO)
        {
            try
            {
                // Get user id from token
                var userId = _tokenService.GetUserIdFromToken();
                var fridgeLimit = int.Parse(_configuration["FridgeSettings:FridgeLimit"]);
                // Check existing fridge
                var existingFridge = await _unitOfWork.Repository<Fridge>().FindAsync(x => x.SmartDietUserId == userId);
                // limit the number of fridge
                if (existingFridge.Count() >= fridgeLimit)
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, $"Limit number of fridge {fridgeLimit}");
                }
                var fridge = _mapper.Map<Fridge>(fridgeDTO);
                fridge.SmartDietUserId = userId;
                // Set created time
                fridge.CreatedTime = DateTime.UtcNow;
                fridge.CreatedBy = userId;
                // Set user Id for fridge
                await _unitOfWork.Repository<Fridge>().AddAsync(fridge);
                await _unitOfWork.SaveChangeAsync();

            }
            catch(ErrorException)
            {
                throw;
            }
        }

        public async Task DeleteFridgeAsync(string id)
        {
            try
            { 
                // Get user id from token
                var userId = _tokenService.GetUserIdFromToken();

                // Check existing fridge
                var existingFridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");
                // Check fridge user match
                //existingFridge.CreatedBy = user;
                existingFridge.DeletedTime = DateTime.UtcNow;
                existingFridge.DeletedBy = userId;
                if(userId != existingFridge.SmartDietUserId)
                {
                    throw new ErrorException(StatusCodes.Status401Unauthorized, ErrorCode.UNAUTHORIZED, "You do not have permission to delete the fridge");
                }
                await _unitOfWork.Repository<Fridge>().UpdateAsync(existingFridge);
                await _unitOfWork.SaveChangeAsync();
            }
            catch(ErrorException)
            {
                throw;
            }

        }

        public async Task<IEnumerable<FridgeItemResponse>> GetAllItemsInFridge(string id)
        {

            // Check if fridge exists
            var fridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(id)
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");
            // Get list of item in fridge
            var fridgeItems = await _unitOfWork.Repository<FridgeItem>().FindAsync(x => x.FridgeId == id,
                includes: x => x.Food);
            // Return list
            return _mapper.Map<IEnumerable<FridgeItemResponse>>(fridgeItems);

        }

        public async Task<IEnumerable<FridgeRespose>> GetAllUserFrige()
        {
            try
            {
                // Get user id
                var userId = _tokenService.GetUserIdFromToken();
                // Get all fridge of the user
                var fridges = await _unitOfWork.Repository<Fridge>().FindAsync(x => x.SmartDietUserId == userId);
                return _mapper.Map<IEnumerable<FridgeRespose>>(fridges);
            }
            catch (ErrorException)
            {
                throw;
            }
        }

        public async Task<FridgeRespose> GetFridgeByIdAsync(string id)
        {
            // Check if fridge exists
            var fridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(id)
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");
            return _mapper.Map<FridgeRespose>(fridge);
        }

        public async Task<FridgeItemResponse> GetItemById(string id)
        {
            // Check if fridge exists
            var fridgeItem = await _unitOfWork.Repository<FridgeItem>().GetByIdAsync(id, includes: x => x.Food)
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Item does not exist");
            return _mapper.Map<FridgeItemResponse>(fridgeItem);
        }

        public async Task RemoveItemsFromFridge(string fridgeId, string itemId)
        {
            // Check if fridge exists
            var fridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(fridgeId)
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");

            // Check if item exists
            var fridgeItem = await _unitOfWork.Repository<FridgeItem>().FirstOrDefaultAsync(x => x.FridgeId == fridgeId && x.Id == itemId);
            if (fridgeItem == null)
            {
                throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Item does not exist in the fridge");
            }

            // Remove the item
            _unitOfWork.Repository<FridgeItem>().DeleteAsync(fridgeItem);
            await _unitOfWork.SaveChangeAsync();
        }

        public async Task UpdateFridgeAsync(string id, FridgeDTO fridgeDTO)
        {
            try
            {
                // Get user id from token
                var userId = _tokenService.GetUserIdFromToken();
                // Check if fridge exists
                var existingFridge = await _unitOfWork.Repository<Fridge>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Fridge does not exist");

                // Update fridge properties
                existingFridge.FridgeModel = fridgeDTO.FridgeModel;
                existingFridge.FridgeLocation = fridgeDTO.FridgeLocation;
                existingFridge.LastUpdatedTime = DateTime.UtcNow;
                existingFridge.LastUpdatedBy = userId;

                // Save changes
                await _unitOfWork.Repository<Fridge>().UpdateAsync(existingFridge);
                await _unitOfWork.SaveChangeAsync();

            }
            catch(ErrorException)
            {
                throw;
            }
        }

        public async Task UpdateItemInFridge(string itemId, FridgeItemDTO fridgeItemDTO)
        {
            try
            {
                // Get user id from token
                var userId = _tokenService.GetUserIdFromToken();
                // Find the item by ID
                var existingItem = await _unitOfWork.Repository<FridgeItem>().GetByIdAsync(itemId)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Item does not exist");

                // Validate expiration date
                if (fridgeItemDTO.ExpirationDate < fridgeItemDTO.PurchaseDate)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Invalid expiration date");
                }

                // Update fields
                existingItem.Quantity = fridgeItemDTO.Quantity;
                existingItem.PurchaseDate = fridgeItemDTO.PurchaseDate;
                existingItem.ExpirationDate = fridgeItemDTO.ExpirationDate;
                existingItem.StorageLocation = fridgeItemDTO.StorageLocation;
                existingItem.Notes = fridgeItemDTO.Notes;
                existingItem.LastUpdatedTime = DateTime.UtcNow;
                existingItem.LastUpdatedBy = userId; // Replace with the actual user if available

                // Save changes
                await _unitOfWork.Repository<FridgeItem>().UpdateAsync(existingItem);
                await _unitOfWork.SaveChangeAsync();

            }
            catch(ErrorException)
            {
                throw;
            }
        }
    }
}
</file>

<file path="Services/Interfaces/IPaymentService.cs">
using DTOs.PaymentDTOs;
using Net.payOS.Types;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Interfaces
{
    public interface IPaymentService
    {
        Task<CreatePaymentResult> Checkout(List<CheckOutRequest> input);
        bool payOSTransferHandler(WebhookType body);
         Task<CreatePaymentResult> CreatePaymentLink(CreatePaymentLinkRequest body);
          Task<PaymentLinkInformation> GetOrder(int orderId);
         Task<PaymentLinkInformation> CancelOrder(int orderId);
         Task ConfirmWebhook(ConfirmWebhookRequest body);
        Task<IEnumerable<PaymentIsPaidResponse>> GetPaymentbyUserId(string id);
        Task<PaymentIsPaidResponse> GetCurrnetSubcription();


    }
}
</file>

<file path="Services/MealService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.MealDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class MealService : IMealService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ICloudinaryService _cloudinaryService;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public MealService(IUnitOfWork unitOfWork, ICloudinaryService cloudinaryService, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _cloudinaryService = cloudinaryService;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        public async Task CreateMealAsync(MealDTO mealDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if meal name exists
                var existingMeal = await _unitOfWork.Repository<Meal>().FirstOrDefaultAsync(x => x.Name == mealDTO.Name);
                if (existingMeal != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Meal name already exists");
                }

                // Create map
                var meal = _mapper.Map<Meal>(mealDTO);

                // Process image
                if (mealDTO.Image != null)
                {
                    meal.Image = await _cloudinaryService.UploadImageAsync(mealDTO.Image);
                }

                // Set create time and user
                meal.CreatedTime = DateTime.UtcNow;
                meal.CreatedBy = userId;
                meal.LastUpdatedTime = DateTime.UtcNow;
                meal.LastUpdatedBy = userId;
                
                await _unitOfWork.Repository<Meal>().AddAsync(meal);
                await _unitOfWork.SaveChangeAsync();

                // Handle Meal Dishes
                if (mealDTO.DishIds != null && mealDTO.DishIds.Any())
                {
                    var mealDishes = mealDTO.DishIds.Select(dishId => new MealDish
                    {
                        MealId = meal.Id,
                        DishId = dishId,
                        CreatedTime = DateTime.UtcNow,
                        CreatedBy = userId
                    }).ToList();

                    // Add meal dishes
                    await _unitOfWork.Repository<MealDish>().AddRangeAsync(mealDishes);
                    await _unitOfWork.SaveChangeAsync();
                }
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteMealAsync(string id)
        {
            try
            {
                var meal = await _unitOfWork.Repository<Meal>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Meal does not exist!");

                // Check if meal is favorited
                var favMeal = await _unitOfWork.Repository<FavoriteMeal>().FindAsync(x => x.MealId == id);
                if (favMeal.Any())
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, "Someone has this meal in their favorite!");
                }

                meal.DeletedTime = DateTime.UtcNow;
                meal.DeletedBy = _tokenService.GetUserIdFromToken();

                await _unitOfWork.Repository<Meal>().UpdateAsync(meal);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<MealResponse>> GetAllMealsAsync()
        {
            try
            {
                var meals = await _unitOfWork.Repository<Meal>().GetAllAsync(
                    include:
                        x => x.Include(m => m.MealDishes)
                        .ThenInclude(d => d.Dish)
                    );

                return _mapper.Map<IEnumerable<MealResponse>>(meals);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<BasePaginatedList<MealResponse>> GetAllMealsAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                BasePaginatedList<Meal> meals = await _unitOfWork.Repository<Meal>().GetAllWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    include: query => query.Include(m => m.MealDishes)
                    .ThenInclude(d => d.Dish),
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.Name.Contains(searchTerm),
                    orderBy: x => x.OrderByDescending(m => m.LastUpdatedTime).ThenByDescending(m => m.CreatedTime)
                );

                if (meals == null || !meals.Items.Any())
                {
                    return new BasePaginatedList<MealResponse>(new List<MealResponse>(), 0, pageIndex, pageSize);
                }

                var mealResponses = _mapper.Map<List<MealResponse>>(meals.Items);
                return new BasePaginatedList<MealResponse>(
                    mealResponses,
                    mealResponses.Count,
                    pageIndex,
                    pageSize);
            }
            catch (AutoMapperMappingException ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"AutoMapper error: {ex.Message}");
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, $"An error occurred: {ex.Message}");
            }
        }

        public async Task<MealResponse> GetMealByIdAsync(string id)
        {
            try
            {
                var meal = await _unitOfWork.Repository<Meal>().GetByIdAsync(
                    id,
                    include: query => query.Include(m => m.MealDishes)
                    .ThenInclude(d => d.Dish))
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Meal does not exist!");

                return _mapper.Map<MealResponse>(meal);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateMealAsync(string id, MealDTO mealDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if meal exists
                var existingMeal = await _unitOfWork.Repository<Meal>().GetByIdAsync(id)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Meal does not exist!");

                // Check if name exists and is not the current meal
                var existingName = await _unitOfWork.Repository<Meal>().FirstOrDefaultAsync(x => x.Name == mealDTO.Name && x.Id != id);
                if (existingName != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Meal name already exists");
                }

                // Retrieve old image
                var oldImgUrl = existingMeal.Image;

                _mapper.Map(mealDTO, existingMeal);

                // Process image
                if (mealDTO.Image != null)
                {
                    // Upload new image
                    existingMeal.Image = await _cloudinaryService.UploadImageAsync(mealDTO.Image);

                    // Delete old image if it exists
                    if (!string.IsNullOrEmpty(oldImgUrl))
                    {
                        var publicId = oldImgUrl.Split('/').Last().Split('.')[0];
                        await _cloudinaryService.DeleteImageAsync(publicId);
                    }
                }
                else
                {
                    // Keep old image
                    existingMeal.Image = oldImgUrl;
                }

                // Handle Meal Dishes
                // First, remove existing dishes
                if (existingMeal.MealDishes != null && existingMeal.MealDishes.Any())
                {
                    _unitOfWork.Repository<MealDish>().DeleteRangeAsync(existingMeal.MealDishes);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Add new dishes if provided
                if (mealDTO.DishIds != null && mealDTO.DishIds.Any())
                {
                    var newMealDishes = mealDTO.DishIds.Select(dishId => new MealDish
                    {
                        MealId = id,
                        DishId = dishId,
                        CreatedTime = DateTime.UtcNow,
                        CreatedBy = userId
                    }).ToList();

                    // Add new meal dishes
                    await _unitOfWork.Repository<MealDish>().AddRangeAsync(newMealDishes);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Set last updated time and user
                existingMeal.LastUpdatedTime = DateTime.UtcNow;
                existingMeal.LastUpdatedBy = userId;

                await _unitOfWork.Repository<Meal>().UpdateAsync(existingMeal);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/UserPreferenceService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using BusinessObjects.FixedData;
using DTOs.UserPreferenceDTOs;
using Microsoft.AspNetCore.Http;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class UserPreferenceService : IUserPreferenceService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public UserPreferenceService(IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        private RegionType CombineRegionTypes(List<RegionType> regionTypes)
        {
            RegionType combined = RegionType.None;
            foreach (var type in regionTypes)
            {
                combined |= type;
            }
            return combined;
        }

        private List<RegionType> SplitRegionTypes(RegionType combinedType)
        {
            return Enum.GetValues(typeof(RegionType))
                .Cast<RegionType>()
                .Where(r => r != RegionType.None && combinedType.HasFlag(r))
                .ToList();
        }

        public async Task<UserPreferenceResponse> GetUserPreferenceByIdAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var userPreference = await _unitOfWork.Repository<UserPreference>().FirstOrDefaultAsync(x => x.SmartDietUserId == userId)
                                    ?? throw new ErrorException(
                                        StatusCodes.Status404NotFound,
                                        ErrorCode.NOT_FOUND,
                                        "User preference not found!");

                var response = _mapper.Map<UserPreferenceResponse>(userPreference);
                response.PrimaryRegionTypes = SplitRegionTypes(userPreference.PrimaryRegionType);
                return response;
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task CreateUserPreferenceAsync(UserPreferenceDTO userPreferenceDto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existingPreference = await _unitOfWork.Repository<UserPreference>().FindAsync(
                    x => x.SmartDietUserId == userId);

                if (existingPreference.Any())
                {
                    throw new ErrorException(
                        StatusCodes.Status400BadRequest,
                        ErrorCode.BADREQUEST,
                        "User preference already exists for this user!");
                }

                var userPreference = _mapper.Map<UserPreference>(userPreferenceDto);
                userPreference.SmartDietUserId = userId;
                userPreference.CreatedTime = DateTime.UtcNow;
                userPreference.CreatedBy = userId;
                userPreference.PrimaryRegionType = CombineRegionTypes(userPreferenceDto.PrimaryRegionTypes);

                await _unitOfWork.Repository<UserPreference>().AddAsync(userPreference);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateUserPreferenceAsync(UserPreferenceDTO userPreferenceDto)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                var existingPreference = await _unitOfWork.Repository<UserPreference>().FirstOrDefaultAsync(x => x.SmartDietUserId == userId)
                                      ?? throw new ErrorException(
                                          StatusCodes.Status404NotFound,
                                          ErrorCode.NOT_FOUND,
                                          "User preference not found!");

                if (existingPreference.CreatedBy != userId)
                {
                    throw new ErrorException(
                        StatusCodes.Status403Forbidden,
                        ErrorCode.FORBIDDEN,
                        "You are not authorized to update this user preference!");
                }

                _mapper.Map(userPreferenceDto, existingPreference);
                existingPreference.PrimaryRegionType = CombineRegionTypes(userPreferenceDto.PrimaryRegionTypes);
                existingPreference.LastUpdatedTime = DateTime.UtcNow;
                existingPreference.LastUpdatedBy = userId;

                await _unitOfWork.Repository<UserPreference>().UpdateAsync(existingPreference);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        //public async Task<IEnumerable<UserPreferenceResponse>> GetAllUserPreferencesAsync()
        //{
        //    try
        //    {
        //        var userPreferences = await _unitOfWork.Repository<UserPreference>().GetAllAsync();
        //        return _mapper.Map<IEnumerable<UserPreferenceResponse>>(userPreferences);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
        //    }
        //}

        //public async Task<BasePaginatedList<UserPreferenceResponse>> GetAllUserPreferencesAsync(int pageIndex, int pageSize, string? searchTerm)
        //{
        //    try
        //    {
        //        var userPreferences = await _unitOfWork.Repository<UserPreference>().GetAllWithPaginationAsync(
        //            pageIndex,
        //            pageSize,
        //            searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.SmartDietUserId.Contains(searchTerm),
        //            orderBy: x => x.OrderBy(p => p.SmartDietUserId)
        //        );

        //        if (userPreferences == null || !userPreferences.Items.Any())
        //        {
        //            return new BasePaginatedList<UserPreferenceResponse>(
        //                new List<UserPreferenceResponse>(),
        //                0,
        //                pageIndex,
        //                pageSize);
        //        }

        //        var response = _mapper.Map<List<UserPreferenceResponse>>(userPreferences.Items);
        //        return new BasePaginatedList<UserPreferenceResponse>(
        //            response,
        //            response.Count,
        //            pageIndex,
        //            pageSize);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
        //    }
        //}
    }
}
</file>

<file path="SmartDietAPI/Controllers/MealRecommendationController.cs">
using BusinessObjects.Base;
using Microsoft.AspNetCore.Mvc;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MealRecommendationController : Controller
    {
        private readonly IRecommendationService _recommendationService;

        public MealRecommendationController(IRecommendationService recommendationService)
        {
            _recommendationService = recommendationService;
        }

        [HttpGet("recommendations")]
        public async Task<IActionResult> GetRecommendations()
        {
            var recommendations = await _recommendationService.GetRecommendedMealsAsync();
            return Ok(ApiResponse<object>.Success(recommendations));
        }

        [HttpPost("generate")]
        public async Task<IActionResult> GenerateRecommendations()
        {
            var recommendations = await _recommendationService.GenerateRecommendationsAsync();
            return Ok(ApiResponse<object>.Success(null, "Generated successfully", 201));
        }

        [HttpPost("regenerate")]
        public async Task<IActionResult> RegenerateRecommendations()
        {
            var recommendations = await _recommendationService.RegenerateRecommendationsAsync();
            return Ok(ApiResponse<object>.Success(null, "Generated successfully", 201));
        }

        [HttpGet("history")]
        public async Task<IActionResult> GetRecommendationHistory()
        {
            var history = await _recommendationService.GetRecommendationHistoryAsync();
            return Ok(ApiResponse<object>.Success(history));
        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/PaymentController.cs">
using BusinessObjects.Base;
using DataAccessObjects.Migrations;
using DTOs.AuthDTOs;
using DTOs.PaymentDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Net.payOS.Types;
using Services.Interfaces;
using System.Collections.Generic;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PaymentController : ControllerBase
    {
        private IPaymentService _service;
        public PaymentController(IPaymentService service)
        {
            _service = service;
        }
        [HttpPost("/create-payment-link")]
        public async Task<IActionResult> Checkout(List<CheckOutRequest> input)
        {
            CreatePaymentResult result = await _service.Checkout(input);
            return Ok(ApiResponse<object>.Success(result));
        }

        [HttpPost("create")]

        public async Task<IActionResult> CreatePaymentLink(CreatePaymentLinkRequest body)
        {
            CreatePaymentResult result = await _service.CreatePaymentLink(body);
            return Ok(ApiResponse<object>.Success(result));

        }
        [HttpGet("get-order/{orderId}")]
        public async Task<IActionResult> GetOrder([FromRoute] int orderId)
        {
            PaymentLinkInformation result =  await _service.GetOrder(orderId);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("get-order-by/{userId}")]
        public async Task<IActionResult> GetPaymentbyUserId([FromRoute] string userId)
        {
            var result = await _service.GetPaymentbyUserId(userId);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpGet("get-current-subscription")]
        public async Task<IActionResult> GetCurrnetSubcription()
        {
            var result = await _service.GetCurrnetSubcription();
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPut("cancel-order/{orderId}")]
        public async Task<IActionResult> CancelOrder([FromRoute] int orderId)
        {
            PaymentLinkInformation result =  await _service.CancelOrder(orderId);
            return Ok(ApiResponse<object>.Success(result));
        }
        [HttpPost("payos_transfer_handler")]
        public IActionResult PayOSTransferHandler(WebhookType body)
        {
            var isTransferSuccessful = _service.payOSTransferHandler(body);
            if (isTransferSuccessful)
            {
                return Ok(ApiResponse<object>.Success(null, "Transfer successful"));
            }
            else
            {
                return Ok(ApiResponse<object>.Error(null, "Transfer failed"));

            }
        }
        [HttpPost("confirm-webhook")]
        public async Task<IActionResult> ConfirmWebhook(ConfirmWebhookRequest body)
        {
           await _service.ConfirmWebhook(body);
            return Ok(ApiResponse<object>.Success(null, "Confirm-wedhook"));

        }
    }
}
</file>

<file path="SmartDietAPI/Controllers/UsersController.cs">
using BusinessObjects.Base;
using DTOs.UserProfileDTos;
using Google.Apis.Http;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Services;
using Services.Interfaces;

namespace SmartDietAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        private readonly IUserService _userService;
        public UsersController(IUserService userService)
        {
            _userService = userService;
        }
        [HttpPost("add-user-with-role")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> AddUserWithRoleAsync(RegisterUserWithRoleRequest request)
        {
            await _userService.AddUserWithRoleAsync(request);
            return Ok(ApiResponse<object>.Success("Create user successfully"));
        }
        [HttpPut("update-user-profile")]
        [Authorize]
        public async Task<IActionResult> UpdateUserProfile([FromBody] UpdateUserProfileRequest request)
        {
            await _userService.UpdateUserProfiles(request);
            return Ok(ApiResponse<object>.Success("Update profile successfully"));

        }
        [HttpDelete("{userId}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteUser( string userId)
        {

            await _userService.DeleteUser(userId);
            return Ok(ApiResponse<object>.Success("Delete user successfully"));
        }
        [HttpGet("profile")]
        //[Authorize]
        public async Task<IActionResult> GetUserProfile()
        {
            var userProfile = await _userService.GetUserProfile();
            return Ok(ApiResponse<object>.Success(userProfile));
        }
        [HttpGet("all")]
        //[Authorize]
        public async Task<IActionResult> GetUserProfiles([FromQuery] int pageIndex = 1, [FromQuery] int pageSize = 10, [FromQuery] string? searchTerm = null)
        {
            var result = await _userService.GetAllUserProfileAsync(pageIndex, pageSize, searchTerm);
            return Ok(ApiResponse<object>.Success(result));
        }
    }
}
</file>

<file path="SmartDietAPI/SmartDietAPI.csproj">
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>f1204d72-bd4b-4fc6-ba7c-ae95274c3742</UserSecretsId>
	<GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Cors" Version="2.3.0" />
    <PackageReference Include="dotenv.net" Version="3.2.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BusinessObjects\BusinessObjects.csproj" />
    <ProjectReference Include="..\DTOs\DTOs.csproj" />
    <ProjectReference Include="..\Services\Services.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.Production.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

</Project>
</file>

<file path="DataAccessObjects/SmartDietDbContext.cs">
using BusinessObjects.Entity;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System.Reflection.Emit;


namespace DataAccessObjects
{
    public class SmartDietDbContext : IdentityDbContext<SmartDietUser, IdentityRole, string>
    {
        public SmartDietDbContext(DbContextOptions<SmartDietDbContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
        }

        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<UserPreference> UserPreferences { get; set; }
        public DbSet<UserAllergy> UserAllergies { get; set; }
        public DbSet<UserFeedback> UserFeedbacks { get; set; }
        public DbSet<FavoriteDish> FavoriteDishes { get; set; }
        public DbSet<FavoriteMeal> FavoriteMeals { get; set; }
        public DbSet<Food> Foods { get; set; }
        public DbSet<FoodAllergy> FoodAllergies { get; set; }
        public DbSet<Dish> Dishes { get; set; }
        public DbSet<DishIngredient> DishIngredients { get; set; }
        public DbSet<Meal> Meals { get; set; }
        public DbSet<MealDish> MealDishes { get; set; }
        public DbSet<MealRating> MealRatings { get; set; }
        public DbSet<NutrientCategory> NutrientCategories { get; set; }
        public DbSet<Fridge> Fridges { get; set; }
        public DbSet<FridgeItem> FridgeItems { get; set; }
        public DbSet<MealRecommendationHistory> MealRecommendationHistories { get; set; }
        public DbSet<UserMealInteraction> UserMealInteractions { get; set; }
        public DbSet<DishRecommendHistory> DishRecommendHistories { get; set; }
        public DbSet<UserPayment> UserPayments { get; set; }
        public DbSet<Subcription> Subcriptions { get; set; }
        public DbSet<UserDishInteraction> UserDishInteractions { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FoodAllergy>()
            .HasOne(fa => fa.Food)
            .WithMany(f => f.FoodAllergies)
            .HasForeignKey(fa => fa.FoodId)
            .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<FoodAllergy>()
                .HasOne(fa => fa.AllergenFood)
                .WithMany()
                .HasForeignKey(fa => fa.AllergenFoodId)
                .OnDelete(DeleteBehavior.Cascade);

            base.OnModelCreating(modelBuilder);
        }
    }
}
</file>

<file path="SmartDietAPI/MiddleWare/ValidationMiddleware.cs">
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Net;

namespace SmartDietAPI.MiddleWare
{
    public class ValidationMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly TokenValidationParameters _tokenValidationParams;

        public ValidationMiddleware(RequestDelegate next, TokenValidationParameters tokenValidationParams)
        {
            _next = next;
            _tokenValidationParams = tokenValidationParams;
        }

        public async Task Invoke(HttpContext context)
        {
            var token = context.Request.Headers["Authorization"].FirstOrDefault()?.Split(" ").Last();

            //var tokenCookie = context.Request.Cookies.TryGetValue("accessToken", out var cookie);
            //if (cookie == null)
            //{
            //    cookie = context.Request.Headers["Authorization"];
            //    if (!string.IsNullOrEmpty(cookie) && tokenCookie.ToString().StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
            //    {
            //        cookie = cookie.ToString().Substring(7).Trim();
            //    }
            //}    
            if (!string.IsNullOrEmpty(token))
            {
                var jwtTokenHandler = new JwtSecurityTokenHandler();
                try
                {
                    // Validate the token
                    var tokenInVerification = jwtTokenHandler.ValidateToken(token, _tokenValidationParams, out var validatedToken);

                    if (validatedToken is JwtSecurityToken jwtSecurityToken)
                    {
                        var result = jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase);

                        if (!result)
                        {
                            context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                            var errorResponse = new
                            {
                                error = "invalid_token",
                                error_description = "The signature key was not found or token is invalid."
                            };
                            await context.Response.WriteAsJsonAsync(errorResponse);
                            return;
                        }

                        // Check if token has expired
                        var userClaim = jwtSecurityToken.Claims.FirstOrDefault(claim => claim.Type == JwtRegisteredClaimNames.NameId)?.Value;
                        if (userClaim != null )
                        {
                            var userManager = context.RequestServices.GetRequiredService<UserManager<SmartDietUser>>();

                            SmartDietUser? user = await userManager.FindByIdAsync(userClaim);
                            if (user == null)
                            {
                                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                                var errorResponse = new
                                {
                                    error = "invalid_token",
                                    error_description = $" User {userClaim} not exist. Login again"
                                };
                                await context.Response.WriteAsJsonAsync(errorResponse);
                                return;
                            }
                        }
                        var expClaim = jwtSecurityToken.Claims.FirstOrDefault(claim => claim.Type == JwtRegisteredClaimNames.Exp)?.Value;
                        if (expClaim != null && long.TryParse(expClaim, out var exp))
                        {
                            var expDateTime = DateTimeOffset.FromUnixTimeSeconds(exp).UtcDateTime;
                            if (expDateTime < DateTime.UtcNow)
                            {
                                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                                var errorResponse = new
                                {
                                    error = "expired_token",
                                    error_description = "The token has expired."
                                };
                                await context.Response.WriteAsJsonAsync(errorResponse);
                                return;
                            }
                        }
                    }
                }
                catch (SecurityTokenException ex)
                {
                    context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    var errorResponse = new
                    {
                        error = "invalid_token",
                        error_description = "Token validation failed. Error: " + ex.Message
                    };
                    await context.Response.WriteAsJsonAsync(errorResponse);
                    return;
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    var errorResponse = new
                    {
                        error = "invalid_token",
                        error_description = "An error occurred while processing the token. Error: " + ex.Message
                    };
                    await context.Response.WriteAsJsonAsync(errorResponse);
                    return;
                }
            }

            await _next(context);
        }
    }
}
</file>

<file path="Services/AuthService.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.AuthDTOs;
using Google.Apis.Auth;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Repositories.Interfaces;
using Services.Interfaces;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace Services
{
    public class AuthService : IAuthService
    {
        private readonly UserManager<SmartDietUser> _userManager;
        private readonly SignInManager<SmartDietUser> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork _unitOfWork;
        private readonly IHttpContextAccessor _contextAccessor;
        private readonly IConfiguration _configuration;
        private readonly IMemoryCache _memoryCache;
        private readonly IEmailService _emailService;

        public AuthService(UserManager<SmartDietUser> userManager,
                           SignInManager<SmartDietUser> signInManager,
                           RoleManager<IdentityRole> roleManager,
                           IConfiguration configuration,
                           IMapper mapper,
                           IUnitOfWork unitOfWork,
                           IHttpContextAccessor contextAccessor,
                           IMemoryCache memoryCache,
                           IEmailService emailService)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _contextAccessor = contextAccessor;
            _configuration = configuration;
            _mapper = mapper;
            _unitOfWork = unitOfWork;
            _roleManager = roleManager;
            _memoryCache = memoryCache;
            _emailService = emailService;
        }
        //private void SetTokenInsideCookie(string name, string value, DateTimeOffset time, HttpContext context)
        //{
        //    context.Response.Cookies.Append(name, value,
        //    new CookieOptions
        //    {
        //        Expires = time,
        //        HttpOnly = true,
        //        IsEssential = true,
        //        Secure = true,
        //        SameSite = SameSiteMode.None,
        //    });
        //}
        private async Task<SmartDietUser> CheckRefreshToken(string refreshToken)
        {
            List<SmartDietUser> users = await _userManager.Users.ToListAsync();
            foreach (var user in users)
            {
                var token = await _userManager.GetAuthenticationTokenAsync(user, "Default", "RefreshToken");
                if (token == refreshToken)
                    return user;
            }
            throw new ErrorException(401, ErrorCode.UNAUTHORIZED, "Token not valid");
        }
        private (string token, IEnumerable<string> roles) GenerateJwtToken(SmartDietUser user)
        {
            SecurityKey key = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]));
            List<Claim> claims = new List<Claim>
            {
               new Claim(ClaimTypes.NameIdentifier,user.Id),
               new Claim(ClaimTypes.Email,user.Email),
            };
            IEnumerable<string> roles = _userManager.GetRolesAsync(user).Result;
            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }
            SecurityTokenDescriptor securityTokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.UtcNow.AddDays(7),
                Issuer = _configuration["Jwt:Issuer"],
                Audience = _configuration["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256)
            };
            JwtSecurityTokenHandler securityTokenHandler = new JwtSecurityTokenHandler();
            SecurityToken token = securityTokenHandler.CreateToken(securityTokenDescriptor);
            return (securityTokenHandler.WriteToken(token), roles);
        }

        private async Task<string> GenerateRefreshToken(SmartDietUser user)
        {
            string? refreshToken = Guid.NewGuid().ToString();
            string? tokenUsed = await _userManager.GetAuthenticationTokenAsync(user, "Default", "RefreshToken");
            if (tokenUsed != null)
            {
                await _userManager.RemoveAuthenticationTokenAsync(user, "Default", "RefreshToken");

            }
            await _userManager.SetAuthenticationTokenAsync(user, "Default", "RefreshToken", refreshToken);
            return refreshToken;
        }

        private string GenerateOTP()
        {
            Random random = new Random();
            string otp = random.Next(0, 10000).ToString();
            return otp;
        }

        public async Task<AuthResponse> Login(LoginRequest request)
        {
            if(request.Email == null)    
               throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            if (request.Password == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input password");


            var user = await _userManager.FindByEmailAsync(request.Email)
            ?? throw new ErrorException(404, ErrorCode.NOT_FOUND, "User not found");
            if (!await _userManager.IsEmailConfirmedAsync(user))
            {
                throw new ErrorException(StatusCodes.Status406NotAcceptable, ErrorCode.BADREQUEST, "User not confirm");
            }
            SignInResult result = await _signInManager.PasswordSignInAsync(user, request.Password, false, false);
            if (!result.Succeeded)
            {
                throw new ErrorException(401, ErrorCode.UNAUTHORIZED, "Wrong password");
            }

            _contextAccessor.HttpContext.Session.SetString("UserId", user.Id);
            (string token, IEnumerable<string> roles) = GenerateJwtToken(user);
            string refreshToken = await GenerateRefreshToken(user);

            return new AuthResponse
            {
                AccessToken = token,
                RefreshToken = refreshToken,
                User = new UserInfo
                {
                    Email = user.Email,
                    Roles = roles.ToList(),
                }
            };

        }

        public async Task<AuthResponse> RefreshToken(RefreshTokenRequest request)
        {
            if (request.refreshToken == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input refreshToken");
            SmartDietUser user = await CheckRefreshToken(request.refreshToken);
            (string token, IEnumerable<string> roles) = GenerateJwtToken(user);
            string refreshToken = await GenerateRefreshToken(user);

            return new AuthResponse
            {
                AccessToken = token,
                RefreshToken = refreshToken,
                User = new UserInfo
                {
                    Email = user.Email,
                    Roles = roles.ToList(),
                }
            };
        }

        public async Task Register(RegisterRequest request)
        {
            if (request.Email == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            if (request.Name == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input name");
            if (request.Password == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input password");
            if (!string.IsNullOrEmpty(request.PhoneNumber))
            { 
                if(request.PhoneNumber.Length != 10 || !request.PhoneNumber.All(char.IsDigit))
                {
                    throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input right number phone");
                }
            }
            SmartDietUser? user = await _userManager.FindByEmailAsync(request.Email);
            if (user != null)
            {
                throw new ErrorException(400, ErrorCode.BADREQUEST, "Email have been registed");
            }
            var newUser = _mapper.Map<SmartDietUser>(request);
            newUser.UserName = request.Email;
            IdentityResult result = await _userManager.CreateAsync(newUser, request.Password);
            if (result.Succeeded)
            {
                await _unitOfWork.Repository<UserProfile>().AddAsync(new UserProfile
                {
                    SmartDietUserId = newUser.Id,
                    FullName = request.Name,
                    ProfilePicture = "",
                    TimeZone = "UTC",
                    PreferredLanguage = "en",
                    EnableEmailNotifications = true,
                    EnableNotifications = true,
                    EnablePushNotifications = true,
                    CreatedBy = newUser.Id,
                });
                await _unitOfWork.SaveChangeAsync();
                bool roleExist = await _roleManager.RoleExistsAsync("Member");
                if (!roleExist)
                {
                    await _roleManager.CreateAsync(new IdentityRole { Name = "Member" });
                }
                await _userManager.AddToRoleAsync(newUser, "Member");
                string OTP = GenerateOTP();
                string cacheKey = $"OTP_{request.Email}";
                _memoryCache.Set(cacheKey, OTP, TimeSpan.FromMinutes(10));
                await _emailService.SendEmailAsync(request.Email, "Confirm User", OTP);
            }
            else
            {
                throw new ErrorException(500, ErrorCode.INTERNAL_SERVER_ERROR, $"Error when creating user {result.Errors.FirstOrDefault()?.Description}");
            }
        }
        public async Task VerifyOtp(ConfirmOtpRequest request, bool isResetPassword)
        {
            if (request.Email == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            if (request.OTP == null || !request.OTP.All(char.IsDigit))
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input right OTP");
            string cacheKey = isResetPassword ? $"OTPResetPassword_{request.Email}" : $"OTP_{request.Email}";
            if (_memoryCache.TryGetValue(cacheKey, out string memory))
            {
                if (memory == request.OTP)
                {
                    SmartDietUser? user = await _userManager.FindByEmailAsync(request.Email);
                    string? token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    await _userManager.ConfirmEmailAsync(user, token);
                    _memoryCache.Remove(cacheKey);
                    if (isResetPassword)
                    {
                        var tokenReset = await _userManager.GeneratePasswordResetTokenAsync(user);
                        _memoryCache.Set($"ResetPassword_{user.Email}", tokenReset, TimeSpan.FromMinutes(10));
                    }
                }
                else
                {
                    throw new ErrorException(500, ErrorCode.BADREQUEST, "Otp not valid");
                }
            }
            else
            {
                throw new ErrorException(500, ErrorCode.BADREQUEST, "Otp not valid");
            }
        }
        public async Task ResendConfirmationEmail(EmailRequest request)
        {
            if (request.Email == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            var otp = GenerateOTP();
            var cacheKey = $"OTP_{request.Email}";
            if (_memoryCache.TryGetValue(cacheKey, out var memory))
            {
                throw new ErrorException(500, ErrorCode.BADREQUEST, "OTP have been sent");
            }
            _memoryCache.Set(cacheKey, otp, TimeSpan.FromMinutes(10));
            await _emailService.SendEmailAsync(request.Email, "Confirm User", otp);
        }
        public async Task ChangePassword(ChangePasswordRequest request)
        {
            if (request.OldPassword == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input old password");
            if (request.NewPassword == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input new password");
            string userId = _contextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value
                ?? throw new ErrorException(401, ErrorCode.UNAUTHORIZED, "Something not correct");
            SmartDietUser? user = await _userManager.FindByIdAsync(userId);
            IdentityResult result = await _userManager.ChangePasswordAsync(user, request.OldPassword, request.NewPassword);
            if (!result.Succeeded)
            {
                throw new ErrorException(500, ErrorCode.INTERNAL_SERVER_ERROR, result.Errors.First().Description);
            }
        }

        public async Task ResetPassword(ResetPasswordRequest request)
        {
            if (request.Email == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            if (request.Password == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input password");
            var cacheKey = $"ResetPassword_{request.Email}";
            if (_memoryCache.TryGetValue(cacheKey, out string memory))
            {
                SmartDietUser user = await _userManager.FindByEmailAsync(request.Email)
                ?? throw new ErrorException(404, ErrorCode.NOT_FOUND, "User not found");

                //var token = await _userManager.GeneratePasswordResetTokenAsync(user);

                if (!await _userManager.IsEmailConfirmedAsync(user))
                {
                    throw new ErrorException(StatusCodes.Status406NotAcceptable, ErrorCode.BADREQUEST, "User not confirm");
                }

                IdentityResult result = await _userManager.ResetPasswordAsync(user, memory, request.Password);

                if (!result.Succeeded)
                {
                    throw new ErrorException(500, ErrorCode.BADREQUEST, result.Errors.First().Description);
                }

                _memoryCache.Remove(cacheKey);

            }
            else
            {
                throw new ErrorException(500, ErrorCode.BADREQUEST, "OTP Reset password not confirm");
            }

        }

        public async Task ForgotPassword(EmailRequest request)
        {
            if (request.Email == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input email");
            SmartDietUser? user = await _userManager.FindByEmailAsync(request.Email)
            ?? throw new ErrorException(400, ErrorCode.BADREQUEST, "User not found");
            if (!await _userManager.IsEmailConfirmedAsync(user))
            {
                throw new ErrorException(400, ErrorCode.BADREQUEST, "User not confirm");
            }
            string OTP = GenerateOTP();
            string cacheKey = $"OTPResetPassword_{user.Email}";
            _memoryCache.Set(cacheKey, OTP, TimeSpan.FromMinutes(1));
            await _emailService.SendEmailAsync(user.Email, "Confirm User", OTP);

        }
        public async Task<AuthResponse> LoginGoogle(TokenGoogleRequest request)
        {
            if (request.token == null)
                throw new ErrorException(404, ErrorCode.NOT_FOUND, "Please input token");
            GoogleJsonWebSignature.Payload payload = await GoogleJsonWebSignature.ValidateAsync(request.token);
            string email = payload.Email;
            string providerKey = payload.Subject;
            SmartDietUser? user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                user = _mapper.Map<SmartDietUser>(new { email });
                user.Email = email;
                var result = await _userManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    bool roleExist = await _roleManager.RoleExistsAsync("Member");
                    if (!roleExist)
                    {
                        await _roleManager.CreateAsync(new IdentityRole { Name = "Member" });
                    }
                    await _userManager.AddToRoleAsync(user, "Member");
                    UserLoginInfo? info = new("Google", providerKey, "Google");
                    IdentityResult identityResult = await _userManager.AddLoginAsync(user, info);
                    if (!identityResult.Succeeded)
                    {
                        throw new ErrorException(500, ErrorCode.INTERNAL_SERVER_ERROR, $"Error when created user {identityResult.Errors.First().Description}");
                    }
                }
                else
                {
                    throw new ErrorException(500, ErrorCode.INTERNAL_SERVER_ERROR, $"Error when created user {result.Errors.First().Description}");
                }
            }
            (string token, IEnumerable<string> roles) = GenerateJwtToken(user);
            string refreshToken = await GenerateRefreshToken(user);


            return new AuthResponse
            {
                AccessToken = token,
                RefreshToken = refreshToken,
                User = new UserInfo
                {
                    Email = user.Email,
                    Roles = roles.ToList()
                }
            };
        }


    }
}
</file>

<file path="Services/DishService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.DishDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Services
{
    public class DishService : IDishService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ICloudinaryService _cloudinaryService;
        private readonly ITokenService _tokenService;

        public DishService(IUnitOfWork unitOfWork, IMapper mapper, ICloudinaryService cloudinaryService, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _cloudinaryService = cloudinaryService;
            _tokenService = tokenService;
        }

        public async Task CreateDishAsync(DishDTO dishDTO, List<DishIngredientDTO> dishIngredientDTOs)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Check if dish name already exists
                var existingName = await _unitOfWork.Repository<Dish>().FirstOrDefaultAsync(x => x.Name == dishDTO.Name);
                if (existingName != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Dish name already exists");
                }

                // Create map
                var dish = _mapper.Map<Dish>(dishDTO);

                // Process image
                if (dishDTO.Image != null)
                {
                    dish.Image = await _cloudinaryService.UploadImageAsync(dishDTO.Image);
                }

                // Set created time and user
                dish.CreatedTime = DateTime.UtcNow;
                dish.CreatedBy = userId;
                dish.LastUpdatedTime = DateTime.UtcNow;
                dish.LastUpdatedBy = userId;
                // Save dish to the database
                await _unitOfWork.Repository<Dish>().AddAsync(dish);
                await _unitOfWork.SaveChangeAsync();

                // Process dish ingredients
                if (dishIngredientDTOs != null && dishIngredientDTOs.Any())
                {
                    var dishIngredients = dishIngredientDTOs.Select(
                        ingredient => new DishIngredient
                        {
                            DishId = dish.Id,
                            FoodId = ingredient.FoodId,
                            Quantity = ingredient.Quantity,
                            CreatedTime = DateTime.UtcNow,
                            CreatedBy = userId
                        }).ToList();

                    // Save ingredients to the database
                    try
                    {
                        await _unitOfWork.Repository<DishIngredient>().AddRangeAsync(dishIngredients);
                        await _unitOfWork.SaveChangeAsync();
                    }
                    catch
                    {
                        // Rollback dish creation if ingredient saving fails
                        _unitOfWork.Repository<Dish>().DeleteAsync(dish);
                        await _unitOfWork.SaveChangeAsync();
                        throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, "Error while saving dish ingredients");
                    }
                }
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task DeleteDishAsync(string dishId)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Retrieve existing dish
                var existingDish = await _unitOfWork.Repository<Dish>().GetByIdAsync(dishId,
                    includes: x => x.DishIngredients)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Dish does not exist");

                // Check if dish is in any meal
                var meal = await _unitOfWork.Repository<MealDish>().FindAsync(x => x.DishId == dishId);
                if (meal.Any())
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, "Dish is in one or more meals!");
                }

                // Check if dish is favorited
                var favDish = await _unitOfWork.Repository<FavoriteDish>().FindAsync(x => x.DishId == dishId);
                if (favDish.Any())
                {
                    throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT, "Someone has this dish in their favorite!");
                }

                // Set deleted time and user
                existingDish.DeletedTime = DateTime.UtcNow;
                existingDish.DeletedBy = userId;

                // Set `DeletedTime` and `DeletedBy` for each ingredient
                foreach (var ingredient in existingDish.DishIngredients)
                {
                    ingredient.DeletedTime = DateTime.UtcNow;
                    ingredient.DeletedBy = userId;
                }

                // Save changes to the database
                await _unitOfWork.Repository<Dish>().UpdateAsync(existingDish);
                await _unitOfWork.Repository<DishIngredient>().UpdateRangeAsync(existingDish.DishIngredients);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<IEnumerable<DishResponse>> GetAllDishesAsync()
        {
            try
            {
                var dishes = await _unitOfWork.Repository<Dish>().GetAllAsync();

                return _mapper.Map<IEnumerable<DishResponse>>(dishes);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<BasePaginatedList<DishResponse>> GetAllDishesAsync(int pageIndex, int pageSize, string? searchTerm)
        {
            try
            {
                BasePaginatedList<Dish> dishes = await _unitOfWork.Repository<Dish>().GetAllWithPaginationAsync(
                    pageIndex,
                    pageSize,
                    include: x => x.Include(x => x.DishIngredients)
                    .ThenInclude(x => x.Food),
                    searchTerm: x => string.IsNullOrEmpty(searchTerm) || x.Name.Contains(searchTerm),
                    orderBy: x => x.OrderByDescending(d => d.LastUpdatedTime).ThenByDescending(d => d.CreatedTime)
                );

                if (dishes == null || !dishes.Items.Any())
                {
                    return new BasePaginatedList<DishResponse>(new List<DishResponse>(), 0, pageIndex, pageSize);
                }

                var dishResponses = _mapper.Map<List<DishResponse>>(dishes.Items);
                return new BasePaginatedList<DishResponse>(
                    dishResponses,
                    dishResponses.Count,
                    pageIndex,
                    pageSize);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task<DishResponse> GetDishByIdAsync(string dishId)
        {
            try
            {
                var dish = await _unitOfWork.Repository<Dish>().GetByIdAsync(
                    dishId,
                    include: x => x.Include(x => x.DishIngredients)
                    .ThenInclude(x => x.Food))
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Dish does not exist!");

                return _mapper.Map<DishResponse>(dish);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }

        public async Task UpdateDishAsync(string dishId, DishDTO dishDTO)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                // Retrieve existing dish
                var existingDish = await _unitOfWork.Repository<Dish>().GetByIdAsync(
                    dishId,
                    includes: x => x.DishIngredients)
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Dish does not exist!");

                // Check if dish name exists and is not the current dish
                var existingName = await _unitOfWork.Repository<Dish>().FirstOrDefaultAsync(x => x.Name == dishDTO.Name && x.Id != dishId);
                if (existingName != null)
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Dish name already exists");
                }

                // Handle image
                if (dishDTO.Image != null)
                {
                    // Upload new image
                    existingDish.Image = await _cloudinaryService.UploadImageAsync(dishDTO.Image);
                }
                else if (!string.IsNullOrEmpty(dishDTO.ImageUrl))
                {
                    // Keep existing image URL
                    existingDish.Image = dishDTO.ImageUrl;
                }

                // Map other properties
                existingDish.Name = dishDTO.Name;
                existingDish.Description = dishDTO.Description;
                existingDish.Instruction = dishDTO.Instruction;
                existingDish.PrepTimeMinutes = dishDTO.PrepTimeMinutes;
                existingDish.CookingTimeMinutes = dishDTO.CookingTimeMinutes;
                existingDish.RegionType = dishDTO.RegionType;
                existingDish.DietType = dishDTO.DietType;
                existingDish.Difficulty = dishDTO.Difficulty;

                // Handle dish ingredients
                // Remove existing dish ingredients
                if (existingDish.DishIngredients != null && existingDish.DishIngredients.Any())
                {
                    _unitOfWork.Repository<DishIngredient>().DeleteRangeAsync(existingDish.DishIngredients);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Add new dish ingredients
                if (dishDTO.DishIngredients != null && dishDTO.DishIngredients.Any())
                {
                    var newIngredients = dishDTO.DishIngredients.Select(
                        ingredient => new DishIngredient
                        {
                            DishId = existingDish.Id,
                            FoodId = ingredient.FoodId,
                            Quantity = ingredient.Quantity,
                            CreatedTime = DateTime.UtcNow,
                            CreatedBy = userId
                        }).ToList();

                    // Save new ingredients to the database
                    await _unitOfWork.Repository<DishIngredient>().AddRangeAsync(newIngredients);
                    await _unitOfWork.SaveChangeAsync();
                }

                // Set last updated time and user
                existingDish.LastUpdatedTime = DateTime.UtcNow;
                existingDish.LastUpdatedBy = userId;

                // Save changes to the database
                await _unitOfWork.Repository<Dish>().UpdateAsync(existingDish);
                await _unitOfWork.SaveChangeAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new ErrorException(StatusCodes.Status500InternalServerError, ErrorCode.INTERNAL_SERVER_ERROR, ex.Message);
            }
        }
    }
}
</file>

<file path="Services/PaymentService.cs">
using AutoMapper;
using Azure;
using BusinessObjects.Entity;
using BusinessObjects.Exceptions;
using DTOs.PaymentDTOs;
using MailKit.Search;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Net.payOS;
using Net.payOS.Types;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class PaymentService : IPaymentService
    {
        private readonly PayOS _payOS;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;
        public PaymentService(PayOS payOS, IHttpContextAccessor httpContextAccessor, IUnitOfWork unitOfWork, IMapper mapper, ITokenService tokenService)
        {
            _payOS = payOS;
            _httpContextAccessor = httpContextAccessor;
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _tokenService = tokenService;
        }
        public async Task<CreatePaymentResult> Checkout(List<CheckOutRequest> input)
        {
            try
            {
                int orderCode = int.Parse(DateTimeOffset.Now.ToString("ffffff"));
                List<ItemData> items = new List<ItemData>();

                foreach (var data in input) {
                    items.Add(new ItemData (data.Name, data.Quantity, data.Price));                           
                }
                // Get the current request's base URL
                var request = _httpContextAccessor.HttpContext.Request;
                var baseUrl = $"{request.Scheme}://{request.Host}";

                PaymentData paymentData = new PaymentData(
                    orderCode,
                    2000,
                    "Thanh toan don hang",
                    items,
                    $"{baseUrl}/cancel",
                    $"{baseUrl}/success"
                );

                CreatePaymentResult createPayment = await _payOS.createPaymentLink(paymentData);

                return createPayment;
            }
            catch (System.Exception exception)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Checkout Error");
            }
        }

        public bool payOSTransferHandler(WebhookType body)
        {
            try
            {
                WebhookData data = _payOS.verifyPaymentWebhookData(body);

                if (data.description == "Ma giao dich thu nghiem" || data.description == "VQRIO123")
                {
                    return true;
                }
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "tranfer handle error");
            }

        }
        // Create payment link
        public async Task<CreatePaymentResult> CreatePaymentLink(CreatePaymentLinkRequest body)
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();

                if (body.price <= 0 || string.IsNullOrEmpty(body.productName))
                {
                    throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Invalid payment details");
                }

                int orderCode = int.Parse(DateTimeOffset.Now.ToString("ffffff"));

                ItemData item = new ItemData(body.productName, 1, body.price);
                List<ItemData> items = new List<ItemData>();
                PaymentData paymentData = new PaymentData(orderCode, body.price, body.description, items, body.cancelUrl, body.returnUrl);

                CreatePaymentResult createPayment = await _payOS.createPaymentLink(paymentData);



                var existingUserPayment = await _unitOfWork.Repository<UserPayment>()
                    .FirstOrDefaultAsync(x => x.SmartDietUserId == userId && x.PaymentStatus.ToLower() == "paid", include: x => x.Include(up => up.Subcription));

                if (existingUserPayment != null && existingUserPayment.CreatedTime.AddMonths(existingUserPayment.Subcription.MonthOfSubcription) > DateTime.UtcNow) {
                    var subcriptionIsPard = await _unitOfWork.Repository<Subcription>().GetByIdAsync(existingUserPayment.SubcriptionId);
                    {
                        throw new ErrorException(StatusCodes.Status409Conflict, ErrorCode.CONFLICT,
                            $"{userId} already has an active subscription: {existingUserPayment.Subcription.Name}");
                    }

                }
                var subcription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(body.subcriptionId)
                                     ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subscription not found!");

                var userPayment = new UserPayment()
                {
                    Id = createPayment.orderCode.ToString(),
                    description = body.description,
                    SubcriptionId = body.subcriptionId,
                    Amount = body.price,
                    PaymentMethod = "QR",
                    PaymentDate = DateTime.Now,
                    PaymentStatus = "Pending",
                    SmartDietUserId = userId,
                    CreatedBy = userId,
                    CreatedTime = DateTime.Now,
                };
                await _unitOfWork.Repository<UserPayment>().AddAsync(userPayment);
                await _unitOfWork.SaveChangeAsync();
                return createPayment;
            }
            catch (Exception exception)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Failed to create payment link");

            }
        }
        // Get order
        public async Task<PaymentLinkInformation> GetOrder(int orderId)
        {
            try
            {
                PaymentLinkInformation paymentLinkInformation = await _payOS.getPaymentLinkInformation(orderId);
                var userId = _tokenService.GetUserIdFromToken();
                var existingUserPayment = await _unitOfWork.Repository<UserPayment>().GetByIdAsync(orderId.ToString())
                  ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "UserPayment does not exist!");

                existingUserPayment.PaymentStatus = paymentLinkInformation.status.ToString();
                existingUserPayment.LastUpdatedTime = DateTime.UtcNow;
                existingUserPayment.LastUpdatedBy = userId;

                await _unitOfWork.Repository<UserPayment>().UpdateAsync(existingUserPayment);
                await _unitOfWork.SaveChangeAsync();
                return paymentLinkInformation;
            }
            catch (System.Exception exception)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Get order error");
            }

        }
        // CancleOrder
        public async Task<PaymentLinkInformation> CancelOrder(int orderId)
        {
            try
            {
                PaymentLinkInformation paymentLinkInformation = await _payOS.cancelPaymentLink(orderId);
                var userId = _tokenService.GetUserIdFromToken();

                var existingUserPayment = await _unitOfWork.Repository<UserPayment>().GetByIdAsync(orderId.ToString())
                    ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "UserPayment does not exist!");

                existingUserPayment.PaymentStatus = paymentLinkInformation.status.ToString();
                existingUserPayment.LastUpdatedTime = DateTime.UtcNow;
                existingUserPayment.LastUpdatedBy = userId;

                await _unitOfWork.Repository<UserPayment>().UpdateAsync(existingUserPayment);
                await _unitOfWork.SaveChangeAsync();
                return paymentLinkInformation;
            }
            catch (Exception exception)
            {

                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Cancel order error");

            }

        }
        public async Task<PaymentIsPaidResponse> GetCurrnetSubcription()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var existingUserPayment = await _unitOfWork.Repository<UserPayment>().FirstOrDefaultAsync(x => x.SmartDietUserId == userId && x.PaymentStatus.ToLower() == "paid")
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "UserPayment does not exist!");

                var subscription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(existingUserPayment.SubcriptionId)
                             ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subcription does not exist!");
                if(existingUserPayment.CreatedTime.AddMonths(subscription.MonthOfSubcription) < DateTime.Now)
                {
                    throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, $"Subcription {subscription.Name} had expired!");

                }
                 return new PaymentIsPaidResponse
                {
                    Name = subscription.Name,
                    Description = existingUserPayment.description,
                    SmartDietUserId = existingUserPayment.SmartDietUserId,
                    SubscriptionId = subscription.Id,
                    StartDate = existingUserPayment.CreatedTime,
                    EndDate = existingUserPayment.CreatedTime.AddMonths(subscription.MonthOfSubcription)
                };
            }
            catch (Exception exception)
            {

                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Cancel order error");

            }

        }
        public async Task<IEnumerable<PaymentIsPaidResponse>> GetPaymentbyUserId(string id)
        {
            try
            {
                var existingUserPayment = await _unitOfWork.Repository<UserPayment>().FindAsync(x => x.SmartDietUserId == id)
                ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "UserPayment does not exist!");
                var responseList = new List<PaymentIsPaidResponse>();

                foreach (var payment in existingUserPayment)
                {
                    var subscription = await _unitOfWork.Repository<Subcription>().GetByIdAsync(payment.SubcriptionId)
                        ?? throw new ErrorException(StatusCodes.Status404NotFound, ErrorCode.NOT_FOUND, "Subcription does not exist!");

                    var response = new PaymentIsPaidResponse
                    {
                        Name = subscription.Name,
                        Description = payment.description,
                        SmartDietUserId = payment.SmartDietUserId,
                        SubscriptionId = subscription.Id,
                        StartDate = payment.CreatedTime,
                        EndDate = payment.CreatedTime.AddMonths(subscription.MonthOfSubcription)
                    };

                    responseList.Add(response);
                }


                return responseList;
            }
            catch (Exception exception)
            {

                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Cancel order error");

            }

        }
        // ConfirmWedHook
        public async Task ConfirmWebhook(ConfirmWebhookRequest body)
        {
            try
            {
                await _payOS.confirmWebhook(body.webhook_url);
            }
            catch (System.Exception exception)
            {
                throw new ErrorException(StatusCodes.Status400BadRequest, ErrorCode.BADREQUEST, "Confirm Wedhook error");
            }

        }
    }
}
</file>

<file path=".github/workflows/main.yml">
name: Publish 🚀

on:
  workflow_dispatch:
  push:
    branches:
      - master
    
env:
  AZURE_WEBAPP_NAME: SmartDietAPI
  AZURE_WEBAPP_PACKAGE_PATH: "./publish"
  ASPNETCORE_ENVIRONMENT: "Production"
    
jobs: 
  publish:
    runs-on: ubuntu-latest

    steps: 
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore dependencies
        run: dotnet restore ./SmartDietAPI/SmartDietAPI.csproj  # Chỉ restore project chính

      - name: Build project
        run: dotnet build ./SmartDietAPI/SmartDietAPI.csproj --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish ./SmartDietAPI/SmartDietAPI.csproj --configuration Release --no-build --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Verify published files
        run: ls -la ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}  # Kiểm tra file trong thư mục publish

      - name: Deploy to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
</file>

<file path="Services/RecommendationService.cs">
using AutoMapper;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using BusinessObjects.Enum;
using BusinessObjects.Exceptions;
using DTOs.MealDTOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Repositories.Interfaces;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Services
{
    public class RecommendationService : IRecommendationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly MealRecommendationSettings _settings;
        private readonly IMapper _mapper;
        private readonly ITokenService _tokenService;

        public RecommendationService(IUnitOfWork unitOfWork, IOptions<MealRecommendationSettings> options, IMapper mapper, ITokenService tokenService)
        {
            _unitOfWork = unitOfWork;
            _settings = options.Value;
            _mapper = mapper;
            _tokenService = tokenService;
        }

        // Generate meal recommendations for a user
        public async Task<IEnumerable<MealResponse>> GenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var userPreferences = await _unitOfWork.Repository<UserPreference>()
                    .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
                    ?? throw new Exception("User preferences not found");

                var userAllergies = await _unitOfWork.Repository<UserAllergy>()
                    .FindAsync(ua => ua.SmartDietUserId == userId);

                var recentMeals = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

                var recentMealIds = recentMeals.Select(r => r.MealId).ToHashSet();

                var allMeals = await _unitOfWork.Repository<Meal>().GetAllAsync(
                    //includes:
                    //[
                    //    m => m.MealDishes,
                    //    m => m.MealDishes.Select(md => md.Dish),
                    //    m => m.MealDishes.Select(md => md.Dish.DishIngredients),
                    //    m => m.MealDishes.Select(md => md.Dish.DishIngredients.Select(di => di.Food))
                    //]
                    include: query =>
    query.Include(m => m.MealDishes)
         .ThenInclude(md => md.Dish)
         .ThenInclude(d => d.DishIngredients)
         .ThenInclude(di => di.Food)

                    );

                var filteredMeals = allMeals.Where(m =>
                    //!recentMealIds.Contains(m.Id) &&
                    m.MealDishes.Any(md =>

                        md.Dish.DietType == userPreferences.PrimaryDietType
                        &&
                        (userPreferences.PrimaryRegionType.HasFlag(md.Dish.RegionType) ||
                         md.Dish.RegionType.HasFlag(userPreferences.PrimaryRegionType))
                         &&
                        md.Dish.CookingTimeMinutes <= userPreferences.MaxCookingTime
                        &&
                        md.Dish.Difficulty <= userPreferences.MaxRecipeDifficulty
                        &&
                        !md.Dish.DishIngredients.Any(di => userAllergies.Any(ua => ua.FoodId == di.FoodId))

                    )).ToList();

                var scoredMeals = filteredMeals.Select(m => new
                {
                    Meal = m,
                    Score = CalculateMealScore(m, userId)
                }).OrderByDescending(m => m.Score).ToList();

                var recommendedMeals = scoredMeals.Take(userPreferences.DailyMealCount).Select(m => m.Meal).ToList();

                // Save recommendations to history
                foreach (var meal in recommendedMeals)
                {
                    await _unitOfWork.Repository<MealRecommendationHistory>().AddAsync(new MealRecommendationHistory
                    {
                        Id = Guid.NewGuid().ToString(),
                        SmartDietUserId = userId,
                        MealId = meal.Id,
                        CreatedBy = userId,
                        RecommendationDate = DateTime.UtcNow
                    });
                }

                await _unitOfWork.SaveChangeAsync();

                return _mapper.Map<IEnumerable<MealResponse>>(recommendedMeals);
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to generate recommendations", ex);
            }
        }

        // Regenerate recommendations for a user
        public async Task<IEnumerable<MealResponse>> RegenerateRecommendationsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                // Clear recent recommendations
                var recentRecommendations = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended));

                _unitOfWork.Repository<MealRecommendationHistory>().DeleteRangeAsync(recentRecommendations);
                await _unitOfWork.SaveChangeAsync();

                // Generate new recommendations
                return await GenerateRecommendationsAsync();
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to regenerate recommendations", ex);
            }
        }

        // Get current recommended meals for a user
        public async Task<IEnumerable<MealResponse>> GetRecommendedMealsAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var userPreferences = await _unitOfWork.Repository<UserPreference>()
            .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
            ?? throw new Exception("User preferences not found");
                var recentRecommendations = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId &&
                        r.RecommendationDate > DateTime.UtcNow.AddDays(-_settings.DaysToExcludeRecentlyRecommended),
                        include: query => query.Include(x => x.Meal)
                        .ThenInclude(x => x.MealDishes)
                        .ThenInclude(x => x.Dish)
                        .OrderByDescending(r => r.RecommendationDate) // Order by newest first
            .Take(userPreferences.DailyMealCount)
                        );

                return _mapper.Map<IEnumerable<MealResponse>>(recentRecommendations.Select(r => r.Meal));
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to get recommended meals", ex);
            }
        }

        // Get recommendation history for a user
        public async Task<IEnumerable<MealResponse>> GetRecommendationHistoryAsync()
        {
            try
            {
                var userId = _tokenService.GetUserIdFromToken();
                var userPreferences = await _unitOfWork.Repository<UserPreference>()
            .FirstOrDefaultAsync(up => up.SmartDietUserId == userId)
            ?? throw new Exception("User preferences not found");
                var recommendationHistory = await _unitOfWork.Repository<MealRecommendationHistory>()
                    .FindAsync(r => r.SmartDietUserId == userId,
                        include: query => query.Include(x => x.Meal)
                        .ThenInclude(x => x.MealDishes)
                        .ThenInclude(x => x.Dish)
                        .OrderByDescending(r => r.RecommendationDate) // Order by newest first
            .Take(userPreferences.DailyMealCount));

                return _mapper.Map<IEnumerable<MealResponse>>(recommendationHistory.Select(r => r.Meal));
            }
            catch (ErrorException)
            {
                throw;
            }
            catch (Exception ex)
            {
                // Log the exception and rethrow or handle it as needed
                throw new Exception("Failed to get recommendation history", ex);
            }
        }

        // Calculate the score for a meal
        private double CalculateMealScore(Meal meal, string userId)
        {
            var mealRatingPoints = meal.AverageRating * _settings.Points.MealRatingPerStar;

            var userInteraction = _unitOfWork.Repository<UserMealInteraction>()
                .FirstOrDefaultAsync(umi => umi.SmartDietUserId == userId && umi.MealId == meal.Id).Result;

            var interactionPoints = userInteraction?.InteractionType switch
            {
                InteractionType.Liked => _settings.Points.LikedMeal,
                InteractionType.Disliked => _settings.Points.DislikedMeal,
                _ => 0
            };

            var favoriteDishPoints = meal.MealDishes.Sum(md =>
                _unitOfWork.Repository<FavoriteDish>()
                    .AnyAsync(fd => fd.SmartDietUserId == userId && fd.DishId == md.DishId).Result
                    ? _settings.Points.FavoriteDishPerDish : 0);

            var newMealPoints = userInteraction == null ? _settings.Points.NewMeal : 0;

            return mealRatingPoints + interactionPoints + favoriteDishPoints + newMealPoints;
        }
    }
}
</file>

<file path="Services/Configs/MappingProfiles.cs">
using AutoMapper;
using BusinessObjects.Entity;
using BusinessObjects.FixedData;
using DTOs.AuthDTOs;
using DTOs.DishDTOs;
using DTOs.FavoriteDishDTOs;
using DTOs.FavoriteMealDTOs;
using DTOs.FoodDTOs;
using DTOs.FridgeDTOs;
using DTOs.MealDTOs;
using DTOs.MealDishDTOs;
using DTOs.RoleDTOs;
using DTOs.SubcriptionDTOs;
using DTOs.UserAllergyDTOs;
using DTOs.UserFeedbackDTOs;
using DTOs.UserPreferenceDTOs;
using DTOs.UserProfileDTos;
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Services.Mappers
{
    public class MappingProfiles : Profile
    {
        private List<RegionType> SplitRegionTypes(RegionType combinedType)
        {
            return Enum.GetValues(typeof(RegionType))
                .Cast<RegionType>()
                .Where(r => r != RegionType.None && combinedType.HasFlag(r))
                .ToList();
        }

        public MappingProfiles()
        {

            #region food
            // Food mapping
            CreateMap<FoodDTO, Food>()
                .ForMember(dest => dest.FoodAllergies, opt => opt.Ignore())
                .ForMember(dest => dest.Image, opt => opt.Ignore());

            CreateMap<Food, FoodResponse>()
                .ForMember(dest => dest.NutrientCategories, opt => opt
                    .MapFrom(src => src.NutrientCategories))
                .ForMember(dest => dest.FoodAllergies, opt => opt
                    .MapFrom(src => src.FoodAllergies))
                .ForMember(dest => dest.Image, opt => opt
                    .MapFrom(src => src.Image));
            
            CreateMap<FoodAllergy, FoodAllergyResponse>()
                .ForMember(dest => dest.AllergenFoodId, opt => opt
                    .MapFrom(src => src.AllergenFoodId))
                .ForMember(dest => dest.AllergenFoodName, opt => opt
                    .MapFrom(src => src.AllergenFood));

            CreateMap<NutrientCategory, NutrientCategoryResponse>()
                .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null));

            #endregion food
            
            #region dish
            // Dish mapping
            CreateMap<DishDTO, Dish>()
                .ForMember(dest => dest.Image, opt => opt.Ignore())
                .ForMember(dest => dest.Video, opt => opt.Ignore())
                .ForMember(dest => dest.DishIngredients, opt => opt.Ignore());

            CreateMap<Dish, DishResponse>()
                .ForMember(dest => dest.DishIngredients, opt => opt
                .MapFrom(src => src.DishIngredients));

            // Dish ingregdient mapping
            CreateMap<DishIngredientDTO, DishIngredient>();

            CreateMap<DishIngredient, DishIngredientResponse>()
                .ForMember(dest => dest.FoodName, opt => opt
                .MapFrom(src => src.Food.Name));

            // Interation mapping
            CreateMap<UserDishInteractionDTO, UserDishInteraction>();
            CreateMap<UserDishInteraction, UserDishInteractionResponse>();
            #endregion dish

            #region meal
            CreateMap<MealDTO, Meal>()
                .ForMember(dest => dest.Image, opt => opt.Ignore());

            CreateMap<Meal, MealResponse>()
                .ForMember(dest => dest.MealDishes, opt => opt
                .MapFrom(src => src.MealDishes))
                .ForMember(dest => dest.Image, opt => opt
                .MapFrom(src => src.Image));

            CreateMap<MealDish, DTOs.MealDTOs.MealDishResponse>()
                .ForMember(dest => dest.Id, opt => opt
                .MapFrom(src => src.DishId))
                .ForMember(dest => dest.Name, opt => opt
                .MapFrom(src => src.Dish.Name))
                .ForMember(dest => dest.Image, opt => opt
                .MapFrom(src => src.Dish.Image));

            CreateMap<UserMealInteractionDTO, UserMealInteraction>();
            CreateMap<UserMealInteraction, UserMealInteractionResponse>();
            #endregion meal

            #region User
            // Auth
            CreateMap<SmartDietUser,RegisterRequest>().ReverseMap();
            // User
            CreateMap<UpdateUserProfileRequest,UserProfile>().ReverseMap();
            // UserProfle
            CreateMap<SmartDietUser, RegisterUserWithRoleRequest>().ReverseMap();
            CreateMap<UserProfile, UserProfileResponse>().ReverseMap();
            CreateMap<UserProfileDTO, UserProfile>()
                .ForMember(dest => dest.ProfilePicture, opt => opt.Ignore()); ;
            // role
            CreateMap<IdentityRole, RoleResponse>().ReverseMap();
            #endregion User

            #region Favorite Dish Mappings
            CreateMap<FavoriteDish, FavoriteDishResponse>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Dish.Name))
                .ForMember(dest => dest.Image, opt => opt.MapFrom(src => src.Dish.Image));

            CreateMap<FavoriteDishDTO, FavoriteDish>();
            #endregion 

            #region Favorite Meal Mappings
            CreateMap<FavoriteMeal, FavoriteMealResponse>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Meal.Name))
                .ForMember(dest => dest.Image, opt => opt.MapFrom(src => src.Meal.Image));

            CreateMap<FavoriteMealDTO, FavoriteMeal>();
            #endregion Favorite Meal Mappings

            #region User Preference Mapping
            CreateMap<UserPreference, UserPreferenceResponse>()
                .ForMember(x => x.PrimaryDietType, y => y.MapFrom(src => src.PrimaryDietType.ToString()))
                .ForMember(x => x.PrimaryRegionTypes, y => y.MapFrom(src => SplitRegionTypes(src.PrimaryRegionType)))
                .ForMember(x => x.DailyMealCount, y => y.MapFrom(src => src.DailyMealCount))
                .ForMember(x => x.DishesPerMealCount, y => y.MapFrom(src => src.DishesPerMealCount))
                .ForMember(x => x.MaxCookingTime, y => y.MapFrom(src => src.MaxCookingTime))
                .ForMember(x => x.MaxRecipeDifficulty, y => y.MapFrom(src => src.MaxRecipeDifficulty.ToString()))
                .ForMember(x => x.NotifyLowInventory, y => y.MapFrom(src => src.NotifyLowInventory))
                .ForMember(x => x.LowInventoryThreshold, y => y.MapFrom(src => src.LowInventoryThreshold));

            CreateMap<UserPreferenceDTO, UserPreference>()
                //.ForMember(x => x.PrimaryDietType, y => y.MapFrom(src => Enum.Parse<DietType>(src.PrimaryDietType)))
                //.ForMember(x => x.PrimaryRegionType, y => y.MapFrom(src => Enum.Parse<RegionType>(src.PrimaryRegionType)))
                .ForMember(x => x.DailyMealCount, y => y.MapFrom(src => src.DailyMealCount))
                .ForMember(x => x.DishesPerMealCount, y => y.MapFrom(src => src.DishesPerMealCount))
                .ForMember(x => x.MaxCookingTime, y => y.MapFrom(src => src.MaxCookingTime))
                //.ForMember(x => x.MaxRecipeDifficulty, y => y.MapFrom(src => Enum.Parse<DifficultyLevel>(src.MaxRecipeDifficulty)))
                .ForMember(x => x.NotifyLowInventory, y => y.MapFrom(src => src.NotifyLowInventory))
                .ForMember(x => x.LowInventoryThreshold, y => y.MapFrom(src => src.LowInventoryThreshold));
            #endregion

            #region User Feedback Mappings
            CreateMap<UserFeedback, UserFeedbackResponse>();

            CreateMap<UserFeedbackDTO, UserFeedback>();
            #endregion 

            #region fridge
            CreateMap<FridgeDTO, Fridge>();
            CreateMap<FridgeItemDTO, FridgeItem>();
            CreateMap<Fridge, FridgeRespose>();
            CreateMap<FridgeItem, FridgeItemResponse>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Food.Name))
                .ForMember(dest => dest.Image, opt => opt.MapFrom(src => src.Food.Image));
            #endregion fridge

            #region UserAllergy
            CreateMap<UserAllergy, UserAllergyResponse>()
                .ForMember(dest => dest.FoodName, opt => opt.MapFrom(src => src.Food.Name));
            CreateMap<UserAllergyDTO, UserAllergy>();
            #endregion UserAllergy

            #region Subcription
            CreateMap<Subcription, SubcriptionResponse>()
                .ForMember(dest => dest.SubscriptionType, opt => opt.MapFrom(src => src.SubscriptionType.ToString()));
            CreateMap<SubcriptionResponse, SubcriptionRequest>();
            CreateMap<SubcriptionRequest, Subcription>();
            #endregion Subcription

            CreateMap<MealDishDTO, MealDish>();
            CreateMap<MealDish, DTOs.MealDishDTOs.MealDishResponse>();
        }
    }
}
</file>

<file path="SmartDietAPI/appsettings.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Server=ADMIN;Database=SmartDietDbTest1;UID=sa;PWD=12345;TrustServerCertificate=True;"
  },
  "Cloudinary": {
    "CloudName": "dtsjztbus",
    "ApiKey": "364422968749592",
    "ApiSecret": "br30UcuIlvTqHx0ZZYhLanSGn6Y"
  },
  "MailSettings": {
    "Mail": "phutg2000@gmail.com",
    "DisplayName": "Smart Diet",
    "Password": "ncdcrorhduyhpjbq",
    "Host": "smtp.gmail.com",
    "Port": 587
  },
  "Jwt": {
    "Key": "TranCongNguyenTonGiaChiPhuDungChienhihi",
    "Issuer": "BackEnd",
    "Audience": "BackEnd"
  },
  "DataCleanup": {
    "DaysThreshold": 30
  },
  "MealRecommendation": {
    "Points": {
      "MealRatingPerStar": 1,
      "LikedMeal": 2,
      "DislikedMeal": -1,
      "FavoriteDishPerDish": 0.5,
      "NewMeal": 3,
      "DiversityPenalty": 0.3
    },
    "MaxMealsPerCategory": 20,
    "DaysToExcludeRecentlyRecommended": 3
  },
  "DishRecommendationSettings": {
    "Points": {
      "DishRatingPerStar": 1,
      "LikedDish": 1,
      "DislikedDish": -1,
      "NewDish": 3,
      "SeasonalBonus": 1
    },
    "MaxDishesToRecommend": 20,
    "DaysToExcludeRecentlyRecommended": 3
  },
  "Google": {
    "ClientId": "605023551571-evs4d221n5tdk768r8u56u3oigbcgffp.apps.googleusercontent.com",
    "ClientSecret": "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"

  },
  "FridgeSettings": {
    "FridgeLimit": 5
  },
  "PAYOS_CLIENT": {
    "PAYOS_CLIENT_ID": "6c0e7550-7f5f-44dc-a116-0fcd03bf691b",
    "PAYOS_API_KEY": "a159af8f-bc4f-47c9-b121-f82e605c6804",
    "PAYOS_CHECKSUM_KEY": "b54c684555a9f67573cbec56192fcd0f7bb9d504dc8bad9ae5583728cad14bee"
  }
}
</file>

<file path="Services/Configs/ServiceConnfigure.cs">
using DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Repositories.Interfaces;
using Repositories;
using Services.Interfaces;
using Services.Mappers;
using System.Reflection;
using Services.Configs;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using BusinessObjects.Base;
using BusinessObjects.Entity;
using SmartDietAPI.Services;
using Net.payOS;


namespace Services
{
    public static class ServiceConnfigure
    {
        public static IServiceCollection ConfigureService(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddDbContext<SmartDietDbContext>(options =>
                options.UseSqlServer(
                    configuration.GetConnectionString("DefaultConnection")));
            // Email
            services.AddTransient<IEmailService, EmailSevice>();
            //seed
            services.AddScoped<SeedAccount>();
                //services.AddScoped<SeedData>();
            //
            services.Configure<MealRecommendationSettings>(configuration.GetSection("MealRecommendation"));
            // Unit of work DI
            services.AddScoped<Net.payOS.PayOS>(provider =>
            {
                // Lấy các giá trị từ cấu hình (appsettings.json hoặc environment variables)
                string clientId = configuration["PAYOS_CLIENT:PAYOS_CLIENT_ID"] ?? throw new Exception("Cannot find PAYOS_CLIENT_ID in configuration");
                string apiKey = configuration["PAYOS_CLIENT:PAYOS_API_KEY"] ?? throw new Exception("Cannot find PAYOS_API_KEY in configuration");
                string checksumKey = configuration["PAYOS_CLIENT:PAYOS_CHECKSUM_KEY"] ?? throw new Exception("Cannot find PAYOS_CHECKSUM_KEY in configuration");

                // Trả về instance của PayOS
                return new Net.payOS.PayOS(clientId, apiKey, checksumKey);
            });
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped<IPaymentService, PaymentService>();
            // Other service DI
            services.AddScoped<IFoodService, FoodService>();
            services.AddScoped<IDishService, DishService>();
            services.AddScoped<IMealService, MealService>();
            services.AddScoped<IMealDishService, MealDishService>();

            services.AddScoped<IFavoriteMealService, FavoriteMealService>();
            services.AddScoped<IFavoriteDishService, FavoriteDishService>();
            services.AddScoped<IUserMealInteractionService, UserMealInteractionService>();
            services.AddScoped<IUserDishInteractionService, UserDishInteractionService>();

            services.AddScoped<ICloudinaryService, CloudinaryService>();
            services.AddScoped<IFridgeService, FridgeService>();

            services.AddScoped<IUserPreferenceService, UserPreferenceService>();
            services.AddScoped<IUserAllergyService, UserAllergyService>();
            services.AddScoped<IUserFeedbackService, UserFeedbackService>();
            services.AddScoped<IUserProfileService, UserProfileService>();

            services.AddScoped<IAuthService, AuthService>();
            services.AddScoped<ITokenService, TokenService>();
            services.AddScoped<IUserService, UserService>();
            services.AddScoped<IRoleService, RoleService>();
            services.AddScoped<IRecommendationService, RecommendationService>();
            services.AddScoped<ISubcriptionService, SubcriptionService>();
            services.AddScoped<IMealRecommendationServiceV2, MealRecommendationServiceV2>();


            // Add new file handling services
            services.AddScoped<IFileHandlerService, FileHandlerService>();
            services.AddScoped<IExcelImportService<Meal>, ExcelImportService<Meal>>();
            services.AddScoped<IExcelImportService<Dish>, ExcelImportService<Dish>>();
            services.AddScoped<IExcelImportService<Food>, ExcelImportService<Food>>();

            // Add DishRecommendation settings configuration
            services.Configure<DishRecommendationSettings>(configuration.GetSection("DishRecommendation"));

            // jwt middleware
            services.AddSingleton<TokenValidationParameters>(provider =>
            {
                return new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidAudience = configuration["Jwt:Issuer"],
                    ValidIssuer = configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]!)),
                    ClockSkew = TimeSpan.FromMinutes(60)
                };
            });
            // Background service
            //services.AddHostedService<DataCleanUpService>();
            //AutoMapper
            services.AddAutoMapper(cfg =>
            {
                cfg.AddMaps(Assembly.GetExecutingAssembly());
                cfg.AllowNullDestinationValues = true;
                cfg.AllowNullCollections = true;
            });

            services.AddHttpContextAccessor();

            // Add DishRecommendation service
            services.AddScoped<IDishRecommendationService, DishRecommendationService>();

            return services;
        }
    }
}
</file>

<file path="SmartDietAPI/Program.cs">
using BusinessObjects.Base;
using BusinessObjects.Entity;
using DataAccessObjects;
using Google.Apis.Json;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.Google;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Services;
using Services.Configs;
using Services.Interfaces;
using SmartDietAPI.MiddleWare;
using System.Reflection;
using System.Text;


namespace SmartDietAPI
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            var environment = builder.Environment.EnvironmentName;
            Console.WriteLine($"Environment: {environment}");
            Console.WriteLine($"Connection string: {builder.Configuration.GetConnectionString("DefaultConnection")}");
            //builder.WebHost.UseUrls("https://0.0.0.0:7095");

            var configuration  = builder.Configuration;
            // Add services to the container.
            builder.Services.AddControllers()
                .AddNewtonsoftJson(options =>
                {
                options.SerializerSettings.Converters.Add(new StringEnumConverter());
                });
            builder.Services.AddMemoryCache();
            // Configure Identity
            builder.Services.AddIdentity<SmartDietUser, IdentityRole>(options =>
            {
                //Configure identity options here if needed
                options.SignIn.RequireConfirmedAccount = true;
                options.Password.RequireDigit = true;
                options.Password.RequireLowercase = false;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequireUppercase = false;
                options.Password.RequiredLength = 6;
            })
            .AddEntityFrameworkStores<SmartDietDbContext>()
            .AddDefaultTokenProviders();
            //--------------------------
            builder.Services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
                .AddJwtBearer(options =>
                {
                    options.IncludeErrorDetails = true;
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ValidIssuer = configuration["Jwt:Issuer"],
                        ValidAudience = configuration["Jwt:Audience"],
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]!))
                    };

                });
            // Configure Services
            builder.Services.ConfigureService(builder.Configuration);
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddHttpContextAccessor();
            //------------------CORS---------
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowAll", policy =>
                {
                    policy.AllowAnyOrigin()
                          .AllowAnyHeader()
                          .AllowAnyMethod();
                });
            });
            //------------------Swagger---------
            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "SmartDiet.API", Version = "v1" });

                var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFilename);
                c.IncludeXmlComments(xmlPath);

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "Example: \"Authorization: Bearer {token}\"",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "Bearer" }
                        },
                        Array.Empty<string>()
                    }
                });
            });
            builder.Services.AddSwaggerGenNewtonsoftSupport();
            //----------Authen google---------------------------------------------
            //builder.Services.AddAuthentication(options =>
            //{
            //    options.DefaultChallengeScheme = GoogleDefaults.AuthenticationScheme;
            //    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
            //})
            //    .AddCookie()
            //   .AddGoogle(option =>
            //   {
            //       option.ClientId = Environment.GetEnvironmentVariable("GOOGLE_CLIENTID") ?? throw new Exception("GOOGLE_CLIENTID is not set");
            //       option.ClientSecret = Environment.GetEnvironmentVariable("GOOGLE_CLIENTSECRET") ?? throw new Exception("GOOGLE_CLIENTSECRET is not set");
            //       option.CallbackPath = "/signin-google";
            //       option.SaveTokens = true;
            //   });
            //----------------------------------------------------------------------
            builder.Services.Configure<DataProtectionTokenProviderOptions>(options =>
                    options.TokenLifespan = TimeSpan.FromMinutes(30));
            //-------------------------Token Provider-------------------------
            builder.Services.AddDistributedMemoryCache(); // Cấu hình cache cho session
            builder.Services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(30); // Thời gian timeout cho session
                options.Cookie.HttpOnly = true; // Cookie chỉ có thể truy cập từ server
                options.Cookie.IsEssential = true; // Cookie cần thiết cho ứng dụng
            });

            //---------------------------------------------------------------
            var app = builder.Build();
            //seed
            using (var scope = app.Services.CreateScope())
            {
                var services = scope.ServiceProvider;
                try
                {
                    var initialiser = scope.ServiceProvider.GetRequiredService<SeedAccount>();
                    initialiser.InitialiseAsync().Wait();
                    initialiser.SeedAsync().Wait();

/*                    var dataSeeder = services.GetRequiredService<SeedData>();
                    dataSeeder.InitialiseAsync().Wait();  // Ensure required dependencies are in place
                    dataSeeder.SeedAsync().Wait();*/

                }
                catch (Exception ex)
                {
                    var logger = services.GetRequiredService<ILogger<Program>>();
                    logger.LogError(ex, "An error occurred while seeding the database.");
                }
            }
            // Configure the HTTP request pipeline.
            app.UseHttpsRedirection();

            app.UseSwagger();


            

            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "SmartDiet API v1");
                // Serve Swagger UI at root in Production
                //if (!app.Environment.IsProduction())
                //{
                //    options.RoutePrefix = string.Empty;
                //}
            });
            //app.UseCors("AllowAllOrigins");
          app.UseCors("AllowAll");




            app.UseMiddleware<ValidationMiddleware>();
            app.UseMiddleware<ExceptionHandlingMiddleware>();
            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();
            app.UseSession();
            app.MapControllers();
            app.Run();
        }
    }
}
</file>

</files>
